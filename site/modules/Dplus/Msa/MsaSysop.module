<?php namespace ProcessWire;

include_once(__DIR__.'/MsaResponse.php');

use Purl\Url;

use ItemMasterItemQuery, ItemMasterItem;
use MsaSysopCodeQuery, MsaSysopCode;

/**
 * Module that handles the editing of the UPC item Xref
 */
class MsaSysop extends WireData implements Module {
	const MODEL              = 'MsaSysopCode';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'System Optional Codes';
	const DESCRIPTION_RECORD = 'System Optional Codes';
	const MODEL_TABLE = 'sys_opt_options';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return the Code records from Database
	 * @param  string $table Table Code
	 * @return ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the IDs for the Warehouses
	 * @return array
	 */
	public function get_codes_ids() {
		$q = $this->get_query();
		$q->select(MsaSysopCode::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Return the IDs for the Warehouses
	 * @return array
	 */
	public function get_codes_systems() {
		$q = $this->get_query();
		$q->select(MsaSysopCode::get_aliasproperty('system'));
		return $q->find()->toArray();
	}

	/**
	 * Return the Code records from Database filtered by ProductLne ID
	 * @param  string $system    System
	 * @param  string $code     System Option Code
	 * @return ObjectCollection
	 */
	public function get_code($system, $code) {
		$q = $this->get_query();
		$q->filterBySystem($system);
		return $q->findOneById($code);
	}

	/**
	 * Returns if Codes Exists
	 * @param  string $system    System
	 * @param  string $code     System Option Code
	 * @return bool
	 */
	public function code_exists($system, $code) {
		$q = $this->get_query();
		$q->filterBySystem($system);
		return boolval($q->filterById($code)->count());
	}

	/**
	 * Returns MsaSysopCodeQuery
	 * @return MsaSysopCodeQuery
	 */
	public function get_query() {
		return MsaSysopCodeQuery::create();
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$code  = $input->$rm->text('code');
		$system = $input->$rm->text('system');

		$q = $this->get_query();
		$q->filterBySystem($system);
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => MsaSysopCode::MAX_LENGTH_CODE));
			$record = new MsaSysopCode();
			$record->setCode($code);
		}

		if ($input->$rm->action) {
			$recordlocker = $this->wire('modules')->get('RecordLockerUser');

			/**
			 * Create lock for CTM code if not already locked.
			 */
			if (!$recordlocker->function_locked('sysop', $code)) {
				$recordlocker->create_lock('sysop', $code);
			}

			if ($record->isNew() || $recordlocker->function_locked_by_user('sysop', $code)) {
				if ($input->$rm->text('action') == 'remove-code') {
					$record->delete();
				} elseif ($input->$rm->text('action') == 'update-sysop'){
					$description = $input->$rm->text('description');
					$note_code = $input->$rm->text('note_code');
					$web_validate = $input->$rm->text('web_validate');
					$doc_store_folder = $input->$rm->text('doc_store_folder');
					$web_force = $input->$rm->text('web_force');
					$file_name = $input->$rm->text('file_name');
					$validate = $input->$rm->text('validate');
					$force = $input->$rm->text('force');
					$adv_search = $input->$rm->text('adv_search');
					$list_seq = $input->$rm->text('list_seq');
					$field_type = $input->$rm->text('field_type');
					$before_dec = $input->$rm->text('before_dec');
					$after_dec = $input->$rm->text('after_dec');

					$record->setDescription($description);
					$record->setSystem($system);
					$record->setNote_code($note_code);
					$record->setWeb_validate($web_validate);
					$record->setDoc_store_folder($doc_store_folder);
					$record->setWeb_force($web_force);
					$record->setFile_name($file_name);
					$record->setValidate($validate);
					$record->setForce($force);
					$record->setAdv_search($adv_search);
					$record->setList_seq($list_seq);
					$record->setField_type($field_type);
					$record->setBefore_dec($before_dec);
					$record->setAfter_dec($after_dec);
					$record->setDate(date('Ymd'));
					$record->setTime(date('His'));
					$record->setDummy('P');
				}
				$response = $this->save_and_process_response($system, $code, $record);
			} else {
				$response = new CodeTablesResponse();
				$response->set_key($code);
				$response->set_error(true);
				$response->set_action(CodeTablesResponse::CRUD_UPDATE);
				$message = self::DESCRIPTION_RECORD . " ($code) was not updated because it is locked by " . $recordlocker->get_locked_user('sysop', $code);
				$response->set_message($message);
			}
		} else {
			$response = new CodeTablesResponse();
			$response->set_key($code);
			$response->set_error(true);
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
			$message = self::DESCRIPTION_RECORD . " ($code) was not updated ";
			$response->set_message($message);
		}
		$this->wire('session')->response_codetable = $response;
	}

	/**
	 * Returns MsaResponse based on the outcome of the database save
	 * @param  MsaSysopCode $record Record to record response of database save
	 * @return MsaResponse
	 */
	protected function save_and_process_response($system, $code, MsaSysopCode $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new MsaResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(MsaResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(MsaResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(MsaResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->update_sysop_dplus_cobol($system, $code);
		}

		$response->set_key($system . '-' . $code);
		return $response;
	}

	/**
	 * Sends Dplus Cobol that Code Table has been Update
	 * @param  string $system System
	 * @param  string $code   Code
	 * @return void
	 */
	public function update_sysop_dplus_cobol($system, $code) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATESYSOP', "SYS=$system", "CODE=$code");
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['database'], session_id());
	}

	/**
	 * Return the Max Length of characters for the code
	 * NOTE: Used for the JS
	 * @return int
	 */
	public function get_max_length_code() {
		return MsaSysopCode::MAX_LENGTH_CODE;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus MSA Sysop CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for MSA Sysop',
			'singular' => true,
			'autoload' => true,
		);
	}
}
