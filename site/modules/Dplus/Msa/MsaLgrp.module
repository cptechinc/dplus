<?php namespace ProcessWire;

include_once(__DIR__.'/MsaResponse.php');

use Purl\Url;

use ItemMasterItemQuery, ItemMasterItem;
use SysLoginGroupQuery, SysLoginGroup;

/**
 * Module that handles the editing of the UPC item Xref
 */
class MsaLgrp extends WireData implements Module {
	const MODEL              = 'SysLoginGroup';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Login Group Entry';
	const DESCRIPTION_RECORD = 'Login Group Entry';
	const MODEL_TABLE = 'sys_login_group';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return the Code records from Database
	 * @param  string $table Table Code
	 * @return ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the Code records from Database filtered by ProductLne ID
	 * @param  string $productlne ProductLneID
	 * @return ObjectCollection
	 */
	public function get_code($code) {
		$q = $this->get_query();
		return $q->findOneById($code);
	}

	/**
	 * Returns if Codes Exists
	 * @param  string $productlne ProductLneID
	 * @return bool
	 */
	public function code_exists($code) {
		$q = $this->get_query();
		return boolval($q->filterById($code)->count());
	}

	/**
	 * Returns SysLoginGroupQuery
	 * @return SysLoginGroupQuery
	 */
	public function get_query() {
		return SysLoginGroupQuery::create();
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$table = $input->$rm->text('table');
		$code  = $input->$rm->text('code');

		$q = $this->get_query();
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => SysLoginGroup::MAX_LENGTH_CODE));
			$record = new SysLoginGroup();
			$record->setCode($code);
		}

		if ($input->$rm->text('action') == 'remove-code') {
			$record->delete();
		} else {
			$description = $input->$rm->text('description');
			$record->setDescription($description);
			$record->setDate(date('Ymd'));
			$record->setTime(date('His'));
			$record->setDummy('P');
		}

		$this->wire('session')->response_codetable = $this->save_and_process_response($table, $code, $record);
	}

	/**
	 * Returns MsaResponse based on the outcome of the database save
	 * @param  SysLoginGroup $record Record to record response of database save
	 * @return MsaResponse
	 */
	protected function save_and_process_response($table, $code, SysLoginGroup $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new MsaResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(MsaResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(MsaResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(MsaResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}
		return $response;
	}

	/**
	 * Return the Max Length of characters for the code
	 * NOTE: Used for the JS
	 * @return int
	 */
	public function get_max_length_code() {
		return SysLoginGroup::MAX_LENGTH_CODE;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus MSA Lgrp CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for MSA Lgrp',
			'singular' => true,
			'autoload' => true,
		);
	}
}
