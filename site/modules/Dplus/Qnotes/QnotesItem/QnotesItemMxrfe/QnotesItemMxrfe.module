<?php namespace ProcessWire;

use QuoteNotesQuery, QuoteNotes;
use ConfigArQuery, ConfigAr;

include_once(__DIR__.'/../../QnotesResponse.php');

/**
 * QnotesItemMxrfe
 *
 * Container class to call classes to handle MXRFE Notes
 */
class QnotesItemMxrfe extends WireData implements Module {

	const TYPES = array(
		'mnfr',
		'mmsc',
		'intv'
	);

	/**
	 * Takes Input, validates it's a valid action, and a valid item
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->text('action') == 'update-notes' || $values->text('action') == 'delete-notes') {
			$itemID = $input->$rm->text('itemID');
			$itm = $this->wire('modules')->get('Itm');

			if ($itm->item_exists($itemID)) {
				if (in_array($values->text('type'), self::TYPES)) {
					$type = $values->text('type');
					$this->$type->process_input($input);
				} else {
					$response = new QnotesResponse();
					$response->set_message($values->text('type'). " is not a valid note type");
					$response->set_error(true);
					$response->set_key($itemID);
					$this->wire('session')->response_qnote = $response;
				}
			} else {
				$response = new QnotesResponse();
				$response->set_message("$itemID does not exist, notes can't be created for it");
				$response->set_error(true);
				$response->set_key($itemID);
				$this->wire('session')->response_qnote = $response;
			}

			if ($this->wire('session')->response_qnote->has_success()) {
				$this->wire('session')->qnotes_itm = $values->text('type');
			}
		}
	}

/* =============================================================
	ProcessWire module Functions
============================================================= */
	public function init() {
		$modules = $this->wire('modules');
		$this->mnfr   = $modules->get('QnotesMnfr');
		$this->mmsc   = $modules->get('QnotesMmsc');
		$this->intv   = $modules->get('QnotesItemVxmInternal');
	}

	public function update() {
		$modules = $this->wire('modules');
		$modules->refresh();

		$info = self::getModuleInfo();

		foreach ($info['installs'] as $module_name) {
			$modules->install($module_name);
		}
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus Qnotes MXRFE',
			'version' => 101,
			'summary' => 'Dplus Qnotes MXRFE Factory',
			'singular' => true,
			'autoload' => true,
			'requires' => array('Qnotes'),
			'installs' => array(
				'QnotesMnfr',
				'QnotesMmsc',
			)
		);
	}
}
