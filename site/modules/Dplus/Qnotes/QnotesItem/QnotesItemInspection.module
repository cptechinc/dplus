<?php namespace ProcessWire;

use ItemInspectNoteQuery, ItemInspectNote;
use ConfigInQuery, ConfigIn;

include_once(__DIR__.'/../QnotesResponse.php');

/**
 * QnotesItemInspection
 *
 * Class for Writing and Reading Qnotes for Item Inspection
 */
class QnotesItemInspection extends WireData implements Module {
	const MODEL              = 'ItemInspectNote';
	const MODEL_KEY          = 'itemid sequence';
	const DESCRIPTION        = 'Item Inspection Notes';
	const DESCRIPTION_RECORD = 'Item Inspection Notes';
	const DESCRIPTION_RESPONSE = 'Item ';


	/**
	 * Return the Max Number of columns for Note Type
	 * @return int
	 */
	public function get_column_count() {
		return 63;
	}

	/**
	 * Returns Quote Notes Query
	 * @return ItemInspectNoteQuery
	 */
	public function get_query() {
		return ItemInspectNoteQuery::create();
	}

	/**
	 * Returns if Notes Exist
	 * @param  string $itemID  Item ID
	 * @return bool
	 */
	public function notes_exist($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	/**
	 * Returns Line 1 of Every Note
	 * @param  string $itemID  Item ID
	 * @return ItemInspectNote[]|ObjectCollection
	 */
	public function get_notes_summarized($itemID, $orderby = '') {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		$q->filterBySequence(1);
		if (!$orderby) {
			$q->orderByNotedate('DESC');
			$q->orderByNotetime('DESC');
		}
		return $q->find();
	}

	/**
	 * Return Notes for Form
	 * @param  string $itemID  Item ID
	 * @param  string $string  Note Author
	 * @param  string $date    Note Date (raw)
	 * @param  string $time    Note Time (raw)
	 * @return array
	 */
	public function get_notes_form_array($itemID, $userID, $date, $time) {
		$q = $this->get_query();
		$q->select(ItemInspectNote::get_aliasproperty('note'));
		$q->filterByItemid($itemID);
		$q->filterByNotedate($date);
		$q->filterByNotetime($time);
		return $q->find()->toArray();
	}

	/**
	 * Delete Notes for Item
	 * @param  string $itemID   Item ID
	 * @param  string $userID   note Author
	 * @param  string $notedate Note Date
	 * @param  string $notetime Note Time (Raw format HHMMSSHS)
	 * @return array
	 */
	public function delete_notes($itemID, $userID, $notedate, $notetime) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		$q->filterByUser($userID);
		$q->filterByNotedate(date(ItemInspectNote::FORMAT_NOTEDATE, strtotime($notedate)));
		$q->filterByNotetime($notetime);

		if ($q->count()) {
			return $q->delete();
		}
		return true;
	}

	/**
	 * Takes Input, Processes it, updates Quote Notes in the Database
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());

		switch ($input->$rm->text('action')) {
			case 'update-notes':
				$this->update_notes_input($input);
				break;
			case 'delete-notes':
				$this->delete_notes_input($input);
				break;
		}
	}

	/**
	 * Takes Input, Processes it, deletes Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function delete_notes_input($input) {
		$rm = strtolower($input->requestMethod());
		$itemID  = $input->$rm->text('itemID');
		$notedate = $input->$rm->text('notedate');
		$notetime = $input->$rm->text('notetime');
		$userID   = $input->$rm->text('user');

		$q = $this->get_query();
		$q->filterByItemid($itemID);
		$q->filterByNotedate(date(ItemInspectNote::FORMAT_NOTEDATE, strtotime($notedate)));

		if ($input->$rm->rawnotetime) {
			$q->filterByNotetime($input->$rm->text('rawnotetime'));
		} else {
			$q->filterByNotetime(date(ItemInspectNote::FORMAT_NOTETIME, strtotime($notedate.$notetime)));
		}

		if ($q->count()) {
			$note = $q->findOne();
		} else {
			$note = ItemInspectNote::new();
			$note->setItemid($itemID);
			$note->setNotedate(date(ItemInspectNote::FORMAT_NOTEDATE, strtotime($notedate)));
			$note->set_time($notetime, $notedate);
			$note->setUser($userID);
			$note->generateKey2();
		}
		$success = $this->delete_notes($itemID, $userID, $notedate, $note->notetime);

		$this->wire('session')->response_qnote = $this->process_response_delete($note, $itemID, $success);
	}

	/**
	 * Takes Input, Processes it, updates Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function update_notes_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID  = $values->text('itemID');
		$notedate = $values->text('notedate');
		$notetime = $values->text('notetime');
		$user     = $values->text('user');
		$note = $values->textarea('note');
		$note_lines = $this->wire('modules')->get('Qnotes')->note_lines($note, $this->get_column_count());
		$lines_saved = array();

		if (empty($notedate)) {
			$notedate = date(ItemInspectNote::FORMAT_NOTEDATE);
		}

		if (empty($notetime)) {
			$notetime = date(ItemInspectNote::FORMAT_NOTETIME);
		}

		if ($input->$rm->rawnotetime) {
			$this->delete_notes($itemID, $user, $notedate, $input->$rm->text('rawnotetime'));
		} else {
			$rawnotetime = ItemInspectNote::generate_notetime($notetime, $notedate);
			$this->delete_notes($itemID, $user, $notedate, $notetime);
		}

		foreach ($note_lines as $key => $line) {
			$sequence = $key + 1;
			$record = ItemInspectNote::new();
			$record->setItemid($itemID);
			$record->setNotedate(date(ItemInspectNote::FORMAT_NOTEDATE, strtotime($notedate)));
			$record->set_time($notetime, $notedate);
			$record->generateKey2(); // PK
			$record->setUser($user);
			$record->setSequence($sequence); // PK
			$record->setNote($line);
			$record->setDate(date('Ymd'));
			$record->setTime(date('His').'00');
			$record->setDummy('P');
			$lines_saved[$sequence] = $record->save();
		}
		$this->wire('session')->response_qnote = $this->process_responses($record, $itemID, $lines_saved);
	}

	/**
	 * Return Code Table Response based on the number of lines that were written to the database
	 * @param  string $itemID       Item ID
	 * @param  array  $lines_saved  array of line numbers and if they got saved e.g. (1 => true, 2 => false)
	 * @return CodeTableResponse
	 */
	protected function process_responses(ItemInspectNote $note, $itemID, array $lines_saved) {
		$message = self::DESCRIPTION_RESPONSE . " ($itemID) Inspection Note Lines";

		$response = new QnotesResponse();
		$response->set_key("$itemID-{$note->key2}");

		if (in_array(false, $lines_saved)) {
			$lines_error =
			array_filter($lines_saved, function($value, $key) {
				return  $value == false;
			}, ARRAY_FILTER_USE_BOTH);
			$message .= implode(", ", array_keys($lines_error));
			$message .= " were not able to be saved";

			if (sizeof($lines_error)) {
				$response->set_error(true);
			}
		} else {
			$response->set_success(true);
			$message .= " were able to be saved";
		}

		$response->set_action(QnotesResponse::CRUD_UPDATE);
		$response->set_message($message);

		// IF there are lines saved
		if (sizeof($lines_saved)) {
			$this->update_dplus_cobol($note);
		}
		return $response;
	}

	/**
	 * Return QnoteResponse based if Notes were able to be Deleted
	 * @param  ItemInspectNote  $note         Attributes are needed to generate key
	 * @param  string            $itemID       Item ID
	 * @param  array             $success      Were Notes able to be deleted?
	 * @return QnoteResponse
	 */
	public function process_response_delete(ItemInspectNote $note, $itemID, bool $success) {
		$message = self::DESCRIPTION_RESPONSE . " ($itemID) Notes ";

		$response = new QnotesResponse();
		$response->set_key("$itemID-{$note->key2}");

		if ($success) {
			$response->set_success(true);
			$message .= " were able to be deleted";
		} else {
			$response->set_success(true);
			$message .= " were not able to be deleted";
		}

		$response->set_action(QnotesResponse::CRUD_DELETE);
		$response->set_message($message);

		// IF there are lines saved
		if ($success) {
			$this->update_dplus_cobol($note);
		}
		return $response;
	}

	/**
	 * Return Data needed for Dplus to UPDATE the Customer Type Notes
	 * @param  ItemInspectNote $note
	 * @return array
	 */
	public function write_dplus_data(ItemInspectNote $note) {
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		return array(
			"DBNAME=$dplusdb",
			'UPDATEQCNOTE',
			"TYPE=$note->type",
			"KEY2=$note->key2",
			"DATE=$note->notedate",
			"TIME=$note->notetime",
			"USER=$note->user",
		);
	}

	/**
	 * Sends Update Request for Qnote Type
	 * @param  ItemInspectNote $note
	 * @return void
	 */
	public function update_dplus_cobol(ItemInspectNote $note) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = $this->write_dplus_data($note);
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus Qnotes Item Inspection',
			'version' => 101,
			'summary' => 'Dplus Qnotes Item Inspection CRUD methods',
			'singular' => true,
			'autoload' => true,
			'requires' => array('Qnotes')
		);
	}
}
