<?php namespace ProcessWire;

use PurchaseOrderNoteInternalQuery, PurchaseOrderNoteInternal;

use Purl\Url;

use ConfigApQuery;


include_once(__DIR__.'/../QnotesResponse.php');

/**
 * QnotesIntl
 *
 * Class for Writing and Reading Qnotes for Purchase Orders (iNTL)
 */
class QnotesPoIntl extends WireData implements Module {
	const MODEL              = 'PurchaseOrderNoteInternal';
	const MODEL_KEY          = '';
	const DESCRIPTION        = 'Purchase Order Internal Note';
	const DESCRIPTION_RECORD = 'Purchase Order Internal Note';
	const DESCRIPTION_RESPONSE = 'Purchase Order Internal ';
	const MODEL_TABLE = 'notes_po_internal';
	const TYPE = 'INTL';

	public function type() {
		return self::TYPE;
	}

	/**
	 * Return the Max Number of columns for Note Type
	 * @return int
	 */
	public function get_column_count() {
		return 63;
	}

	/**
	 * Returns Purchase Order Notes Query
	 * @return PurchaseOrderNoteInternalQuery
	 */
	public function get_query() {
		return PurchaseOrderNoteInternalQuery::create();
	}

	/**
	 * Set User & User ID
	 * @param User $user
	 */
	public function set_user(User $user) {
		$this->user   = $user;
		$this->userID = $user->loginid;
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Returns if Notes Exist
	 * @param  string $ponbr   Order Number
	 * @param  int    $linenbr Line Number
	 * @return bool
	 */
	public function notes_exist($ponbr, $linenbr) {
		$q = $this->get_query();
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		return boolval($q->count());
	}

	/**
	 * Return if User Note Exists
	 * @param  string $ponbr    Order Number
	 * @param  int    $linenbr  Line Number
	 * @param  string $userID   Note Author
	 * @param  string $date     Note Date (raw)
	 * @param  string $time     Note Time (raw)
	 * @return array
	 */
	public function user_notes_exist($ponbr, $linenbr, $userID, $date, $time) {
		$q = $this->get_query();
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		$q->filterByUserid($userID);
		$q->filterByNotedate(date(PurchaseOrderNoteInternal::FORMAT_NOTEDATE, strtotime($date)));
		$q->filterByNotetime(date(PurchaseOrderNoteInternal::FORMAT_NOTETIME, strtotime($date.$time)));
		return boolval($q->count());
	}

	/**
	 * Return Note Line
	 * @param  string $ponbr     Order Number
	 * @param  int    $linenbr   Line Number
	 * @param  string $userID    Note Author
	 * @param  string $date      Note Date (raw)
	 * @param  string $time      Note Time (raw)
	 * @param  int    $sequence  Note Line number
	 * @return PurchaseOrderNoteInternal
	 */
	public function get_note($ponbr, $linenbr, $userID, $date, $time, $sequence = 1) {
		$q = $this->get_query();
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		$q->filterBySequence($sequence);
		return $q->findOne();
	}

	/**
	 * Returns Line 1 of Every Note
	 * @param  string $ponbr    Order Number
	 * @param  int    $linenbr Line Number
	 * @return PurchaseOrderNoteInternal[]|ObjectCollection
	 */
	public function get_notes_summarized($ponbr, $linenbr, $orderby = '') {
		$q = $this->get_query();
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		$q->filterBySequence(1);
		if (!$orderby) {
			$q->orderByNotedate('DESC');
			$q->orderByNotetime('DESC');
		}
		return $q->find();
	}

	/**
	 * Return User Notes
	 * @param  string $ponbr    Order Number
	 * @param  int    $linenbr  Line Number
	 * @param  string $userID   Note Author
	 * @param  string $date     Note Date (raw)
	 * @param  string $time     Note Time (raw)
	 * @return array
	 */
	public function get_notes_form_array($ponbr, $linenbr, $userID, $date, $time) {
		$q = $this->get_query();
		$q->select(PurchaseOrderNoteInternal::get_aliasproperty('note'));
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		$q->filterByUserid($userID);
		$q->filterByNotedate($date);
		$q->filterByNotetime($time);
		return $q->find()->toArray();
	}

/* =============================================================
	CRUD Delete, Create
============================================================= */
	/**
	 * Delete Notes for Form
	 * @param  string $ponbr    Order Number
	 * @param  int    $linenbr  Line Number
	 * @param  string $userID   Note Author
	 * @param  string $date     Note Date (raw)
	 * @param  string $time     Note Time (raw)
	 * @return array
	 */
	public function delete_notes($ponbr, $linenbr, $userID, $date, $time) {
		$q = $this->get_query();
		$q->filterByPonbr($ponbr);
		$q->filterByLine($linenbr);
		$q->filterByUserid($userID);
		$q->filterByNotedate($date);
		$q->filterByNotetime($time);

		if ($q->count()) {
			return $q->delete();
		}
		return true;
	}

	/**
	 * Creates Purchase Order Note Record
	 * @param  string $ponbr    Purchase Order Number
	 * @param  int    $linenbr  Line Number (On PO)
	 * @param  string $userID   Note Author
	 * @param  string $date     Note Date (raw)
	 * @param  string $time     Note Time (raw)
	 * @param  int    $sequence Sequence (Note Line Number)
	 * @param  string $note     Note Line
	 * @return bool
	 */
	public function create_note($ponbr, int $linenbr, $userID, $date, $time, int $sequence = 1, $note = '') {
		$record = PurchaseOrderNoteInternal::new();
		$record->setPonbr($ponbr);
		$record->setLine($linenbr);
		$record->setUserid($userID);
		$record->setNotedate($date);
		$record->setNotetime($time);
		$record->generateKey2(); // PK
		$record->setSequence($sequence); // PK
		$record->setForm('');
		$record->setNote($note);
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		$record->setDummy('P');
		return $record->save();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, Processes it, updates Purchase Order Notes in the Database
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$validate_ponbr = $this->wire('modules')->get('ValidatePurchaseOrderNbr');
		$ponbr = $input->$rm->text('ponbr');

		if ($validate_ponbr->validate($ponbr)) {
			switch ($input->$rm->text('action')) {
				case 'update-notes':
					$this->update_notes_input($input);
					break;
				case 'delete-notes':
					$this->delete_notes_input($input);
					break;
				default:
					$this->wire('session')->response_qnote = QnotesResponse::response_error($ponbr, 'Unspecified Qnote Action');
					break;
			}
		} else {
			$this->wire('session')->response_qnote = QnotesResponse::response_error($ponbr, 'Invalid PO Number');
		}
	}

	/**
	 * Takes Input, Processes it, deletes Purchase Order Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function delete_notes_input($input) {
		$rm = strtolower($input->requestMethod());
		$values  = $input->$rm;
		$ponbr   = $values->text('ponbr');
		$linenbr = $values->int('linenbr');
		$userID  = $values->text('userID');
		$date    = date(PurchaseOrderNoteInternal::FORMAT_NOTEDATE, strtotime($values->text('date')));
		$time    = date(PurchaseOrderNoteInternal::FORMAT_NOTETIME, strtotime($date.$values->text('time')));
		$time    = str_pad($time, 8, '0', STR_PAD_RIGHT);

		if ($this->user_notes_exist($ponbr, $linenbr, $userID, $date, $time)) {
			$note = $this->get_note($ponbr, $linenbr, $userID, $date, $time);
		} else {
			$note = new PurchaseOrderNoteInternal();
			$note->setPonbr($ponbr);
			$note->setLine($linenbr);
			$note->setUserid($userID);
			$note->setNotedate($date);
			$note->setNotetime($time);
		}
		$success = $this->delete_notes($ponbr, $linenbr, $userID, $date, $time);

		$this->wire('session')->response_qnote = $this->process_response_delete($note, $ponbr, $success);
	}

	/**
	 * Takes Input, Processes it, updates Purchase Order Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function update_notes_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$ponbr   = $values->text('ponbr');
		$linenbr = $values->int('linenbr');
		$userID  = $values->text('userID');
		$date    = date(PurchaseOrderNoteInternal::FORMAT_NOTEDATE, strtotime($values->text('notedate')));
		$time    = date(PurchaseOrderNoteInternal::FORMAT_NOTETIME, strtotime($date.$values->text('notetime')));
		$time    = str_pad($time, 8, '0', STR_PAD_RIGHT);

		$note_lines = $this->wire('modules')->get('Qnotes')->note_lines($values->textarea('note'), $this->get_column_count());

		$lines_saved = array();

		$this->delete_notes($ponbr, $linenbr, $userID, $date, $time);

		foreach ($note_lines as $key => $line) {
			$sequence = $key + 1;
			$lines_saved[$sequence] = $this->create_note($ponbr, $linenbr, $userID, $date, $time, $sequence, $line);
		}
		exit;

		$this->wire('session')->response_qnote = $this->process_responses($this->get_note($ponbr, $linenbr, $userID, $date, $time), $ponbr, $lines_saved);
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Return Code Table Response based on the number of lines that were written to the database
	 * @param  string $ponbr         Purchase Order Number
	 * @param  array  $lines_saved   array of line numbers and if they got saved e.g. (1 => true, 2 => false)
	 * @return CodeTableResponse
	 */
	protected function process_responses(PurchaseOrderNoteInternal $note, $ponbr, array $lines_saved) {
		$message = self::DESCRIPTION_RESPONSE . " ($ponbr) Note Lines";

		$response = new QnotesResponse();
		$response->set_key("$ponbr-{$note->line}");

		if (in_array(false, $lines_saved)) {
			$lines_error =
			array_filter($lines_saved, function($value, $key) {
				return  $value == false;
			}, ARRAY_FILTER_USE_BOTH);
			$message .= implode(", ", array_keys($lines_error));
			$message .= " were not able to be saved";

			if (sizeof($lines_error)) {
				$response->set_error(true);
			}
		} else {
			$response->set_success(true);
			$message .= " were able to be saved";
		}

		$response->set_action(QnotesResponse::CRUD_UPDATE);
		$response->set_message($message);

		// IF there are lines saved
		if (sizeof($lines_saved)) {
			$this->wire('modules')->get('Qponotes')->update_dplus_cobol($note->type, $note->key2, $note->form);
		}
		return $response;
	}

	/**
	 * Return QnoteResponse based if Notes were able to be Deleted
	 * @param  PurchaseOrderNoteInternal   $note         Attributes are needed to generate key
	 * @param  string                      $ponbr        Purchase Order Number
	 * @param  array                       $success      Were Notes able to be deleted?
	 * @return QnoteResponse
	 */
	public function process_response_delete(PurchaseOrderNoteInternal $note, $ponbr, bool $success) {
		$message = self::DESCRIPTION_RESPONSE . " ($ponbr) Notes ";

		$response = new QnotesResponse();
		$response->set_key("$ponbr-{$note->line}-{$note->form}");

		if ($success) {
			$response->set_success(true);
			$message .= " were able to be deleted";
		} else {
			$response->set_success(true);
			$message .= " were not able to be deleted";
		}

		$response->set_action(QnotesResponse::CRUD_DELETE);
		$response->set_message($message);

		// IF there are lines saved
		if ($success) {
			$this->wire('modules')->get('Qponotes')->update_dplus_cobol($note->type, $note->key2, $note->form);
		}
		return $response;
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return if Notes are editable
	 * NOTE: Header notes are always editable
	 * Item Notes must be checked if they exist and are editable,
	 * or if the po config allows it
	 * @param  string $ponbr   Purchase Order Number
	 * @param  int    $linenbr Line Number [0 = header]
	 * @return bool
	 */
	public function allow_edit($ponbr, $linenbr = 0) {
		if ($linenbr = 0) {
			return true;
		}

		if ($this->notes_exist($ponbr, $linenbr)) {
			$note = $this->get_note($ponbr, $linenbr);
			return $note->editable();
		} else {
			$configPO = $this->wire('modules')->get('ConfigurePo')->config();
			return $configPO->allow_po_item_notes();
		}
	}


/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Qnotes Purchase Order Internal',
			'version' => 101,
			'summary' => 'Qnotes Purchase Order Internal methods',
			'singular' => true,
			'autoload' => true,
			'requires' => array('Qnotes')
		);
	}

	public function init() {
		$this->user   = $this->wire('user');
		$this->userID = $this->wire('user')->loginid;
	}
}
