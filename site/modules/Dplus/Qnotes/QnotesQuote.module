<?php namespace ProcessWire;

use QuoteNotesQuery, QuoteNotes;
use ConfigArQuery, ConfigAr;

include_once(__DIR__.'/QnotesResponse.php');

/**
 * QnotesSalesOrder
 *
 * Class for Writing and Reading Qnotes for Quotes (QUOT)
 */
class QnotesQuote extends WireData implements Module {
	const MODEL              = 'QuoteNotes';
	const MODEL_KEY          = 'qthdid, qtdtline';
	const DESCRIPTION        = 'Quote Note';
	const DESCRIPTION_RECORD = 'Quote Note';
	const DESCRIPTION_RESPONSE = 'Quote ';
	const MODEL_TABLE = 'notes_qt_head_det';


	public function allow_add(User $user, $qnbr) {
		return true;
	}

	/**
	 * Return the Max Number of columns for Note Type
	 * @return int
	 */
	public function get_column_count() {
		$configAR = ConfigArQuery::create()->findOne();
		return $configAR->columns_notes_invoice;
	}

	/**
	 * Returns Quote Notes Query
	 * @return QuoteNotesQuery
	 */
	public function get_query() {
		return QuoteNotesQuery::create();
	}

	/**
	 * Returns if Notes Exist
	 * @param  string $qnbr    Quote Number
	 * @param  int    $linenbr Line Number
	 * @return bool
	 */
	public function notes_exist($qnbr, $linenbr) {
		$q = $this->get_query();
		$q->filterByQuoteid($qnbr);
		$q->filterByLine($linenbr);
		return boolval($q->count());
	}

	/**
	 * Returns Line 1 of Every Note
	 * @param  string $qnbr    Quote Number
	 * @param  int    $linenbr Line Number
	 * @return QuoteNotes[]|ObjectCollection
	 */
	public function get_notes_summarized($qnbr, $linenbr) {
		$q = $this->get_query();
		$q->filterByQuoteid($qnbr);
		$q->filterByLine($linenbr);
		$q->filterBySequence(1);
		return $q->find();
	}

	/**
	 * Return Notes for Form
	 * @param  string $qnbr    Quote Number
	 * @param  int    $linenbr Line Number
	 * @param  string $form    Form to Match to e.g YYYN
	 * @return array
	 */
	public function get_notes_form_array($qnbr, $linenbr, $form) {
		$q = $this->get_query();
		$q->select(QuoteNotes::get_aliasproperty('note'));
		$q->filterByQuoteid($qnbr);
		$q->filterByLine($linenbr);
		$q->filterByForm($form);
		return $q->find()->toArray();
	}

	/**
	 * Delete Notes for Form
	 * @param  string $qnbr    Quote Number
	 * @param  int    $linenbr Line Number
	 * @param  string $form    Form to Match to e.g YYYN
	 * @return array
	 */
	public function delete_notes($qnbr, $linenbr, $form) {
		$q = $this->get_query();
		$q->filterByQuoteid($qnbr);
		$q->filterByLine($linenbr);
		$q->filterByForm($form);

		if ($q->count()) {
			return $q->delete();
		}
		return true;
	}

	/**
	 * Takes Input, Processes it, updates Quote Notes in the Database
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$qnbr = $input->$rm->text('qnbr');

		switch ($input->$rm->text('action')) {
			case 'update-notes':
				$this->update_notes_input($input);
				break;
			case 'delete-notes':
				$this->delete_notes_input($input);
				break;
		}
	}

	/**
	 * Takes Input, Processes it, deletes Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function delete_notes_input($input) {
		$rm = strtolower($input->requestMethod());
		$qnbr  = $input->$rm->text('qnbr');
		$linenbr = $input->$rm->text('linenbr');
		$form    = $input->$rm->text('form');
		$q = $this->get_query();
		$q->filterByQuoteid($qnbr);
		$q->filterByLine($linenbr);
		$q->filterByForm($form);

		if ($q->count()) {
			$note = $q->findOne();
		} else {
			$note = new QuoteNotes();
			$note->setQuoteid($qnbr);
			$note->setLine($linenbr);
			$note->setForm($form);
		}
		$success = $this->delete_notes($qnbr, $linenbr, $form);

		$this->wire('session')->response_qnote = $this->process_response_delete($note, $qnbr, $success);
	}

	/**
	 * Takes Input, Processes it, updates Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function update_notes_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$qnbr  = $input->$rm->text('qnbr');
		$linenbr = $input->$rm->text('linenbr');
		$form    = $input->$rm->text('form');

		$note = $values->textarea('note');
		$note_lines = $this->wire('modules')->get('Qnotes')->note_lines($note, $this->get_column_count());
		$lines_saved = array();

		if (empty($form)) {
			$form = '';
			$form .= $input->$rm->text('check_quote') == QuoteNotes::FORM_TRUE ? 'Y' : 'N';
			$form .= $input->$rm->text('check_pick') == QuoteNotes::FORM_TRUE ? 'Y' : 'N';
			$form .= $input->$rm->text('check_pack') == QuoteNotes::FORM_TRUE ? 'Y' : 'N';
			$form .= $input->$rm->text('check_invoice') == QuoteNotes::FORM_TRUE ? 'Y' : 'N';
			$form .= $input->$rm->text('check_acknowledgement') == QuoteNotes::FORM_TRUE ? 'Y' : 'N';
		}

		$this->delete_notes($qnbr, $linenbr, $form);

		foreach ($note_lines as $key => $line) {
			$sequence = $key + 1;
			$record = new QuoteNotes();
			$record->setType(QuoteNotes::TYPE); // PK
			$record->setDescription(QuoteNotes::DESCRIPTION);
			$record->setQuoteid($qnbr);
			$record->setLine($linenbr);
			$record->generateKey2(); // PK
			$record->setSequence($sequence); // PK
			$record->setForm($form);
			$record->setNote($line);

			$record->setQuote($input->$rm->text('check_quote')     == QuoteNotes::FORM_TRUE ? 'Y' : 'N');
			$record->setPickticket($input->$rm->text('check_pick') == QuoteNotes::FORM_TRUE ? 'Y' : 'N');
			$record->setPackticket($input->$rm->text('check_pack') == QuoteNotes::FORM_TRUE ? 'Y' : 'N');
			$record->setInvoice($input->$rm->text('check_invoice') == QuoteNotes::FORM_TRUE ? 'Y' : 'N');
			$record->setAcknowledgement($input->$rm->text('check_acknowledgement') == QuoteNotes::FORM_TRUE ? 'Y' : 'N');

			$record->setDate(date('Ymd'));
			$record->setTime(date('His'));
			$record->setDummy('P');
			$lines_saved[$sequence] = $record->save();
		}
		$this->wire('session')->response_qnote = $this->process_responses($record, $qnbr, $lines_saved);
	}

	/**
	 * Return Code Table Response based on the number of lines that were written to the database
	 * @param  string $qnbr         Quote Number
	 * @param  array  $lines_saved  array of line numbers and if they got saved e.g. (1 => true, 2 => false)
	 * @return CodeTableResponse
	 */
	protected function process_responses(QuoteNotes $note, $qnbr, array $lines_saved) {
		$message = self::DESCRIPTION_RESPONSE . " ($qnbr) Note Lines";

		$response = new QnotesResponse();
		$response->set_key("$qnbr-{$note->line}-{$note->form}");

		if (in_array(false, $lines_saved)) {
			$lines_error =
			array_filter($lines_saved, function($value, $key) {
				return  $value == false;
			}, ARRAY_FILTER_USE_BOTH);
			$message .= implode(", ", array_keys($lines_error));
			$message .= " were not able to be saved";

			if (sizeof($lines_error)) {
				$response->set_error(true);
			}
		} else {
			$response->set_success(true);
			$message .= " were able to be saved";
		}

		$response->set_action(QnotesResponse::CRUD_UPDATE);
		$response->set_message($message);

		// IF there are lines saved
		if (sizeof($lines_saved)) {
			$this->wire('modules')->get('Qnotes')->update_dplus_cobol($note->type, $note->key2, $note->form);
		}
		return $response;
	}

	/**
	 * Return QnoteResponse based if Notes were able to be Deleted
	 * @param  QuoteNotes   $note         Attributes are needed to generate key
	 * @param  string            $qnbr         Quote Number
	 * @param  array             $success      Were Notes able to be deleted?
	 * @return QnoteResponse
	 */
	public function process_response_delete(QuoteNotes $note, $qnbr, bool $success) {
		$message = self::DESCRIPTION_RESPONSE . " ($qnbr) Notes ";

		$response = new QnotesResponse();
		$response->set_key("$qnbr-{$note->line}-{$note->form}");

		if ($success) {
			$response->set_success(true);
			$message .= " were able to be deleted";
		} else {
			$response->set_success(true);
			$message .= " were not able to be deleted";
		}

		$response->set_action(QnotesResponse::CRUD_DELETE);
		$response->set_message($message);

		// IF there are lines saved
		if ($success) {
			$this->wire('modules')->get('Qnotes')->update_dplus_cobol($note->type, $note->key2, $note->form);
		}
		return $response;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus Qnotes Quotes',
			'version' => 101,
			'summary' => 'Dplus Qnotes Quotes CRUD methods',
			'singular' => true,
			'autoload' => true,
			'requires' => array('Qnotes')
		);
	}
}
