<?php namespace ProcessWire;

use NotePredefinedQuery, NotePredefined;

include_once(__DIR__.'/QnotesResponse.php');

/**
 * QnotesPredefined
 *
 * Class for Writing and Reading Predefined Qnotes
 */
class QnotesPredefined extends WireData implements Module {
	const MODEL              = 'NotePredefined';
	const MODEL_KEY          = 'id';
	const DESCRIPTION        = 'Pre-Defined Notes';
	const DESCRIPTION_RECORD = 'Pre-Defined Notes';
	const DESCRIPTION_RESPONSE = 'Pre-Defined Note ';

	/**
	 * Return the Max Number of columns for Note Type
	 * @return int
	 */
	public function get_column_count() {
		return 50;
	}

	public function get_max_length_code() {
		return NotePredefined::MAX_LENGTH_CODE;
	}

	/**
	 * Returns Quote Notes Query
	 * @return NotePredefinedQuery
	 */
	public function get_query() {
		return NotePredefinedQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Returns if Notes Exist
	 * @param  string $id Note ID
	 * @return bool
	 */
	public function notes_exist($id) {
		$q = $this->get_query();
		$q->filterByItemid($id);
		return boolval($q->count());
	}

	/**
	 * Returns Line 1 of Every Note
	 * @return NotePredefined[]|ObjectCollection
	 */
	public function get_notes_summarized() {
		$q = $this->get_query();
		$q->filterBySequence(1);
		return $q->find();
	}

	/**
	 * Return Note IDs for every note
	 * @return array
	 */
	public function get_notes_ids() {
		$q = $this->get_query();
		$q->select(NotePredefined::get_aliasproperty('id'));
		$q->filterBySequence(1);
		return $q->find()->toArray();
	}

	/**
	 * Return Notes for Form
	 * @param  string $id  Predefined Note ID
	 * @return array
	 */
	public function get_notes_form_array($id) {
		$q = $this->get_query();
		$q->select(NotePredefined::get_aliasproperty('note'));
		$q->filterById($id);
		return $q->find()->toArray();
	}

/* =============================================================
	CRUD Delete
============================================================= */
	/**
	 * Delete Notes for ID
	 * @param  string $id   Note ID
	 * @return array
	 */
	public function delete_notes($id) {
		$q = $this->get_query();
		$q->filterById($id);

		if ($q->count()) {
			return $q->delete();
		}
		return true;
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, processses the action, calls the function for that actino
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'update-notes':
				$this->update_notes_input($input);
				break;
			case 'delete-notes':
				$this->delete_notes_input($input);
				break;
		}
	}

	/**
	 * Takes Input, Processes it, deletes Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function delete_notes_input($input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$id  = $values->text('id');

		$q = $this->get_query();
		$q->filterById($id);

		if ($q->count()) {
			$note = $q->findOne();
		} else {
			$note = NotePredefined::new();
			$note->setId($id);
			$note->generateKey2();
		}
		$success = $this->delete_notes($id);

		$this->wire('session')->response_qnote = $this->process_response_delete($note, $success);
	}

	/**
	 * Takes Input, Processes it, updates Quote Notes
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function update_notes_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$id  = $values->text('id');
		$note_lines = $this->wire('modules')->get('Qnotes')->note_lines($values->textarea('note'), $this->get_column_count());
		$lines_saved = array();
		$this->delete_notes($id);

		foreach ($note_lines as $key => $line) {
			$sequence = $key + 1;
			$record = NotePredefined::new();
			$record->setId($id);
			$record->generateKey2(); // PK
			$record->setSequence($sequence); // PK
			$record->setNote($line);
			$record->setDate(date('Ymd'));
			$record->setTime(date('His').'00');
			$record->setDummy('P');

			$lines_saved[$sequence] = $record->save();
		}
		$this->wire('session')->response_qnote = $this->process_responses($record, $lines_saved);
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Return Code Table Response based on the number of lines that were written to the database
	 * @param  NotePredefined $note
	 * @param  array          $lines_saved  array of line numbers and if they got saved e.g. (1 => true, 2 => false)
	 * @return CodeTableResponse
	 */
	protected function process_responses(NotePredefined $note, array $lines_saved) {
		$message = self::DESCRIPTION_RESPONSE . " ($note->id) Lines";

		$response = new QnotesResponse();
		$response->set_key($note->id);

		if (in_array(false, $lines_saved)) {
			$lines_error =
			array_filter($lines_saved, function($value, $key) {
				return  $value == false;
			}, ARRAY_FILTER_USE_BOTH);
			$message .= implode(", ", array_keys($lines_error));
			$message .= " were not able to be saved";

			if (sizeof($lines_error)) {
				$response->set_error(true);
			}
		} else {
			$response->set_success(true);
			$message .= " were able to be saved";
		}

		$response->set_action(QnotesResponse::CRUD_UPDATE);
		$response->set_message($message);

		// IF there are lines saved
		if (sizeof($lines_saved)) {
			$this->update_dplus_cobol($note);
		}
		return $response;
	}

	/**
	 * Return QnoteResponse based if Notes were able to be Deleted
	 * @param  NotePredefined  $note         Attributes are needed to generate key
	 * @param  array           $success      Were Notes able to be deleted?
	 * @return QnoteResponse
	 */
	public function process_response_delete(NotePredefined $note, bool $success) {
		$message = self::DESCRIPTION_RESPONSE . " ($note->id) ";

		$response = new QnotesResponse();
		$response->set_key($note->id);

		if ($success) {
			$response->set_success(true);
			$message .= " were able to be deleted";
		} else {
			$response->set_success(true);
			$message .= " were not able to be deleted";
		}

		$response->set_action(QnotesResponse::CRUD_DELETE);
		$response->set_message($message);

		// IF there are lines saved
		if ($success) {
			$this->update_dplus_cobol($note);
		}
		return $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Sends Request to Dplus to Update Qnote
	 * @param  NotePredefined $note
	 * @return void
	 */
	protected function update_dplus_cobol(NotePredefined $note) {
		$qnotes = $this->wire('modules')->get('Qnotes');
		$qnotes->update_dplus_cobol($note->type, $note->key2, $note->form);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus Qnotes Pre-Defined',
			'version' => 101,
			'summary' => 'Dplus Qnotes Pre-Defined CRUD methods',
			'singular' => true,
			'autoload' => true,
			'requires' => array('Qnotes')
		);
	}
}
