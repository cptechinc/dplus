<?php namespace ProcessWire;

	use Purl\Url;

	use VendorQuery, Vendor;
	use VendorShipfromQuery, VendorShipfrom;
	use PurchaseOrderQuery, PurchaseOrder;
	use ApInvoiceQuery, ApInvoice;

	class ViLoadVendorShipfrom extends WireData implements Module {
		/**
		 * Vendor ID
		 * @var string
		 */
		protected $vendorID;

		/**
		 * Vendor
		 * @var Vendor
		 */
		protected $vendor;

		/**
		 * Shipfrom ID
		 * @var string
		 */
		protected $shipfromID;

		/**
		 * Vendor Shipfrom
		 * @var VendorShipfrom
		 */
		protected $shipfrom;

		/**
		 * User
		 * @var User
		 */
		protected $user;


		public function init() {
			/**
			 * Returns VI Vendor Page URL
			 */
			$this->addHook('Page::has_vendorID', function($event) {
				$page = $event->object;
				$event->return = $page->has('vendorID');
			});

			/**
			 * Returns VI Vendor Page URL
			 */
			$this->addHook('Page::has_shipfromID', function($event) {
				$page = $event->object;
				$event->return = $page->has('shipfromID');
			});

			/**
			 * Returns VI Vendor Page URL
			 */
			$this->addHook('Page::vendorURL', function($event) {
				$event->return = $this->get_vendorURL();
			});

			/**
			 * Returns VI Vendor Shipto Page URL
			 */
			$this->addHook('Page::vendor_shipfromURL', function($event) {
				$event->return = $this->get_vendor_shipfromURL();
			});

			/**
			 * Returns VI Vendor Shipto Page URL
			 */
			$this->addHook('Page::vendor_or_shipfromURL', function($event) {
				$event->return = $this->get_vendor_or_shipfromURL();
			});

			/**
			 * Returns VI Vendor Page URL
			 */
			$this->addHookProperty('Page::vendor', function($event) {
				$event->return = $this->get_vendor();
			});

			/**
			 * Returns VI Vendor Shipto Page URL
			 */
			$this->addHookProperty('Page::shipfrom', function($event) {
				$event->return = $this->get_shipfrom();
			});

		}

		/**
		 * Returns if Vendor ID has been defined
		 * @return bool
		 */
		public function has_vendorID() {
			return boolval($this->vendorID);
		}

		/**
		 * Returns Vendor ID
		 * @return string
		 */
		public function get_vendorID() {
			return $this->vendorID;
		}

		/**
		 * Sets Vendor ID
		 * @param  string $vendorID VendorID
		 * @return string
		 */
		public function set_vendorID($vendorID) {
			$this->vendorID = $vendorID;
			$this->wire('page')->vendorID = $vendorID;
		}

		/**
		 * Sets User
		 * @param User $user
		 */
		public function set_user(User $user) {
			$this->user = $user;
		}

		/**
		 * Return User
		 */
		public function get_user() {
			if (!$this->user) {
				$this->user = $this->wire('user');
			}
			return $this->user;
		}

		/**
		 * Validates if Vendor exists
		 * @return void
		 */
		public function vendor_exists() {
			return boolval(VendorQuery::create()->filterByVendorid($this->vendorID)->count());
		}

		/**
		 * Returns Vendor
		 * NOTE: Sets the Vendor Property if not loaded
		 * @return Vendor
		 */
		public function get_vendor() {
			if (!$this->vendor) {
				$this->vendor = VendorQuery::create()->findOneByVendorid($this->vendorID);
			}
			return $this->vendor;
		}

		/**
		 * Returns if shipfromID is defined
		 * @return bool
		 */
		public function has_shipfromID() {
			return boolval($this->shipfromID);
		}

		/**
		 * Returns Vendor Shipto ID
		 * @return string
		 */
		public function get_shipfromID() {
			return $this->shipfromID;
		}

		/**
		 * Sets shipfromID ID
		 * @return void
		 */
		public function set_shipfromID($shipfromID) {
			$this->shipfromID = $shipfromID;
			$this->wire('page')->shipfromID = $shipfromID;
		}

		/**
		 * Validates if Shipto exists
		 * @return void
		 */
		public function shipfrom_exists() {
			return VendorshipfromQuery::create()->filterByVendorid($this->vendorID)->filterByShipfromid($this->shipfromID)->count();
		}

		/**
		 * Returns VendorShipto
		 * NOTE: Sets the shipfrom Property if not loaded
		 * @return VendorShipto
		 */
		public function get_shipfrom() {
			if (!$this->shipfrom) {
				$this->shipfrom = VendorshipfromQuery::create()->filterByVendorid($this->vendorID)->findOneByShipfromid($this->shipfromID);
			}
			return $this->shipfrom;
		}

		/**
		 * Returns PurchaseOrder Objects
		 *
		 * @param  int    $limit     Number of Results to return
		 * @param  int    $page      Page of Results
		 * @return PropelModelPager
		 */
		public function get_purchaseorders($limit = 10, $page = 1) {
			$filter_po = $this->wire('modules')->get('FilterPurchaseOrders');
			$filter_po->init_query($this->get_user());
			$query = $filter_po->get_query();
			$query->filterByVendorid($this->vendorID);

			if ($this->shipfromID) {
				$query->filterByShipfromid($this->shipfromID);
			}
			return $query->paginate($page, $limit);
		}

		/**
		 * Returns PurchaseOrder Objects
		 *
		 * @param  int    $limit     Number of Results to return
		 * @param  int    $page      Page of Results
		 * @return PropelModelPager
		 */
		public function get_invoices($limit = 10, $page = 1) {
			$filter_po = $this->wire('modules')->get('FilterApInvoices');
			$filter_po->init_query($this->get_user());
			$query = $filter_po->get_query();
			$query->filterByVendorid($this->vendorID);
			return $query->paginate($page, $limit);
		}

		/**
		 * Returns URL to Vendor Page
		 * @return string
		 */
		public function get_vendorURL() {
			return $this->wire('modules')->get('DPagesMvi')->get_vi_vendorURL($this->vendorID);
		}

		/**
		 * Returns URL to Vendor Shipto Page
		 * @return string
		 */
		public function get_vendor_shipfromURL() {
			return $this->wire('modules')->get('DpagesMvi')->get_vi_vendorshipfromURL($this->vendorID, $this->shipfromID);
		}

		/**
		 * Returns URL to Vendor / Vendor Shipto Page
		 * @return string
		 */
		public function get_vendor_or_shipfromURL() {
			return ($this->shipfromID) ? $this->get_vendor_shipfromURL() : $this->get_vendorURL();
		}

		/**
		 * Return View Sales Orders URL
		 * @return string
		 */
		public function get_purchaseordersURL() {
			$url = new Url($this->wire('pages')->get('pw_template=purchase-orders-vendor')->url);
			$url->query->set('vendorID', $this->vendorID);

			if ($this->shipfromID) {
				$url->query->set('shipfromID', $this->shipfromID);
			}

			return $url->getUrl();
		}

		/**
		 * Return View Sales History URL
		 * @return string
		 */
		public function get_invoicesURL() {
			$url = new Url($this->wire('pages')->get('pw_template=purchase-history-orders-vendor')->url);
			$url->query->set('vendorID', $this->vendorID);

			if ($this->shipfromID) {
				$url->query->set('shipfromID', $this->shipfromID);
			}
			return $url->getUrl();
		}



	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso VI Vendor Shipfrom Module',
				'version' => 101,
				'summary' => 'Handles VI Vendor / Vendor Shipfrom Loading',
				'singular' => true,
				'autoload' => true,
			);
		}
	}
