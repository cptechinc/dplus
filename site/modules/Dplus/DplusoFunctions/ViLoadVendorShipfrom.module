<?php namespace ProcessWire;

	use Purl\Url;

	use VendorQuery, Vendor;
	use VendorShipfromQuery, VendorShipfrom;

	class ViLoadVendorShipfrom extends WireData implements Module {
		/**
		 * Vendor ID
		 * @var string
		 */
		protected $vendorID;

		/**
		 * Vendor
		 * @var Vendor
		 */
		protected $vendor;

		/**
		 * Shipfrom ID
		 * @var string
		 */
		protected $shipfromID;

		/**
		 * Vendor Shipfrom
		 * @var VendorShipfrom
		 */
		protected $shipfrom;

		/**
		 * User
		 * @var User
		 */
		protected $user;


		public function init() {
			/**
			 * Returns CI Customer Page URL
			 */
			$this->addHook('Page::has_vendorID', function($event) {
				$page = $event->object;
				$event->return = $page->has('vendorID');
			});

			/**
			 * Returns CI Customer Page URL
			 */
			$this->addHook('Page::has_shipfromID', function($event) {
				$page = $event->object;
				$event->return = $page->has('shipfromID');
			});

			/**
			 * Returns CI Customer Page URL
			 */
			$this->addHook('Page::vendorURL', function($event) {
				$event->return = $this->get_vendorURL();
			});

			/**
			 * Returns CI Customer Shipto Page URL
			 */
			$this->addHook('Page::vendor_shipfromURL', function($event) {
				$event->return = $this->get_vendor_shipfromURL();
			});

			/**
			 * Returns CI Customer Shipto Page URL
			 */
			$this->addHook('Page::vendor_or_shipfromURL', function($event) {
				$event->return = $this->get_vendor_or_shipfromURL();
			});

			/**
			 * Returns CI Customer Page URL
			 */
			$this->addHookProperty('Page::vendor', function($event) {
				$event->return = $this->get_vendor();
			});

			/**
			 * Returns CI Customer Shipto Page URL
			 */
			$this->addHookProperty('Page::shipfrom', function($event) {
				$event->return = $this->get_shipfrom();
			});

		}

		/**
		 * Returns if Customer ID has been defined
		 * @return bool
		 */
		public function has_vendorID() {
			return boolval($this->vendorID);
		}

		/**
		 * Returns Customer ID
		 * @return string
		 */
		public function get_vendorID() {
			return $this->vendorID;
		}

		/**
		 * Sets Customer ID
		 * @param  string $vendorID CustomerID
		 * @return string
		 */
		public function set_vendorID($vendorID) {
			$this->vendorID = $vendorID;
			$this->wire('page')->vendorID = $vendorID;
		}

		/**
		 * Sets User
		 * @param User $user
		 */
		public function set_user(User $user) {
			$this->user = $user;
		}

		/**
		 * Return User
		 */
		public function get_user() {
			if (!$this->user) {
				$this->user = $this->wire('user');
			}
			return $this->user;
		}

		/**
		 * Validates if Customer exists
		 * @return void
		 */
		public function vendor_exists() {
			return boolval(VendorQuery::create()->filterByVendorid($this->vendorID)->count());
		}

		/**
		 * Returns Customer
		 * NOTE: Sets the Customer Property if not loaded
		 * @return Customer
		 */
		public function get_vendor() {
			if (!$this->vendor) {
				$this->vendor = VendorQuery::create()->findOneByVendorid($this->vendorID);
			}
			return $this->vendor;
		}

		/**
		 * Returns if shipfromID is defined
		 * @return bool
		 */
		public function has_shipfromID() {
			return boolval($this->shipfromID);
		}

		/**
		 * Returns Customer Shipto ID
		 * @return string
		 */
		public function get_shipfromID() {
			return $this->shipfromID;
		}

		/**
		 * Sets ShiptoID ID
		 * @return void
		 */
		public function set_shipfromID($shipfromID) {
			$this->shipfromID = $shipfromID;
			$this->wire('page')->shipfromID = $shipfromID;
		}

		/**
		 * Validates if Shipto exists
		 * @return void
		 */
		public function shipfrom_exists() {
			return CustomershipfromQuery::create()->filterByVendorid($this->vendorID)->filterByShipfromid($this->shipfromID)->count();
		}

		/**
		 * Returns CustomerShipto
		 * NOTE: Sets the shipfrom Property if not loaded
		 * @return CustomerShipto
		 */
		public function get_shipfrom() {
			if (!$this->shipfrom) {
				$this->shipfrom = CustomershipfromQuery::create()->filterByVendorid($this->vendorID)->findOneByShipfromid($this->shipfromID);
			}
			return $this->shipfrom;
		}


		/**
		 * Returns URL to Customer Page
		 * @return string
		 */
		public function get_vendorURL() {
			return $this->wire('modules')->get('MviPages')->get_vi_vendorURL($this->vendorID);
		}

		/**
		 * Returns URL to Customer Shipto Page
		 * @return string
		 */
		public function get_vendor_shipfromURL() {
			return $this->wire('modules')->get('MviPages')->get_vi_vendorshipfromURL($this->vendorID, $this->shipfromID);
		}

		/**
		 * Returns URL to Customer / Customer Shipto Page
		 * @return string
		 */
		public function get_vendor_or_shipfromURL() {
			return ($this->shipfromID) ? $this->get_vendor_shipfromURL() : $this->get_vendorURL();
		}



	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso VI Vendor Shipfrom Module',
				'version' => 101,
				'summary' => 'Handles VI Vendor / Vendor Shipfrom Loading',
				'singular' => true,
				'autoload' => true,
			);
		}
	}
