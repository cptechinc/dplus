<?php namespace ProcessWire;

use Purl\Url;
use PurchaseOrderQuery, PurchaseOrder;
use ItemMasterItemQuery, ItemMasterItem;

class WarehouseReceiving extends WireData implements Module {
	/**
	 * Session ID
	 * @var string
	 */
	protected $sessionID;

	/**
	 * Purchase Order Number
	 * @var string
	 */
	protected $ponbr;

	/**
	 * Sets Session ID
	 * @param string $sessionID
	 */
	public function set_sessionID($sessionID) {
		$this->sessionID = $sessionID;
	}

	/**
	 * Sets Purchase Order Number
	 * @param string $sessionID
	 */
	public function set_ponbr($ponbr) {
		$this->wire('page')->ponbr = $ponbr;
		$this->ponbr = $ponbr;
	}

	/**
	 * Sends HTTP GET request to Redir to make Dplus Request to load Purchase Order Working files
	 * @return void
	 */
	public function request_purchaseorder_init() {
		$http = new WireHttp();
		$url = new Url("127.0.0.1");
		$url->path = $this->wire('pages')->get('template=redir, redir_file=inventory')->url;
		$url->query->set('action', 'init-receive');
		$url->query->set('sessionID', $this->sessionID);
		$url->query->set('ponbr', $this->ponbr);
		$http->get($url->getUrl());
	}

	/**
	 * Returns if Purchase Order exists in the Database
	 * @return PurchaseOrder
	 */
	public function purchaseorder_exists() {
		return PurchaseOrderQuery::create()->filterByPonbr($this->ponbr)->count();
	}

	/**
	 * Returns Purchase Order from Database
	 * @return PurchaseOrder
	 */
	public function get_purchaseorder() {
		return PurchaseOrderQuery::create()->findOneByPonbr($this->ponbr);
	}

	/**
	 * Returns an Array that contains each Purchase Order Detail and the properties needed
	 * for JavaScript Validation
	 * @return array
	 */
	public function get_purchaseorder_recevingdetails_js() {
		$config = $this->wire('config');
		$po = $this->get_purchaseorder();
		$items = $po->get_receivingitems();
		$js = array();

		foreach ($items as $item) {
			$js[$item->itemid] = array(
				'itemid'         => $item->itemid,
				'qty_ordered'    => intval($item->qty_ordered),
				'qty_received'   => $config->company == 'provalley' ? $item->count_receivedlots() : $item->qty_received,
				'lotserialcount' => $item->count_receivedlots(),
				'type'           => ItemMasterItemQuery::create()->get_itemtype($item->itemid)
			);
		}
		return $js;
	}

	/**
	 * Returns array that contains configuration values
	 * NOTE: used for JavaScript
	 * @return array
	 */
	public function get_jsconfig() {
		$config = $this->wire('modules')->get('ConfigsWarehouseInventory');
		$js = array(
			'receive_lotserial_as_single' => $config->receive_lotserial_as_single,
			//'receive_qty_label'           => $config->receive_qty_label
		);
		return $js;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Warehouse Receiving Module',
			'version' => 101,
			'summary' => 'Handles Warehouse Receiving',
			'singular' => true,
			'autoload' => false,
		);
	}

	public function init() {
		$this->addHook('Page(pw_template=whse-receiving)::linenbrURL', function($event) {
			$p = $event->object;
			$linenbr = $event->arguments(0);
			$url = new Url($p->fullURL->getUrl());
			$url->query->set('linenbr', $linenbr);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=whse-receiving)::ponbrURL', function($event) {
			$p = $event->object;
			$url = new Url($p->fullURL->getUrl());
			$url->query = '';
			$url->query->set('ponbr', $this->ponbr);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=whse-receiving)::delete_received_itemURL', function($event) {
			$url = new Url($this->wire('pages')->get('template=redir, redir_file=inventory')->url);
			$ponbr    = $event->arguments(0);
			$linenbr  = $event->arguments(1);
			$sequence = $event->arguments(2);
			$url->query->set('action', 'remove-received-item');
			$url->query->set('ponbr', $ponbr);
			$url->query->set('linenbr', $linenbr);
			$url->query->set('sequence', $sequence);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=whse-receiving)::submit_receiptURL', function($event) {
			$url = new Url($this->wire('pages')->get('template=redir, redir_file=inventory')->url);
			$ponbr    = $event->arguments(0);
			$url->query->set('action', 'submit-receipt');
			$url->query->set('ponbr', $ponbr);
			$event->return = $url->getUrl();
		});
	}
}
