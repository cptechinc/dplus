<?php namespace ProcessWire;

use Purl\Url;

use InvsearchQuery, Invsearch;;
use WhseitempickQuery, Whseitempick;
use PickSalesOrderDetailQuery, PickSalesOrderDetail;
use BarcodesQuery, Barcodes;
use WhsesessionQuery, Whsesession;
use WarehouseQuery, Warehouse;
use WarehouseInventoryQuery, WarehouseInventory;

class DplusoWarehousePicking extends WireData implements Module {
	/**
	 * Processwire Session
	 * @var Session
	 */
	protected $session;

	/**
	 * Session ID
	 * @var string
	 */
	protected $sessionID;

	/**
	 * Order Number
	 * @var string
	 */
	protected $ordn;

	/**
	 * Line Number
	 * @var int
	 */
	protected $linenbr;

	/**
	 * Subline Number
	 * @var int
	 */
	protected $sublinenbr = 0;

	/**
	 * Item Being Picked
	 * @var PickSalesOrderDetail
	 */
	protected $pickitem;

	/**
	 * Object with config modules
	 * @var WireData
	 */
	protected $config;

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Warehouse Picking Functions Module',
			'version' => 101,
			'summary' => 'Handles Dplus Functions',
			'singular' => true,
			'autoload' => false,
		);
	}

	public function init() {
		$this->session = $this->wire('session');
		$this->config = new WireData();
		$this->config->inventory = $this->wire('modules')->get('ConfigsWarehouseInventory');
		$this->config->picking   = $this->wire('modules')->get('ConfigsWarehousePicking');
	}

	/**
	 * Sets Session ID
	 * @param string $sessionID Session ID
	 */
	public function set_sessionID($sessionID) {
		$this->sessionID = $sessionID;
	}

	/**
	 * Sets Order Number
	 * @param string $ordn Sales Order Number
	 */
	public function set_ordn($ordn) {
		$this->ordn = $ordn;
	}

	/**
	 * Returns Ordn
	 * @return string
	 */
	public function get_ordn() {
		return $this->ordn;
	}

	/**
	 * Sets Line Number
	 * @param int $linenbr Line Number
	 */
	public function set_linenbr($linenbr) {
		$this->linenbr = $linenbr;
	}

	/**
	 * Returns linenbr
	 * @return string
	 */
	public function get_linenbr() {
		return $this->linenbr;
	}

	/**
	 * Sets SubLine Number
	 * @param int $sublinenbr SubLine Number
	 */
	public function set_sublinenbr($sublinenbr) {
		$this->sublinenbr = $sublinenbr;
	}

	/**
	 * Returns SubLine Number
	 * @param int $sublinenbr SubLine Number
	 */
	public function get_sublinenbr() {
		return $this->sublinenbr;
	}


	/**
	 * Sets Pick Item
	 * @param PickSalesOrderDetail $pickitem
	 */
	public function set_pickitem(PickSalesOrderDetail $pickitem) {
		$this->pickitem = $pickitem;
	}

	/**
	 * Takes the Wire Input and decides which action to take based on the
	 * action given
	 * @param  WireInput $input Values to pull from
	 * @return void
	 */
	public function handle_barcodeaction(WireInput $input) {
		if ($input->requestMethod('POST')) {
			$values = $input->post;
			$action = $values->text('action');

			switch ($action) {
				case 'add-barcode':
					$this->add_barcode($input);
					break;
				case 'edit-barcode':
					$this->edit_barcode_qty($input);
					break;
				case 'delete-barcode':
					$this->delete_barcode_qty($input);
					break;
			}
		}
	}

	/**
	 * Add Barcode for Order Line
	 * NOTE does serial logic and if Inventory allows for negative inventory
	 * @uses self::add_pickedbarcode
	 * @param WireInput $input [description]
	 */
	public function add_barcode(WireInput $input) {
		$values = $input->post;

		$barcode       = $values->text('barcode');
		$palletnbr     = $values->int('palletnbr');
		$binID         = $values->text('binID');
		$scanned_binID = $values->text('binID');
		$qty           = $values->int('qty');
		$is_valid      = false;
		$pickitem      = $this->get_picksalesorderdetail();

		if ($pickitem->is_item_serialized() && $this->has_picked_barcode($barcode)) {
			$this->session->pickerror = "Serial # $barcode has been picked for $pickitem->itemid";
		} else {
			$bincount = 0;

			if ($pickitem->is_item_serialized() || $pickitem->is_item_lotted()) {
				$item_exists = boolval(InvsearchQuery::create()->countByLotserial($this->sessionID, $barcode));
				$item = InvsearchQuery::create()->get_lotserial($this->sessionID, $barcode);
				$binID = $item->bin;
				$bincount = InvsearchQuery::create()->count_itembins_lotserial($this->sessionID, $item->itemid, $item->lotserial);
			} else {
				$item_exists = boolval(InvsearchQuery::create()->countByItemid($this->sessionID, $barcode));
				$item = InvsearchQuery::create()->findOneByItemid($this->sessionID, $barcode, $binID);
				$bincount = InvsearchQuery::create()->count_itembins_itemid($this->sessionID, $item->itemid);
				$binID = $bincount == 1 ? $item->bin : $scanned_binID;
			}

			if ($this->config->inventory->allow_negativeinventory) {

				// NOTE ONLY NON-LOTTED ITEMS CAN BE IN NEGATIVE INVENTORY -- ROGER
				if ($pickitem->is_item_serialized() || $pickitem->is_item_normal()) {
					$is_valid = true;

					if (!$item_exists) {
						$warehouse = $this->get_warehouseconfig();
						$binID = 'WHSE'; // TODO WAREHOUSE DEFAULT
						$bincount = 1;
						$item_exists = true;
					}
				}
			}

			if ($item_exists) {
				$item = $item ? $item : new Invsearch();

				if (InvsearchQuery::create()->get_binqty($this->sessionID, $item, $binID) >= 0) {
					$is_valid = true;
				} else {
					$msg = "Insufficient " . strtoupper($item->get_itemtypepropertydesc())  . " " . $item->get_itemtypepropertydesc();
					$msg .= " from $binID";
					$this->session->pickerror = $msg;
				}
			} elseif ($pickitem->is_item_nonstock()) {
				$is_valid = true;
			} else { // VALIDATE IF SCAN IS A UPC BARCODE
				$barcodesquery = BarcodesQuery::create();
				$barcodesquery->filterByBarcode($barcode);

				if ($barcodesquery->count()) {
					$barcode_item = $barcodesquery->findOne();
					$is_valid = $barcode_item->itemid == $pickitem->itemid;
				} else {
					$this->session->pickerror = "Scan: $barcode doesn't match anything for {$pickitem->itemid} in bin '$binID'";
				}

			}

			if ($is_valid) {
				if ($bincount == 1 || !empty($scanned_binID)) {
					$this->add_pickedbarcode($pickitem, $barcode, $palletnbr, $qty, $binID);
				} elseif($pickitem->is_item_nonstock()) {
					$this->add_pickedbarcode($pickitem, $barcode, $palletnbr, $qty, $binID = '');
				} else {
					$this->session->pickerror = "Please Provide a bin for $barcode";
				}
			}
		}
	}

	/**
	 * Inserts record into Whseitempick for this PickSalesOrderDetail
	 * @param PickSalesOrderDetail $pickitem  Item to add
	 * @param string               $barcode   Barcode Scanned
	 * @param int                  $palletnbr Pallet
	 * @param int                  $qty       Qty to add
	 * @param string               $binID     Bin Picked from
	 */
	public function add_pickedbarcode(PickSalesOrderDetail $pickitem, $barcode, $palletnbr = 1, $qty = 1, $binID = '') {
		$picking_master = WhseitempickQuery::create();

		$item = new Whseitempick();
		$item->setSessionid($pickitem->sessionid);
		$item->setOrdn($pickitem->ordernbr);
		$item->setItemid($pickitem->itemnbr);
		$item->setRecordnumber($picking_master->get_max_order_subline_recordnumber($pickitem->sessionid, $pickitem->ordernbr, $pickitem->linenbr, $pickitem->sublinenbr) + 1);
		$item->setPalletnbr($palletnbr);
		$item->setLinenbr($pickitem->linenbr);
		$item->setSublinenbr($pickitem->sublinenbr);
		$item->setBarcode($barcode);
		$item->setBin($binID);

		if ($pickitem->is_item_serialized()) {
			$item->setQty(1);
		} else {
			if ($barcode == $pickitem->itemid || $pickitem->is_item_lotted() ) {
				$item->setQty($qty);
			} elseif (BarcodesQuery::create()->get_barcode_itemid($barcode) == $pickitem->itemid) {
				$barcode_info = BarcodesQuery::create()->findOneByBarcode($barcode);
				$item->setQty($barcode_info->qty);
			}
		}

		$item->save();
	}

	/**
	 * Updates the Whseitempick record
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function edit_barcode_qty(WireInput $input) {
		$values = $input->post;
		$barcode   = $values->text('barcode');
		$palletnbr = $values->int('palletnbr');
		$recordnbr = $values->int('recordnbr');
		$qty       = $values->int('qty');

		$picking_master = WhseitempickQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByLinenbrSublinenbr($this->linenbr, $this->sublinenbr);
		$picking_master->filterByRecordnumber($recordnbr);

		$item = $picking_master->findOne();
		$item->setQty($qty);
		$item->save();
	}

	/**
	 * Deletes an Whseitempick record
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function delete_barcode_qty(WireInput $input) {
		$values = $input->post;
		$barcode   = $values->text('barcode');
		$palletnbr = $values->int('palletnbr');
		$recordnbr = $values->int('recordnbr');

		$picking_master = WhseitempickQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByLinenbrSublinenbr($this->linenbr, $this->sublinenbr);
		$picking_master->filterByRecordnumber($recordnbr);

		$item = $picking_master->findOne();
		$item->delete();
	}

	/**
	 * Gets the Total Qty picked for this User / Session
	 * NOTE does logic for if item is serialized / lotted,
	 * If singleunitqty is being used
	 * @return int  Total Qty Picked
	 */
	public function get_userpickedtotal() {
		$query = WhseitempickQuery::create();
		$pickitem = $this->get_picksalesorderdetail();

		if ($pickitem->is_item_lotted() || $pickitem->is_item_serialized()) {
			$query->addAsColumn('sum', 'sum(qty)');
			$query->select('sum');
			$query->filterBySessionid($this->sessionID);
			$query->filterByOrdn($this->ordn);
			$query->filterByLinenbr($this->linenbr);
			$query->filterBySublinenbr($this->sublinenbr);
			return intval($query->findOne());
		} else {
			if ($this->config->picking->use_singleunitqty) {
				$query->addAsColumn('sum', 'sum(qty)');
				$query->select('sum');
				$query->filterBySessionid($this->sessionID);
				$query->filterByOrdn($this->ordn);
				$query->filterByLinenbr($this->linenbr);
				$query->filterBySublinenbr($this->sublinenbr);
				return intval($query->findOne());
			} else {
				return intval($query->get_sublineqtytotal($this->sessionID, $this->ordn, $this->linenbr, $this->sublinenbr));
			}
		}
	}

	/**
	 * Return the qty picked that is already in the Pack Bin
	 * @return int Pack Bin Qty
	 */
	public function get_packbinqtytotal() {
		$query = WhseitempickQuery::create();
		$query->addAsColumn('sum', 'sum(qty)');
		$query->select('sum');
		$query->filterBySessionid($this->sessionID);
		$query->filterByOrdn($this->ordn);
		$query->filterByLinenbr($this->linenbr);
		$query->filterBySublinenbr($this->sublinenbr);
		$query->filterByBin('PACK');
		return intval($query->findOne());
	}

	/**
	 * Returns the unitqty multiplied by the number of barcodes scanned
	 * @param  Whseitempick $pickedbarcode
	 * @return init                        Qty
	 */
	public function get_barcodeqtytotal(Whseitempick $pickedbarcode) {
		if ($this->config->picking->use_singleunitqty) {
			return $pickedbarcode->qty;
		} else {
			$barcode_qty = BarcodesQuery::create()->get_barcode_qty($pickedbarcode->barcode);
			return $pickedbarcode->qty * $barcode_qty;
		}
	}

	/**
	 * Returns the Picked Qty + already pulled qty for the Order, not just user
	 * // NOTE this Total is total picked for the order, not just what the user has picked
	 * @return int Total Picked for this item on the order
	 */
	public function get_orderpickedtotal($linenbr = 0) {
		if ($linenbr) $this->set_linenbr($linenbr);
		$pickitem = $this->get_picksalesorderdetail();
		$qty_packbin = $this->get_packbinqtytotal();
		return $pickitem->qtypulled + $this->get_userpickedtotal() - $qty_packbin;
	}

	/**
	 * Returns the Quantity remaining to pull
	 * @return int
	 */
	public function get_qtyremaining($linenbr = 0) {
		if ($linenbr) $this->set_linenbr($linenbr);
		$pickitem = $this->get_picksalesorderdetail();
		return $pickitem->qtyordered - ($this->get_orderpickedtotal());
	}

	/**
	 * Returns if Qty picked is more than needed
	 * @return bool Has user picked too much?
	 */
	public function has_pickedtoomuch() {
		$pickitem = $this->get_picksalesorderdetail();
		return $this->get_orderpickedtotal() > $pickitem->qtyordered;
	}

	/**
	 * Returns if User has picked more than bin qty
	 * @return bool Did user pick more than expected Bin Qty?
	 */
	public function has_pickedmorethanbinqty() {
		$pickitem = $this->get_picksalesorderdetail();
		return $this->get_userpickedtotal() > $pickitem->binqty;
	}

	/**
	 * Creates an array for JS config for the item
	 *
	 * @return array
	 */
	public function get_pickitem_jsconfig() {
		$pickitem = $this->get_picksalesorderdetail();
		return array(
			'itemid' => $pickitem->itemnbr,
			'qty' => [
				'expected'     => intval($pickitem->binqty),
				'ordered'      => intval($pickitem->qtyordered),
				'picked'       => intval($this->get_userpickedtotal()),
				'pulled'       => intval($pickitem->qtypulled),
				'total_picked' => intval($this->get_orderpickedtotal()),
				'remaining'    => intval($this->get_qtyremaining())
			]
		);
	}

	/**
	 * Inserts a Barcode record for the itemID
	 * @param  string $itemID Item ID
	 * @return void
	 */
	public function insert_barcode_itemID($itemID) {
		if (!BarcodesQuery::create()->findOneByBarcodenbr($itemID)) {
			$barcode = new Barcodes();
			$barcode->setBarcodenbr($itemID);
			$barcode->setItemid($itemID);
			$barcode->setUnitqty(1);
			$barcode->setUom('EACH');
			$barcode->save();
		}
	}

	/**
	 * Is negative inventory allowed?
	 * @return bool
	 */
	public function allow_negativeintentory() {
		return boolval($this->config->inventory->allow_negativeinventory);
	}

	/**
	 * Has this barcode been used for this Sales order and Line Nbr
	 * NOTE being used for lotted and serialized
	 * @param  string $barcode Barcode Scan
	 * @return bool            Is there a Whseitempick record with this barcode
	 */
	public function has_picked_barcode($barcode) {
		$pickitem = $this->get_picksalesorderdetail();
		return boolval(WhseitempickQuery::create()->has_picked_barcode($this->sessionID, $pickitem->ordernbr, $barcode, $pickitem->linenbr, $pickitem->sublinenbr));
	}

	/**
	 * Returns if the picksalesorderdetail line is being picked
	 * @param  PickSalesOrderDetail $pickitem
	 * @return bool                           Is picksalesorderdetail being picked?
	 */
	public function is_subline_being_picked(PickSalesOrderDetail $pickitem) {
		return boolval(WhseitempickQuery::create()->is_order_subline_being_picked($this->sessionID, $pickitem->ordernbr, $pickitem->linenbr, $pickitem->sublinenbr));
	}

	/**
	 * Is the Current User Picking that Sales Order Detail
	 * @param  PickSalesOrderDetail $pickitem
	 * @return bool                           Is current session picking the detail line
	 */
	public function is_currentuser_picking(PickSalesOrderDetail $pickitem) {
		return boolval(WhseitempickQuery::create()->is_order_subline_being_picked_session($this->sessionID, $pickitem->ordernbr, $pickitem->linenbr, $pickitem->sublinenbr));
	}

	/**
	 * Returns PickSalesOrderDetail for this session, order, line
	 * @return PickSalesOrderDetail
	 */
	public function get_picksalesorderdetail() {
		$picking_master = PickSalesOrderDetailQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByLinenbrSublinenbr($this->linenbr, $this->sublinenbr);
		return $picking_master->findOne();
	}

	/**
	 * Returns the Whsesession for this Session ID
	 * @return Whsesession
	 */
	public function get_whsesession() {
		return WhsesessionQuery::create()->findOneBySessionid($this->sessionID);
	}

	/**
	 * Returns the Warehouse for this Whsesession
	 * @return Whsesession
	 */
	public function get_warehouseconfig() {
		$whsesession = $this->get_whsesession();
		return WhsesessionQuery::create()->findOneByWhseid($whsesession->whseid);
	}

	/**
	 * Return Default Warehouse Bin for Item
	 *
	 * @param  string $itemID Item ID
	 * @return string         Default Warehouse Bin for Item
	 * @uses WarehouseInventoryQuery
	 */
	public function get_warehouseitembin($itemID) {
		$whsesession = $this->get_whsesession();
		return WarehouseInventoryQuery::create()->get_warehouseitembin($whsesession->whseid, $itemID);
	}

	public function guess_pickingbin(PickSalesOrderDetail $pickitem) {
		$bincount = InvsearchQuery::create()->count_itembins_itemid($pickitem->sessionid, $pickitem->itemid);

		if ($bincount == 1) {
			return InvsearchQuery::create()->findOneBinBySessionidItemid($pickitem->sessionid, $pickitem->itemid);
		} elseif (!$pickitem->is_item_lotted()) {
			return $this->get_warehouseitembin($pickitem->itemid);
		} else {
			$inventoryconfig = $this->wire('modules')->get('ConfigsWarehouseInventory');
			return $inventoryconfig->allow_negativeintentory() ? $this->get_warehouseitembin($pickitem->itemid) : '';
		}
	}
}
