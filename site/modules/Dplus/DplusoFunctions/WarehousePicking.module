<?php namespace ProcessWire;

use Purl\Url;

use InvsearchQuery, Invsearch;;
use WhseitempickQuery, Whseitempick;
use PickSalesOrderDetailQuery, PickSalesOrderDetail;
use BarcodesQuery, Barcodes;
use WhsesessionQuery, Whsesession;
use WarehouseQuery, Warehouse;
use WarehouseInventoryQuery, WarehouseInventory;
use WhseitemphysicalcountQuery, Whseitemphysicalcount;

use Map\QnoteTableMap;
use Propel\Runtime\Propel;

class WarehousePicking extends WireData implements Module {
	/**
	 * Processwire Session
	 * @var Session
	 */
	protected $session;

	/**
	 * Session ID
	 * @var string
	 */
	protected $sessionID;

	/**
	 * Order Number
	 * @var string
	 */
	protected $ordn;

	/**
	 * Object with config modules
	 * @var WireData
	 */
	protected $config;

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Warehouse Picking Functions Module',
			'version' => 101,
			'summary' => 'Handles Dplus Functions',
			'singular' => true,
			'autoload' => false,
		);
	}

	public function init() {
		$this->session = $this->wire('session');
		$this->config = new WireData();
		$this->config->inventory = $this->wire('modules')->get('ConfigsWarehouseInventory');
		$this->config->picking   = $this->wire('modules')->get('ConfigsWarehousePicking');
	}

	/**
	 * Sets Session ID
	 * @param string $sessionID Session ID
	 */
	public function set_sessionID($sessionID) {
		$this->sessionID = $sessionID;
	}

	/**
	 * Sets Order Number
	 * @param string $ordn Sales Order Number
	 */
	public function set_ordn($ordn) {
		$this->ordn = $ordn;
	}

	/**
	 * Returns Ordn
	 * @return string
	 */
	public function get_ordn() {
		return $this->ordn;
	}

	/**
	 * Takes the Wire Input and decides which action to take based on the
	 * action given
	 * @param  WireInput $input Values to pull from
	 * @return void
	 */
	public function handle_barcodeaction(WireInput $input) {
		if ($input->requestMethod('POST')) {
			$values = $input->post;
			$action = $values->text('action');

			switch ($action) {
				case 'add-barcode':
					$this->add_barcode($input);
					break;
				case 'edit-barcode':
					$this->edit_barcode_qty($input);
					break;
				case 'delete-barcode':
					$this->delete_barcode_qty($input);
					break;
				case 'add-lotserials':
					$this->add_lotserials($input);
					break;
				case 'add-lotserial':
					$this->add_lotserial($input);
					break;
				case 'remove-lotserial':
					$this->remove_lotserial($input);
					break;
				case 'verify-whseitempicks':
					$this->verify_whseitempicks($input);
					break;
			}
		}
	}

	/**
	 * Adds Whseitempick records for each lotserial bin that is provided
	 *
	 * @param WireInput $input
	 */
	public function add_lotserial(WireInput $input) {
		$values = $input->post;
		$itemID = $values->text('itemID');
		$scan = $values->text('scan');

		$pickingline = $this->get_picksalesorderdetail_itemid($itemID);

		$query_exists = WhseitempickQuery::create();
		$query_exists->filterBySessionid($pickingline->sessionid);
		$query_exists->filterByOrdn($pickingline->ordernbr);
		$query_exists->filterByItemid($pickingline->itemnbr);

		$qty       = $values->text("qty");
		$binID     = $values->text("binID");
		$lotref    = $values->text("lotserialref");
		$lotserial = $values->text("lotserial");

		$query_exists->filterByLotserial($lotserial);
		$exists = $query_exists->count();

		if ($pickingline->is_item_serialized()) {

		} elseif ($pickingline->is_item_lotted() && $dplus_customer == 'provalley') {

		} else {
			$exists = false;
		}

		if (!$exists) {
			$item = $this->add_whseitempick($pickingline, $scan, $palletnbr = 1, $qty, $binID);
			$item->setLotserialref($lotref);
			$item->setLotserial($lotserial);
			$item->save();
		}
		$this->send_finishline_request($pickingline->linenbr);
		$this->wire('page')->fullURL->query->remove('scan');
	}

	public function remove_lotserial(WireInput $input) {
		$values = $input->post;
		$recordnumber = $values->int('recordnumber');
		$linenbr      = $values->int('linenbr');
		$sublinenbr   = $values->int('sublinenbr');
		$this->send_removepickeditem_request($recordnumber);

		$picking_master = WhseitempickQuery::create();
		$picking_master->filterBySessionid($this->sessionID);
		$picking_master->filterByOrdn($this->ordn);
		$picking_master->filterByLinenbr($linenbr);
		$picking_master->filterBySublinenbr($sublinenbr);
		$picking_master->filterByRecordnumber($recordnumber);
		$item = $picking_master->findOne();
		//$item->delete();
		$this->session->removefromline = $linenbr;
	}

	/**
	 * Adds Whseitempick records for each lotserial bin that is provided
	 *
	 * @param WireInput $input
	 */
	public function add_lotserials(WireInput $input) {
		$values = $input->post;
		$itemID = $values->text('itemID');
		$scan = $values->text('scan');
		$lotserialbins = $input->post->array('lotserialbins');
		$pickingline = $this->get_picksalesorderdetail_itemid($itemID);
		$recordnumbers = array();

		$query_exists = WhseitempickQuery::create();
		$query_exists->filterBySessionid($pickingline->sessionid);
		$query_exists->filterByOrdn($pickingline->ordernbr);
		$query_exists->filterByItemid($pickingline->itemnbr);

		foreach ($lotserialbins as $lotserialbin) {
			$qty       = $values->text("$lotserialbin-qty");
			$binID     = $values->text("$lotserialbin-bin");
			$lotref    = $values->text("$lotserialbin-lotserialref");
			$lotserial = $values->text("$lotserialbin-lotserial");

			$query_exists->filterByLotserial($lotserial);
			$exists = $query_exists->count();

			if ($pickingline->is_item_serialized()) {

			} elseif ($pickingline->is_item_lotted() && $dplus_customer == 'provalley') {

			} else {
				$exists = false;
			}

			if (!$exists) {
				$item = $this->add_whseitempick($pickingline, $scan, $palletnbr = 1, $qty, $binID);
				$item->setLotserialref($lotref);
				$item->setLotserial($lotserial);
				$item->save();
				$recordnumbers[] = $item->recordnumber;
			}
		}
		$this->session->verify_whseitempick_itemID  = $itemID;
		$this->session->verify_whseitempick_linenbr = $pickline->linenbr;
		$this->session->verify_whseitempick_items   = $recordnumbers;
	}

	/**
	 * Adds Whseitempick records for each lotserial bin that is provided
	 *
	 * @param WireInput $input
	 */
	public function verify_whseitempicks(WireInput $input) {
		$values = $input->post;
		$scan = $values->text('scan');
		$recordnumbers = $values->array('recordnumbers'); // Record numbers correspond to the Whseitempick recordnumber
		$linenbr = 0;

		foreach ($recordnumbers as $recordnumber) {
			$query_picked = WhseitempickQuery::create();
			$query_picked->filterBySessionid(session_id());
			$query_picked->filterByOrdn($this->ordn);
			$query_picked->filterByBarcode($scan);
			$whseitempick = $query_picked->findOneByRecordnumber($recordnumber);

			$qty       = $values->text("qty-$recordnumber");
			$binID     = $values->text("binID-$recordnumber");
			$lotref    = $values->text("lotserialref-$recordnumber");
			$lotserial = $values->text("lotserial-$recordnumber");

			$whseitempick->setLotserialref($lotref);
			$whseitempick->setLotserial($lotserial);
			$whseitempick->setQty($qty);
			$whseitempick->setBin($binID);
			$whseitempick->save();

			$linenbr = $whseitempick->linenbr;
		}

		$this->session->remove('verify_whseitempick_items');
		$page = $this->wire('page');
		$page->fullURL->query->remove('scan');
		$debug = boolval($values->debug);
		$this->send_finishline_request($linenbr, $debug);
	}

	public function send_finishline_request($linenbr, $debug = false) {
		$http = new WireHttp();
		$url = new Url('127.0.0.1');
		$url->path = $this->wire('pages')->get('template=redir, redir_file=picking')->url;
		$url->query->set('action', 'finish-item');
		$url->query->set('linenbr', $linenbr);
		$url->query->set('sessionID', session_id());
		$url->query->set('debug', $debug);
		$http->get($url->getUrl());
	}

	public function send_removepickeditem_request($recordnumber, $debug = false) {
		$http = new WireHttp();
		$url = new Url('127.0.0.1');
		$url->path = $this->wire('pages')->get('template=redir, redir_file=picking')->url;
		$url->query->set('action', 'remove-picked-item');
		$url->query->set('recordnumber', $recordnumber);
		$url->query->set('sessionID', session_id());
		$url->query->set('debug', $debug);
		$http->get($url->getUrl());
	}

	/**
	 * Return PickSalesOrderDetail that matches ItemID
	 * // HANDLE CHOOSING CORRECT LINE
	 *
	 * @param  string $itemID Item ID
	 * @return PickSalesOrderDetail
	 */
	public function get_picksalesorderdetail_itemid($itemID) {
		$picking_master = PickSalesOrderDetailQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByitemid($itemID);
		return $picking_master->findOne();
	}

	/**
	 * Inserts record into Whseitempick for this PickSalesOrderDetail
	 *
	 * @param PickSalesOrderDetail $pickitem  Item to add
	 * @param string               $barcode   Barcode Scanned
	 * @param int                  $palletnbr Pallet
	 * @param int                  $qty       Qty to add
	 * @param string               $binID     Bin Picked from
	 */
	public function add_whseitempick(PickSalesOrderDetail $pickitem, $barcode, $palletnbr = 1, $qty = 1, $binID = '') {
		$dplus_customer = $this->wire('config')->company;
		$picking_master = WhseitempickQuery::create();
		$item = new Whseitempick();
		$item->setSessionid($pickitem->sessionid);
		$item->setOrdn($pickitem->ordernbr);
		$item->setItemid($pickitem->itemnbr);
		$item->setRecordnumber($picking_master->get_max_order_subline_recordnumber($pickitem->sessionid, $pickitem->ordernbr, $pickitem->linenbr, $pickitem->sublinenbr) + 1);
		$item->setPalletnbr($palletnbr);
		$item->setLinenbr($pickitem->linenbr);
		$item->setSublinenbr($pickitem->sublinenbr);
		$item->setBarcode($barcode);
		$item->setBin($binID);

		if ($pickitem->is_item_serialized()) {
			$item->setQty(1);
		} else {
			if ($barcode == $pickitem->itemid || $pickitem->is_item_lotted()) {
				$item->setQty($qty);
			} elseif (BarcodesQuery::create()->get_barcode_itemid($barcode) == $pickitem->itemid) {
				$barcode_info = BarcodesQuery::create()->findOneByBarcode($barcode);
				$item->setQty($barcode_info->qty);
			} else {
				$item->setQty($qty);
			}
		}
		$item->save();


		return $item;
	}

	/**
	 * Updates the Whseitempick record
	 *
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function edit_barcode_qty(WireInput $input) {
		$values = $input->post;
		$barcode   = $values->text('barcode');
		$palletnbr = $values->int('palletnbr');
		$recordnbr = $values->int('recordnbr');
		$qty       = $values->int('qty');

		$picking_master = WhseitempickQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByLinenbrSublinenbr($this->linenbr, $this->sublinenbr);
		$picking_master->filterByRecordnumber($recordnbr);

		$item = $picking_master->findOne();
		$item->setQty($qty);
		$item->save();
	}

	/**
	 * Deletes an Whseitempick record
	 *
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function delete_barcode_qty(WireInput $input) {
		$values = $input->post;
		$barcode    = $values->text('barcode');
		$palletnbr  = $values->int('palletnbr');
		$recordnbr  = $values->int('recordnbr');
		$linenbr    = $values->int('linenbr');
		$sublinenbr = $values->int('sublinenbr');

		$picking_master = WhseitempickQuery::create();
		$picking_master->filterBySessionidOrder($this->sessionID, $this->ordn);
		$picking_master->filterByLinenbrSublinenbr($linenbr, $sublinenbr);
		$picking_master->filterByRecordnumber($recordnbr);

		$item = $picking_master->findOne();
		$item->delete();
		$this->session->removefromline = $linenbr;
		$this->send_finishline_request($linenbr);
	}
}
