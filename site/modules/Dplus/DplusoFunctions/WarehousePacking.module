<?php namespace ProcessWire;
use Map\QnoteTableMap;
use Purl\Url;

use WhseitempackQuery, Whseitempack;
use PackSalesOrderDetailQuery, PackSalesOrderDetail;
use WhsesessionQuery, Whsesession;
use WarehouseQuery, Warehouse;
use WarehouseInventoryQuery, WarehouseInventory;
use QnoteQuery, Qnote;
use InvsearchQuery, Invsearch;
use ItemMasterItemQuery, ItemMasterItem;

class WarehousePacking extends WireData implements Module {
	/**
	 * Processwire Session
	 * @var Session
	 */
	protected $session;

	/**
	 * Session ID
	 * @var string
	 */
	protected $sessionID;

	/**
	 * Order Number
	 * @var string
	 */
	protected $ordn;


	/**
	 * Item Being Picked
	 * @var PackSalesOrderDetail
	 */
	protected $packitem;

	/**
	 * Object with config modules
	 * @var WireData
	 */
	protected $config;

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Warehouse Packing Functions Module',
			'version' => 101,
			'summary' => 'Handles Warehouse Packing',
			'singular' => true,
			'autoload' => false,
		);
	}

	public function init() {
		$this->session = $this->wire('session');
		$this->config = new WireData();
		$this->config->inventory = $this->wire('modules')->get('ConfigsWarehouseInventory');
		//$this->config->picking   = $this->wire('modules')->get('ConfigsWarehousePicking');

		$this->addHook('Page::get_addboxURL', function($event) {
			$p = $event->object;
			$linenbr = $event->arguments(0);

			$url = new Url($p->fullURL->getUrl());
			$url->query->set('action', 'add-box');
			$event->return = $url->getUrl();
		});

		$this->addHook('Page::get_orderURL', function($event) {
			$p = $event->object;
			$url = new Url($p->fullURL->getUrl());
			$url->path = $p->child('template=redir')->url;
			$url->query->remove('box');
			$event->return = $url->getUrl();
		});

		$this->addHook('Page::get_redirURL', function($event) {
			$p = $event->object;
			$url = new Url($p->fullURL->getUrl());
			$url->path = $p->child('template=redir')->url;
			$event->return = $url->getUrl();
		});

		$this->addHook('Page::get_finishpackURL', function($event) {
			$p = $event->object;
			$ordn = $event->arguments(0);
			$url = new Url($p->fullURL->getUrl());
			$url->path = $p->child('template=redir')->url;
			$url->query->set('action', 'finish-pack');
			$url->query->set('ordn', $ordn);
			$event->return = $url->getUrl();
		});
	}

	/* =============================================================
		Module Getter / Setter Functions
	============================================================= */

	/**
	 * Sets Session ID
	 * @param string $sessionID Session ID
	 */
	public function set_sessionID($sessionID) {
		$this->sessionID = $sessionID;
	}

	/**
	 * Sets Order Number
	 * @param string $ordn Sales Order Number
	 */
	public function set_ordn($ordn) {
		$this->ordn = $ordn;
	}

	/**
	 * Returns Ordn
	 * @return string
	 */
	public function get_ordn() {
		return $this->ordn;
	}

	/**
	 * Returns if Error had been saved to the $session property
	 * @return bool Does Session have Pack Error?
	 */
	public function has_error() {
		return strlen($this->session->packerror);
	}

	/**
	 * Returns Error Message
	 * @return string Error Message
	 */
	public function get_error() {
		return $this->session->packerror;
	}

/* =============================================================
	Order Functions
============================================================= */
	/**
	 * Returns URL for Sales Order Packing
	 * @return string Sales Order Packing URL
	 */
	public function get_orderURL() {
		return $this->wire('page')->url . "?ordn=$this->ordn";
	}
	 /**
	 * Return the number of Qnote objects based fitlered by Session ID, Order Number, Line Number and Show on Pack
	 * @return int
	 */
	public function count_packingnotes() {
		return QnoteQuery::create()->filterBySessionidOrdernbrLinenbr($this->sessionID, $this->ordn)->filterByShowSalesOrderPack()->count();
	}

	/**
	 * Return Qnote objects based fitlered by Session ID, Order Number, Line Number and Show on Pack
	 * @return Qnote[]|ObjectCollection
	 */
	public function get_packingnotes() {
		return QnoteQuery::create()->filterBySessionidOrdernbrLinenbr($this->sessionID, $this->ordn)->filterByShowSalesOrderPack()->find();
	}

	/**
	 * Returns the number of Sales Order Detail Lines to Pack
	 * @return int
	 */
	public function count_packsalesorderdetails() {
		return PackSalesOrderDetailQuery::create()->countBySessionidOrder($this->sessionID, $this->ordn);
	}

	/**
	 * Returns PackSalesOrderDetails for this session, order, line
	 * @return PackSalesOrderDetail[]|ObjectCollection
	 */
	public function get_packsalesorderdetails() {
		return PackSalesOrderDetailQuery::create()->findBySessionidOrderGrouped($this->sessionID, $this->ordn);
	}

	/**
	 * Return Whseitempack objects filtered by the sessionid, ordn columns
	 * @return Whseitempack[]|ObjectCollection
	 */
	public function get_packeditems() {
		$query = WhseitempackQuery::create();
		$query->filterBySessionidOrder($this->sessionID, $this->ordn);
		$query->groupBy(array('Carton', 'Linenumber', 'Lotserial'));
		return $query->find();
	}

/* =============================================================
	Detail Line Functions
============================================================= */
	/**
	 * Return Qty to ship for Line
	 * @param  int $linenbr Line Number
	 * @return int          Qty to ship
	 */
	public function get_line_qtytoship($linenbr) {
		return intval(PackSalesOrderDetailQuery::create()->get_line_qtytoship($this->sessionID, $this->ordn, $linenbr));
	}

	/**
	 * Return Qty packfor Line
	 * @param  int $linenbr Line Number
	 * @return int          Qty packed
	 */
	public function get_line_qtypacked($linenbr) {
		$query = WhseitempackQuery::create();
		return intval($query->get_orderline_qty($this->sessionID, $this->ordn, $linenbr));
	}

	/**
	 * Return Qty remaining for Line
	 * @param  int $linenbr Line Number
	 * @return int          Qty remaining
	 */
	public function get_line_qtyremaining($linenbr) {
		$to_ship = $this->get_line_qtytoship($linenbr);
		$qty_packed = $this->get_line_qtypacked($linenbr);
		return $to_ship - $qty_packed;
	}

	/**
	 * Return Description of PackSalesOrderDetail
	 * @param  int    $linenbr  Line Number
	 * @return string           Description
	 */
	public function get_packitemdescription($linenbr) {
		$query = PackSalesOrderDetailQuery::create();
		$query->select('Desc1');
		$query->filterBySessionidOrder($this->sessionID, $this->ordn);
		$query->filterByLinenbr($linenbr);
		return $query->findOne();
	}

	/**
	 * Returns the Whsesession for this Session ID
	 * @return Whsesession
	 */
	public function get_whsesession() {
		return WhsesessionQuery::create()->findOneBySessionid($this->sessionID);
	}

	/**
	 * Returns the Warehouse for this Whsesession
	 * @return Whsesession
	 */
	public function get_warehouseconfig() {
		$whsesession = $this->get_whsesession();
		return WhsesessionQuery::create()->findOneByWhseid($whsesession->whseid);
	}

	/**
	 * Return current Session's cartoncount value
	 * @return int Carton Count
	 */
	public function get_cartoncount() {
		return intval($this->wire('session')->cartoncount);
	}

	/**
	 * Return Itemtype for Item ID
	 * @param  string $itemID Item ID
	 * @return string         Item Type Code
	 */
	public function get_itemtypecode($itemID) {
		return ItemMasterItemQuery::create()->get_itemtype($itemID);
	}

	/**
	 * Initiates current Session's cartoncount value
	 * Gets the carton count from Whseitempack table, by getting MAX(carton)
	 * if not then start at 1
	 * @return void
	 */
	public function init_cartoncount() {
		if (!$this->wire('session')->cartoncount) {
			$count = WhseitempackQuery::create()->get_maxcarton($this->sessionID, $this->ordn);
			$count = !empty($count) ? $count : 1;
			$this->wire('session')->cartoncount = $count;
		}

	}

	/**
	 * Sends HTTP GET request to save the box
	 * @param  int    $box Box Number
	 * @return void
	 */
	public function send_savepackboxrequest($box = 1) {
		$http = new WireHttp();
		$url = new Url($this->wire('pages')->get('pw_template=whse-packing')->child('template=redir')->url);
		$url->query->set('action', 'save-packing-box');
		$url->query->set('sessionID', $this->sessionID);
		$url->query->set('ordn', $this->ordn);
		$url->query->set('box', $box);
		$http->get('127.0.0.1'.$url->getUrl());
	}

	/**
	 * Takes the Wire Input and decides which action to take based on the
	 * action given
	 * @param  WireInput $input Values to pull from
	 * @return void
	 */
	public function handle_barcodeaction(WireInput $input) {
		if ($input->requestMethod('POST')) {
			$action = $input->post->text('action');

			switch ($action) {
				case 'add-barcode':
					$this->add_barcode($input);
					break;
				case 'edit-barcode':
					$this->edit_barcode_qty($input);
					$this->send_savepackboxrequest($input->post->int('carton'));
					break;
				case 'delete-barcode':
					$this->delete_barcode_qty($input);
					$this->send_savepackboxrequest($input->post->int('carton'));
					break;
			}
		} else {
			$action = $input->get->text('action');

			switch ($action) {
				case 'add-box':
					$this->wire('session')->cartoncount++;
					$this->wire('page')->fullURL->query->remove('action');
					$this->wire('page')->fullURL->query->remove('box');
					//$this->wire('page')->fullURL->query->set('box', $this->wire('session')->cartoncount);
					break;
			}
		}
	}

	/**
	 * Add Barcode for Item
	 * @param WireInput $input
	 */
	public function add_barcode(WireInput $input) {
		$is_valid = false;
		$values  = $input->post;
		$barcode = $values->text('barcode');

		$packquery = PackSalesOrderDetailQuery::create()->filterBySessionidOrder($this->sessionID, $this->ordn);

		// ADD BARCODE / ITEM LOOKUP
		$invquery = InvsearchQuery::create();
		$invquery->filterBySessionid($this->sessionID);

		// SEE IF SCAN CAN BE FOUND ON ITEMID OR LOTSERIAL
		$invquery->where('Invsearch.Itemid = ?', $barcode)->_or()->where('Invsearch.Lotserial LIKE ?', $barcode);

		if ($invquery->count()) {
			$invitem = $invquery->findOne();

			if ($values->linenbr) {
				$packquery->filterByLinenbr($values->int('linenbr'));
			}
			$packquery->filterByItemid($invitem->itemid);

			if ($packquery->count()) {
				$is_valid = false;
				$packline = $packquery->findOne();
				$is_valid = $this->validate_canpack($packline, $invitem, $input);

				if ($is_valid) {
					$this->add_whseitempack($packline, $input);
					$this->send_savepackboxrequest($input->post->int('carton'));
				}
			} else {
				$this->session->packerror = "Scan: $barcode doesn't match anything for any items on this order";
			}
		} else {
			if ($values->int('linenbr') <= $packquery->count()) {
				$linenbr = $values->int('linenbr');
				$packquery->filterByLinenbr($values->int('linenbr'));
				$packline = $packquery->findOne();

				if ($packline->is_item_nonstock() && $values->text('barcode') == 'N') {
					$this->add_whseitempack($packline, $input);
					$this->send_savepackboxrequest($input->post->int('carton'));
				} else {
					$this->session->packerror = "Scan: $barcode doesn't match anything for Line $linenbr ($packline->itemid)";
				}
			} else {
				$this->session->packerror = "Scan: $barcode doesn't match anything for any items in this order";
			}
		}
	}

	/**
	 * Returns if $input can be packed
	 *
	 * Validates using Inventory, SerialNbr Lookup
	 * @param  PackSalesOrderDetail $packitem Detail Line that is to be packed
	 * @param  Invsearch            $invitem  Inventory Item
	 * @param  WireInput            $input    Input values
	 * @return bool                           Can Item be packed?
	 */
	public function validate_canpack(PackSalesOrderDetail $packitem, Invsearch $invitem, WireInput $input) {
		$values  = $input->post;
		$is_valid = false;

		if ($this->config->inventory->allow_negativeinventory) {
			$is_valid = true;
		} else { // VALIDATE INVENTORY
			$inventoryquery = InvsearchQuery::create();
			$packbinqty = $inventoryquery->get_binqty($this->sessionID, $invitem, 'PACK');

			if ($packbinqty < $values->qty) {
				$is_valid = false;
				$this->session->packerror = "PACK bin only has $packbinqty, you tried to add $values->qty of " . $invitem->get_itemidentifier();
			}
		}

		if ($packitem->is_item_serialized()) {
			$serialnbr = $values->text('barcode');
			$query = WhseitempackQuery::create();
			$query->filterBySessionidOrder($this->sessionID, $this->ordn);
			$query->filterByLotserial($serialnbr);

			if ($query->count() > 0) {
				$is_valid = false;
				$this->session->packerror = "$serialnbr has already been packed for Line $packitem->linenbr ($packitem->itemid)";
			}
		}
		return $is_valid;
	}

	/**
	 * Adds WhseItemPack record for PackSalesOrderDetail line
	 * @param PackSalesOrderDetail $packitem Detail Line that is to be packed
	 * @param WireInput            $input    Input values e.g. carton, qty, barcode
	 */
	public function add_whseitempack(PackSalesOrderDetail $packitem, WireInput $input) {
		$packing_master = WhseitempackQuery::create();

		$values  = $input->post;
		$barcode = $values->text('barcode');
		$carton  = $values->int('carton');
		$qty     = $values->int('qty');
		$found_pack = false;

		if ($packitem->is_item_serialized() || $packitem->is_item_lotted()) {
			$found_pack = $packing_master->filterBySessionidOrderLinenbr($packitem->sessionid, $packitem->ordn, $packitem->linenbr)->filterByCarton($carton)->filterByLotserial($barcode)->count();
			$item = $packing_master->filterBySessionidOrderLinenbr($packitem->sessionid, $packitem->ordn, $packitem->linenbr)->filterByCarton($carton)->filterByLotserial($barcode)->findOne();

			if ($packitem->is_item_serialized()) {
				$qty = 1;
			} else {
				$qty = $qty + $item->qty;
			}
		} else {
			$found_pack = $item = $packing_master->filterBySessionidOrderLinenbr($packitem->sessionid, $packitem->ordn, $packitem->linenbr)->filterByCarton($carton)->count();
			$item = $packing_master->filterBySessionidOrderLinenbr($packitem->sessionid, $packitem->ordn, $packitem->linenbr)->filterByCarton($carton)->findOne();
			$qty = $qty + $item->qty;
		}

		if (!$found_pack) {
			$item = new Whseitempack();
			$item->setSessionid($packitem->sessionid);
			$item->setOrdn($packitem->ordn);
			$item->setItemid($packitem->itemid);
			$item->setRecordnumber($packing_master->get_max_carton_recordnumber($packitem->sessionid, $packitem->ordn, $carton) + 1);
			$item->setCarton($carton);
			$item->setLinenumber($packitem->linenbr);
		}

		$item->setQty($qty);

		if ($packitem->is_item_serialized() || $packitem->is_item_lotted()) {
			$item->setLotserial($barcode);
		}

		$item->save();
	}

	/**
	 * Deletes an Whseitempack record
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function edit_barcode_qty(WireInput $input) {
		$values = $input->post;
		$linenbr   = $values->int('linenbr');
		$recordnbr = $values->int('recordnbr');
		$carton    = $values->int('carton');
		$qty       = $values->int('qty');

		$packing_master = WhseitempackQuery::create();
		$packing_master->filterBySessionidOrdnLinenbrRecordnumber($this->sessionID, $this->ordn, $linenbr, $recordnbr);
		$packing_master->filterByCarton($carton);
		$item = $packing_master->findOne();
		$item->setQty($qty);
		$item->save();
	}

	/**
	 * Deletes an Whseitempack record
	 * @param  WireInput $input Values for barcode, record, qty
	 * @return void
	 */
	public function delete_barcode_qty(WireInput $input) {
		$values = $input->post;
		$linenbr   = $values->int('linenbr');
		$recordnbr = $values->int('recordnbr');
		$carton    = $values->int('carton');

		$packing_master = WhseitempackQuery::create();
		$packing_master->filterBySessionidOrdnLinenbrRecordnumber($this->sessionID, $this->ordn, $linenbr, $recordnbr);
		$packing_master->filterByCarton($carton);
		$item = $packing_master->findOne();
		$item->delete();
	}
}
