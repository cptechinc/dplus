<?php namespace ProcessWire;

use Purl\Url;
use SalesOrderQuery, SalesOrder;
use OrdrhedQuery, Ordrhed;
use StatesQuery, States;
use ShipviaQuery, Shipvia;
use CustomerShiptoQuery, CustomerShipto;
use WarehouseQuery, Warehouse;

class SalesOrderEdit extends WireData implements Module {

	protected $ordn;

	public function init() {
		/**
		 * Returns Sales Order Page URL
		 */
		$this->addHook('Page::unlock_orderURL', function($event) {
			$ordn = $event->arguments(0);
			$url = new Url($this->wire('pages')->get('template=dplus-menu,name=mso')->child('template=redir')->url);
			$url->query->set('action', 'unlock-order');
			$url->query->set('ordn', $ordn);
			$event->return = $url->getUrl();
		});

		/**
		 * Adds self::is_user_editingorder() as User hook
		 * @uses self::is_user_editingorder()
		 */
		$this->addHook('Page::remove_itemURL', function($event) {
			$p = $event->object;
			$ordn = $event->arguments(0);
			$linenbr = $event->arguments(1);
			$url = new Url($this->wire('pages')->get('template=dplus-menu,name=mso')->child('template=redir')->url);
			$url->query->set('action', 'remove-line');
			$url->query->set('ordn', $ordn);
			$url->query->set('linenbr', $linenbr);
			$event->return = $url->getUrl();
		});
	}

	/**
	 * Returns if Sales Order Customer has been defined
	 *
	 * @return bool
	 */
	public function has_ordn() {
		return boolval($this->ordn);
	}

	/**
	 * Returns Static Sales Order
	 *
	 * @return SalesOrder
	 */
	public function get_order_static() {
		return SalesOrderQuery::create()->filterByOrdernumber($this->ordn)->findOne();
	}

	/**
	 * Returns Editable Sales Order
	 *
	 * @return Ordrhed
	 */
	public function get_order_edit() {
		return OrdrhedQuery::create()->findOneBySessionidOrder(session_id(), $this->ordn);
	}

	/**
	 * Sets Order Number
	 *
	 * @return string
	 */
	public function set_ordn($ordn) {
		$this->ordn = $ordn;
	}

	/**
	 * Return US States
	 * @return States[]|ObjectCollection
	 */
	public function get_states() {
		return StatesQuery::create()->select(['name', 'abbreviation'])->find();
	}

	/**
	 * Return Shipvias
	 * @return Shipvia[]|ObjectCollection
	 */
	public function get_shipvias() {
		return ShipviaQuery::create()->find();
	}

	/**
	 * Return Warehouses
	 * @return Warehouse[]|ObjectCollection
	 */
	public function get_warehouses() {
		return WarehouseQuery::create()->find();
	}

	/**
	 * Gets the Shipto address in an array format to be easily converted to JSON
	 * NOTE: used for JS
	 * @return array
	 */
	public function get_shiptos_json_array() {
		$custID = $this->get_custid();
		$columns = array('id', 'name', 'address', 'address2', 'city', 'state', 'zip');

		$query = CustomerShiptoQuery::create();

		foreach ($columns as $column) {
			$query->addAsColumn($column, CustomerShipto::get_aliasproperty($column));
		}
		$query->select($columns);
		$query->filterByCustid($custID);
		$shiptos = $query->find();
		return $shiptos->toArray('id');
	}

	/**
	 * Return Customer ID from Sales Order
	 * @return string Customer ID
	 */
	public function get_custid() {
		return  SalesOrderQuery::create()->select(SalesOrder::get_aliasproperty('custid'))->findOneByOrdernumber($this->ordn);
	}

	/**
	 * Sends HTTP GET request to send Dplus Item Search Request
	 * @param  string $q Query or Item ID
	 * @return void
	 */
	public function request_itemsearch($q) {
		$http = new WireHttp();
		$url = new Url('127.0.0.1');
		$url->path = $this->wire('pages')->get('template=redir,redir_file=ii')->url;
		$url->query->set('action', 'item-search');
		$url->query->set('q', $q);
		$url->query->set('custID', $this->get_custid());
		$url->query->set('sessionID', session_id());
		$http->get($url->getUrl());
	}


/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Sales Order Edit Module',
			'version' => 101,
			'summary' => 'Handles Dpluso Sales Order Edit',
			'singular' => true,
			'autoload' => true,
		);
	}
}
