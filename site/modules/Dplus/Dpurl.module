<?php namespace ProcessWire;

use Purl\Url as Purl;

class Dpurl extends WireData implements Module {

	/**
	 * Add Pagination to Url
	 * @param  Purl    $url
	 * @param  string  $segment Segment to place pagination segment after
	 * @param  int     $pagenbr Page Number
	 * @return Purl
	 */
	public function paginate(Purl $url, $segment, $pagenbr = 1) {
		$path = $url->getPath();
		$path = rtrim($path, '/').'/';

		if (strpos($path, 'page') !== false) {
			$regex = "((page)\d{1,3})";
			$replace = ($pagenbr > 1) ? "page".$pagenbr : "";
			$path  = preg_replace($regex, $replace, $path);
		} else {
			$insertafter = "/$segment/";
			$regex = "(($insertafter))";
			$replace = ($pagenbr > 1) ? $insertafter."page".$pagenbr."/" : $insertafter;
			$path  = preg_replace($regex, $replace, $path);
		}
		$url->path = $path;
		return $url;
	}

	/**
	 * Paginate Url by adding pagination to the last segment
	 * @param  Purl   $url
	 * @param  int    $pagenbr  Page Number
	 * @return Purl
	 */
	public function paginateSimple(Purl $url, $pagenbr = 1) {
		$path = $url->getPath();
		$path = rtrim($path, '/').'/';
		$segments = $url->path->getData();
		$segment = $segments[count($segments) - 1];

		return $this->paginate($url, $segment, $pagenbr);
	}

/* =============================================================
	Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpurl URL ',
			'version' => 101,
			'summary' => 'Wrapper for Purl\Url',
			'singular' => true,
			'autoload' => true,
		);
	}
}
