<?php namespace ProcessWire;

include_once(__DIR__.'/../CodeTablesResponse.php');

use Purl\Url;

use MotorFreightCodeQuery, MotorFreightCode;

/**
 * Module that handles the editing of the MFCM codetable
 */
class CodeTablesMfcm extends WireData implements Module {
	const MODEL              = 'MotorFreightCode';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Motor Freight Code';
	const DESCRIPTION_RECORD = 'Motor Freight Code';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return the Code records from Database
	 * @param  string $table Table Code
	 * @return ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the IDs for the Motor Freight Codes
	 * @return array
	 */
	public function get_codes_ids() {
		$q = $this->get_query();
		$q->select(MotorFreightCode::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Returns the associated ModelQuery class for table code
	 * @param  string $table Table Code
	 * @return mixed
	 */
	public function get_query() {
		return MotorFreightCodeQuery::create();
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * NOTE: If an existing code is more than MotorFreightCode::MAX_LENGTH_CODE, we will allow editing
	 * but we won't allow creation of a code with more than allowed characters we will trim it.
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$table = $input->$rm->text('table');
		$code  = $input->$rm->text('code');

		$q = $this->get_query();
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => MotorFreightCode::MAX_LENGTH_CODE));
			$record = new MotorFreightCode();
			$record->setCode($code);
		}

		if ($input->$rm->text('action') == 'remove-code') {
			$record->delete();
		} else {
			$description = $input->$rm->text('description');
			$description2 = $input->$rm->text('description2');
			$description3 = $input->$rm->text('description3');
			$description4 = $input->$rm->text('description4');
			$class = $input->$rm->text('motorclass');
			$record->setDescription($description);
			$record->setDescription2($description2);
			$record->setDescription3($description3);
			$record->setDescription4($description4);
			$record->setClass($class);
			$record->setDate(date('Ymd'));
			$record->setTime(date('His'));
			$record->setDummy('P');
		}

		$this->wire('session')->response_codetable = $this->save_and_process_response($table, $code, $record);
	}

	/**
	 * Returns CodeTablesResponse based on the outcome of the database save
	 *
	 * @param  string $table  Table Code
	 * @param  string $code   Code being added
	 * @param  bool   $is_new Was the Record in the database before Save?
	 * @param  bool   $saved  Was the Record Saved?
	 * @return CodeTablesResponse
	 */
	protected function save_and_process_response($table, $code, MotorFreightCode $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new CodeTablesResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(CodeTablesResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(CodeTablesResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}
		return $response;
	}

	/**
	 * Return the Max Length of characters for the code
	 * NOTE: Used for the JS
	 * @return int
	 */
	public function get_max_length_code() {
		return MotorFreightCode::MAX_LENGTH_CODE;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus MFCM Code Table CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for the MFCM code table',
			'singular' => true,
			'autoload' => true,
		);
	}
}
