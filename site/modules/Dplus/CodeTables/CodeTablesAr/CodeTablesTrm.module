<?php namespace ProcessWire;

include_once(__DIR__.'/../CodeTablesResponse.php');

use Purl\Url;

use CustomerTermsCodeQuery, CustomerTermsCode;

/**
 * Module that handles the editing of the CCM codetable
 */
class CodeTablesTrm extends WireData implements Module {
	const MODEL              = 'CustomerTermsCode';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Customer Terms Code';
	const DESCRIPTION_RECORD = 'Customer Terms Code';
	const TABLE              = 'trm';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Returns the associated ModelQuery class for table code
	 * @param  string $table Table Code
	 * @return mixed
	 */
	public function get_query() {
		return CustomerTermsCodeQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return the Code records from Database
	 * @return CustomerTermsCode[]|ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the IDs for the Customer Terms Codes
	 * @return array
	 */
	public function get_codes_ids() {
		$q = $this->get_query();
		$q->select(CustomerTermsCode::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Return the Code
	 * @param  string $code Customer Terms Code
	 * @return CustomerTermsCode
	 */
	public function get_code($code) {
		$q = $this->get_query();
		return $q->findOneByCode($code);
	}

	/**
	 * Gets / Creates Code
	 * @param  string $code Customer Terms Code Code
	 * @return CustomerTermsCode
	 */
	public function get_create_code($code) {
		if ($this->code_exists($code)) {
			$record = $this->get_code($code);
		} else {
			$record = CustomerTermsCode::new();
			$record->setCode($code);
		}
		return $record;
	}

	/**
	 * Return if the Code Exists
	 * @param  string $code Customer Terms Code
	 * @return bool
	 */
	public function code_exists($code) {
		$q = $this->get_query();
		return boolval($q->filterByCode($code)->count());
	}

	/**
	 * Returns a new CustomerTermsCode
	 * @return CustomerTermsCode
	 */
	public function get_new_code() {
		return new CustomerTermsCode();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$table = $input->$rm->text('table');
		$code  = $input->$rm->text('code');

		$q = $this->get_query();
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => CustomerTermsCode::MAX_LENGTH_CODE));
			$record = new CustomerTermsCode;
			$record->setCode($code);
		}

		if ($input->$rm->action) {
			$recordlocker = $this->wire('modules')->get('RecordLockerUser');

			/**
			 * Create lock for TRM code if not already locked.
			 */
			if (!$recordlocker->function_locked('trm', $code)) {
				$recordlocker->create_lock('trm', $code);
			}

			if ($record->isNew() || $recordlocker->function_locked_by_user('trm', $code)) {
				if ($input->$rm->text('action') == 'remove-code') {
					$record->delete();
				} elseif ($input->$rm->text('action') == 'update-trm') {
					$this->update_record_input($record, $input);
				}
				$response = $this->save_and_process_response($table, $code, $record);
			} else {
				$message = self::DESCRIPTION_RECORD . " ($code) was not updated because it is locked by " . $recordlocker->get_locked_user('trm', $code);
				$response = $this->create_error_response($code, $message);
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " ($code) was not updated ";
			$response = $this->create_error_response($code, $message);
		}
		$this->wire('session')->response_codetable = $response;
	}

	/**
	 * Updates Record with Input Values
	 * @param  CustomerTermsCode $record Customer Terms Code
	 * @param  WireInput $input  Input Data
	 * @return void
	 */
	protected function update_record_input(CustomerTermsCode $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		// $na = $input->$rm->text('na'); TODO: Alumacraft has N/A field
		//$record->setNa($na);

		$record->setDescription($values->text('description'));
		$record->setMethod($values->text('method'));
		$record->setType($values->text('type'));
		$record->setHold($values->text('hold'));
		$record->setCc_prefix($values->text('credit_card'));
		if ($values->text('method') == 'E') {
			$record->setFreight_allow('');
		} else if ($values->text('method') == 'S') {
			if ($values->text('freight_allow')) {
				$record->setFreight_allow($values->text('freight_allow'));
			} else {
				$record->setFreight_allow('N');
			}
		}
		// $record->setFreight_allow($values->text('freight_allow'));
		$record->setCountry($values->text('country'));
		$this->update_record_split_columns_standard($record, $input);
		$this->update_record_split_columns_eom($record, $input);

		$exp_date = $values->text('exp_date') ? date('Ymd', strtotime($values->text('exp_date'))) :  '00000000';
		$record->setExp_date($exp_date);
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		$record->setDummy('P');
	}

	/**
	 * Updates the Splits
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	protected function update_record_split($record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$split = 1;

		for ($i = 1; $i < CustomerTermsCode::STANDARD_TERMS_SPLIT + 1; $i++) {
			$function = "setSplit$i";

			$record->$function($i);
		}
	}

	/**
	 * Updates all the Standard Split Columns
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	protected function update_record_split_columns_standard(CustomerTermsCode $record, WireInput $input) {
		$cols = array(
			'day', 'days',
			'date',
			'percent',
			'due_days', 'due_day',
			'due_months',
			'due_year',
		);

		foreach ($cols as $col) {
			$this->update_record_split_column_standard($record, $input, $col);
		}
		$this->update_record_split($record, $input);
		$this->update_record_orderpercent($record, $input);
		$this->update_record_due_date($record, $input);
	}

	/**
	 * Updates the Record Column at each standard terms index e.g split1
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	protected function update_record_split_column_standard(CustomerTermsCode $record, WireInput $input, $column) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < CustomerTermsCode::STANDARD_TERMS_SPLIT + 1; $i++) {
			$function = 'set'.ucfirst($column).$i;
			$value = $values->text("$column$i");
			$record->$function($value);
		}
	}

	/**
	 * Updates all the Record's Order Percent Columns
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	public function update_record_orderpercent(CustomerTermsCode $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < CustomerTermsCode::STANDARD_TERMS_SPLIT + 1; $i++) {
			$function = "setOrder_percent$i";

			if ($i == 1) {
				$percent = $values->text('method') == 'S' ? $values->text("order_percent$i") : 0;
			} else {
				$percent = $values->text("order_percent$i");
			}
			$record->$function($percent);
		}
	}

	/**
	 * Updates all the Record's Due Date Columns
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	public function update_record_due_date(CustomerTermsCode $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < CustomerTermsCode::STANDARD_TERMS_SPLIT + 1; $i++) {
			$function = "setDue_date$i";
			$day = $values->text("due_date$i") ? $values->text("due_date$i") : 0;
			$record->$function($day);
		}
	}

	/**
	 * Updates all the EOM Split Columns
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	protected function update_record_split_columns_eom($record, WireInput $input) {
		$cols = array(
			'from_day', 'thru_day',
			'eom_percent',
			'eom_day',
			'eom_disc_months',
			'eom_dueday',
			'eom_months'
		);

		foreach ($cols as $col) {
			$this->update_record_split_column_eom($record, $input, $col);
		}
		$this->update_record_percent_eom($record, $input);
		$this->update_record_orderpercent($record, $input);
		$this->update_record_due_date($record, $input);
	}


	/**
	 * Updates all the column indexes for this column
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	protected function update_record_split_column_eom($record, WireInput $input, $column) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < CustomerTermsCode::EOM_TERMS_SPLIT + 1; $i++) {
			$function = 'set'.ucfirst($column).$i;
			$value = $values->text("$column$i");
			$record->$function($value);
		}
	}

	/**
	 * updates all the EOM percent Columns
	 * @param  CustomerTermsCode  $record Customer Terms Code
	 * @param  WireInput $input   Input Data
	 * @return void
	 */
	public function update_record_percent_eom($record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < CustomerTermsCode::EOM_TERMS_SPLIT + 1; $i++) {
			$function = "setOrder_percent$i";

			if ($i == 1) {
				$percent = $values->text('method') == 'e' ? $values->text("eom_percent$i") : 0;
			} else {
				$percent = $values->text("eom_percent$i");
			}
			$record->$function($percent);
		}
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns CodeTablesResponse based on the outcome of the database save
	 *
	 * @param  string $table  Table Code
	 * @param  string $code   Code being added
	 * @param  bool   $is_new Was the Record in the database before Save?
	 * @param  bool   $saved  Was the Record Saved?
	 * @return CodeTablesResponse
	 */
	protected function save_and_process_response($table, $code, CustomerTermsCode $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new CodeTablesResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(CodeTablesResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(CodeTablesResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}
		return $response;
	}

	/**
	 * Return Error Response with Provided Message
	 * @param  string $code     Code ID
	 * @param  string $message    Error Message
	 * @param  int    $actiontype CodeTablesResponse CRUD value
	 * @return CodeTablesResponse
	 */
	public function create_error_response($code, $message, $actiontype = 0) {
		$response = new CodeTablesResponse();
		$response->set_key($code);
		$response->set_error(true);
		$response->set_action($actiontype != 0 ? $actiontype : CodeTablesResponse::CRUD_UPDATE);
		$response->set_message($message);
		return $response;
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return the number of splits allowed for Standard Terms Dsicount
	 * @return int
	 */
	public function count_standardterms_split() {
		return CustomerTermsCode::STANDARD_TERMS_SPLIT;
	}

	/**
	 * Return the number of splits allowed for EOM Terms Dsicount
	 * @return int
	 */
	public function count_eomterms_split() {
		return CustomerTermsCode::EOM_TERMS_SPLIT;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus TRM Code Table CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for the TRM code table',
			'singular' => true,
			'autoload' => true,
		);
	}
}
