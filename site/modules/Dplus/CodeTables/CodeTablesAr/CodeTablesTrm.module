<?php namespace ProcessWire;

include_once(__DIR__.'/../CodeTablesResponse.php');

use Purl\Url;

use CustomerTermsCodeQuery, CustomerTermsCode;

/**
 * Module that handles the editing of the CCM codetable
 */
class CodeTablesTrm extends WireData implements Module {
	const MODEL              = 'CustomerTermsCode';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Customer Terms Code';
	const DESCRIPTION_RECORD = 'Customer Terms Code';
	const TABLE              = 'trm';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return the Code records from Database
	 * @return CustomerTermsCode[]|ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the Code
	 * @param  string $code Customer Terms Code
	 * @return CustomerTermsCode
	 */
	public function get_code($code) {
		$q = $this->get_query();
		return $q->findOneByCode($code);
	}

	/**
	 * Return if the Code Exists
	 * @param  string $code Customer Terms Code
	 * @return bool
	 */
	public function code_exists($code) {
		$q = $this->get_query();
		return boolval($q->filterByCode($code)->count());
	}

	/**
	 * Returns a new CustomerTermsCode
	 * @return CustomerTermsCode
	 */
	public function get_new_code() {
		return new CustomerTermsCode();
	}

	/**
	 * Returns the associated ModelQuery class for table code
	 * @param  string $table Table Code
	 * @return mixed
	 */
	public function get_query() {
		return CustomerTermsCodeQuery::create();
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$table = $input->$rm->text('table');
		$code  = $input->$rm->text('code');

		$q = $this->get_query();
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => CustomerTermsCode::MAX_LENGTH_CODE));
			$record = new CustomerTermsCode();
			$record->setCode($code);
		}

		if ($input->$rm->action) {
			$recordlocker = $this->wire('modules')->get('RecordLockerUser');

			/**
			 * Create lock for TRM code if not already locked.
			 */
			if (!$recordlocker->function_locked('trm', $code)) {
				$recordlocker->create_lock('trm', $code);
			}

			if ($record->isNew() || $recordlocker->function_locked_by_user('trm', $code)) {
				if ($input->$rm->text('action') == 'remove-code') {
					$record->delete();
				} elseif ($input->$rm->text('action') == 'update-trm') {
					$description = $input->$rm->text('description');
					$method = $input->$rm->text('method');
					$type = $input->$rm->text('type');
					$hold = $input->$rm->text('hold');
					$exp_date = $input->$rm->text('exp_date');
					// $credit_card = $input->$rm->text('credit_card'); TODO: need correct code.credit_card
					// $freight = $input->$rm->text('freight'); TODO: need correct code.freight
					$country = $input->$rm->text('country');
					// $na = $input->$rm->text('na'); TODO: Alumacraft has N/A field
					$order_percent1 = $input->$rm->text('order_percent1');
					$percent1 = $input->$rm->text('percent1');
					$days1 = $input->$rm->text('days1');
					$day1 = $input->$rm->text('day1');
					$date1 = $input->$rm->text('date1');
					$due_days1 = $input->$rm->text('due_days1');
					$due_day1 = $input->$rm->text('due_day1');
					$due_months1 = $input->$rm->text('due_months1');
					$due_date1 = $input->$rm->text('due_date1');
					$due_year1 = $input->$rm->text('due_year1');
					$order_percent2 = $input->$rm->text('order_percent2');
					$percent2 = $input->$rm->text('percent2');
					$days2 = $input->$rm->text('days2');
					$day2 = $input->$rm->text('day2');
					$date2 = $input->$rm->text('date2');
					$due_days2 = $input->$rm->text('due_days2');
					$due_day2 = $input->$rm->text('due_day2');
					$due_months2 = $input->$rm->text('due_months2');
					$due_date2 = $input->$rm->text('due_date2');
					$due_year2 = $input->$rm->text('due_year2');
					$order_percent3 = $input->$rm->text('order_percent3');
					$percent3 = $input->$rm->text('percent3');
					$days3 = $input->$rm->text('days3');
					$day3 = $input->$rm->text('day3');
					$date3 = $input->$rm->text('date3');
					$due_days3 = $input->$rm->text('due_days3');
					$due_day3 = $input->$rm->text('due_day3');
					$due_months3 = $input->$rm->text('due_months3');
					$due_date3 = $input->$rm->text('due_date3');
					$due_year3 = $input->$rm->text('due_year3');
					$order_percent4 = $input->$rm->text('order_percent4');
					$percent4 = $input->$rm->text('percent4');
					$days4 = $input->$rm->text('days4');
					$day4 = $input->$rm->text('day4');
					$date4 = $input->$rm->text('date4');
					$due_days4 = $input->$rm->text('due_days4');
					$due_day4 = $input->$rm->text('due_day4');
					$due_months4 = $input->$rm->text('due_months4');
					$due_date4 = $input->$rm->text('due_date4');
					$due_year4 = $input->$rm->text('due_year4');
					$order_percent5 = $input->$rm->text('order_percent5');
					$percent5 = $input->$rm->text('percent5');
					$days5 = $input->$rm->text('days5');
					$day5 = $input->$rm->text('day5');
					$date5 = $input->$rm->text('date5');
					$due_days5 = $input->$rm->text('due_days5');
					$due_day5 = $input->$rm->text('due_day5');
					$due_months5 = $input->$rm->text('due_months5');
					$due_date5 = $input->$rm->text('due_date5');
					$due_year5 = $input->$rm->text('due_year5');
					$order_percent6 = $input->$rm->text('order_percent6');
					$percent6 = $input->$rm->text('percent6');
					$days6 = $input->$rm->text('days6');
					$day6 = $input->$rm->text('day6');
					$date6 = $input->$rm->text('date6');
					$due_days6 = $input->$rm->text('due_days6');
					$due_day6 = $input->$rm->text('due_day6');
					$due_months6 = $input->$rm->text('due_months6');
					$due_date6 = $input->$rm->text('due_date6');
					$due_year6 = $input->$rm->text('due_year6');
					$from_day1 = $input->$rm->text('from_day1');
					$thru_day1 = $input->$rm->text('thru_day1');
					$eom_percent1 = $input->$rm->text('eom_percent1');
					$eom_day1 = $input->$rm->text('eom_day1');
					$eom_months1 = $input->$rm->text('eom_disc_months');
					$eom_dueday1 = $input->$rm->text('eom_dueday1');
					$eom_months1 = $input->$rm->text('eom_months1');
					$from_day2 = $input->$rm->text('from_day2');
					$thru_day2 = $input->$rm->text('thru_day2');
					$eom_percent2 = $input->$rm->text('eom_percent2');
					$eom_day2 = $input->$rm->text('eom_day2');
					$eom_months2 = $input->$rm->text('eom_disc_months2');
					$eom_dueday2 = $input->$rm->text('eom_dueday2');
					$eom_months2 = $input->$rm->text('eom_months2');
					$from_day3 = $input->$rm->text('from_day3');
					$thru_day3 = $input->$rm->text('thru_day3');
					$eom_percent3 = $input->$rm->text('eom_percent3');
					$eom_day3 = $input->$rm->text('eom_day3');
					$eom_months3 = $input->$rm->text('eom_disc_months3');
					$eom_dueday3 = $input->$rm->text('eom_dueday3');
					$eom_months3 = $input->$rm->text('eom_months3');

					$record->setDescription($description);
					$record->setMethod($method);
					$record->setType($type);
					$record->setHold($hold);
					$record->setExp_date($exp_date);
					// $record->setCredit_card($credit_card);
					// $record->setFreight($freight);
					$record->setCountry($country);
					// $record->setNa($na);
					$record->setOrder_percent1($order_percent1);
					$record->setPercent1($percent1);
					$record->setDays1($days1);
					$record->setDay1($day1);
					$record->setDate1($date1);
					$record->setDue_days1($due_days1);
					$record->setDue_day1($due_day1);
					$record->setDue_months1($due_months1);
					$record->setDue_date1($due_date1);
					$record->setDue_year1($due_year1);
					$record->setOrder_percent2($order_percent2);
					$record->setPercent2($percent2);
					$record->setDays2($days2);
					$record->setDay2($day2);
					$record->setDate2($date2);
					$record->setDue_days2($due_days2);
					$record->setDue_day2($due_day2);
					$record->setDue_months2($due_months2);
					$record->setDue_date2($due_date2);
					$record->setDue_year2($due_year2);
					$record->setOrder_percent3($order_percent3);
					$record->setPercent3($percent3);
					$record->setDays3($days3);
					$record->setDay3($day3);
					$record->setDate3($date3);
					$record->setDue_days3($due_days3);
					$record->setDue_day3($due_day3);
					$record->setDue_months3($due_months3);
					$record->setDue_date3($due_date3);
					$record->setDue_year3($due_year3);
					$record->setOrder_percent4($order_percent4);
					$record->setPercent4($percent4);
					$record->setDays4($days4);
					$record->setDay4($day4);
					$record->setDate4($date4);
					$record->setDue_days4($due_days4);
					$record->setDue_day4($due_day4);
					$record->setDue_months4($due_months4);
					$record->setDue_date4($due_date4);
					$record->setDue_year4($due_year4);
					$record->setOrder_percent5($order_percent5);
					$record->setPercent5($percent5);
					$record->setDays5($days5);
					$record->setDay5($day5);
					$record->setDate5($date5);
					$record->setDue_days5($due_days5);
					$record->setDue_day5($due_day5);
					$record->setDue_months5($due_months5);
					$record->setDue_date5($due_date5);
					$record->setDue_year5($due_year5);
					$record->setOrder_percent6($order_percent6);
					$record->setPercent6($percent6);
					$record->setDays6($days6);
					$record->setDay6($day6);
					$record->setDate6($date6);
					$record->setDue_days6($due_days6);
					$record->setDue_day6($due_day6);
					$record->setDue_months6($due_months6);
					$record->setDue_date6($due_date6);
					$record->setDue_year6($due_year6);
					$record->setFrom_day1($from_day1);
					$record->setThru_day1($thru_day1);
					$record->setEom_percent1($eom_percent1);
					$record->setEom_day1($eom_day1);
					$record->setEom_disc_months1($eom_disc_months1);
					$record->setEom_dueday1($eom_dueday1);
					$record->setEom_months1($eom_months1);
					$record->setFrom_day2($from_day2);
					$record->setThru_day2($thru_day2);
					$record->setEom_percent2($eom_percent2);
					$record->setEom_day2($eom_day2);
					$record->setEom_disc_months2($eom_disc_months2);
					$record->setEom_dueday2($eom_dueday2);
					$record->setEom_months2($eom_months2);
					$record->setFrom_day3($from_day3);
					$record->setThru_day3($thru_day3);
					$record->setEom_percent3($eom_percent3);
					$record->setEom_day3($eom_day3);
					$record->setEom_disc_months3($eom_disc_months3);
					$record->setEom_dueday3($eom_dueday3);
					$record->setEom_months3($eom_months3);
					$record->setDate(date('Ymd'));
					$record->setTime(date('His'));
					$record->setDummy('P');
				}
				$response = $this->save_and_process_response($table, $code, $record);
			} else {
				$response = new CodeTablesResponse();
				$response->set_key($code);
				$response->set_error(true);
				$response->set_action(CodeTablesResponse::CRUD_UPDATE);
				$message = self::DESCRIPTION_RECORD . " ($code) was not updated because it is locked by " . $recordlocker->get_locked_user('trm', $code);
				$response->set_message($message);
			}
		} else {
			$response = new CodeTablesResponse();
			$response->set_key($code);
			$response->set_error(true);
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
			$message = self::DESCRIPTION_RECORD . " ($code) was not updated ";
			$response->set_message($message);
		}
		$this->wire('session')->response_codetable = $response;
	}

	/**
	 * Returns CodeTablesResponse based on the outcome of the database save
	 *
	 * @param  string $table  Table Code
	 * @param  string $code   Code being added
	 * @param  bool   $is_new Was the Record in the database before Save?
	 * @param  bool   $saved  Was the Record Saved?
	 * @return CodeTablesResponse
	 */
	protected function save_and_process_response($table, $code, CustomerTermsCode $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new CodeTablesResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(CodeTablesResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(CodeTablesResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}

		return $response;
	}

	/**
	 * Return the number of splits allowed for Standard Terms Dsicount
	 * @return int
	 */
	public function count_standardterms_split() {
		return CustomerTermsCode::STANDARD_TERMS_SPLIT;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus TRM Code Table CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for the TRM code table',
			'singular' => true,
			'autoload' => true,
		);
	}
}
