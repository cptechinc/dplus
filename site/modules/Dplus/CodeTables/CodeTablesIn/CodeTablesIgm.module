<?php namespace ProcessWire;

include_once(__DIR__.'../CodeTablesResponse.php');

use Purl\Url;

use ItemGroupCodeQuery, ItemGroupCode;
use ConfigInQuery, ConfigIn;
use ConfigSalesOrderQuery, ConfigSalesOrder;
use ConfigArQuery, ConfigAr;

/**
 * Module that handles the editing of the CCM codetable
 */
class CodeTablesIgm extends WireData implements Module {
	const MODEL              = 'ItemGroupCode';
	const MODEL_KEY          = 'id';
	const DESCRIPTION        = 'Item Group';
	const DESCRIPTION_RECORD = 'Item Group';
	const MODEL_TABLE = 'inv_grup_code';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return the Code records from Database
	 * @param  string $table Table Code
	 * @return ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the Code records from Database filtered by ProductLne ID
	 * @param  string $productlne ProductLneID
	 * @return ObjectCollection
	 */
	public function get_code($stock) {
		$q = $this->get_query();
		return $q->findOneById($stock);
	}

	/**
	 * Returns if Codes Exists
	 * @param  string $productlne ProductLneID
	 * @return bool
	 */
	public function code_exists($stock) {
		$q = $this->get_query();
		return boolval($q->filterById($stock)->count());
	}

	/**
	 * Returns the associated ModelQuery class for table code
	 * @param  string $table Table Code
	 * @return mixed
	 */
	public function get_query() {
		return ItemGroupCodeQuery::create();
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * NOTE: If an existing code is more than ItemGroupCode::MAX_LENGTH_CODE, we will allow editing
	 * but we won't allow creation of a code with more than allowed characters we will trim it.
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$config_so = ConfigSalesOrderQuery::create()->findOne();
        $config_ar = ConfigArQuery::create()->findOne();
		$rm = strtolower($input->requestMethod());
		$table = $input->$rm->text('table');
		$code  = $input->$rm->text('code');

		$q = $this->get_query();
		$q->filterByCode($code);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$code  = $input->$rm->text('code', array('maxLength' => ItemGroupCode::MAX_LENGTH_CODE));
			$record = new ItemGroupCode();
			$record->setCode($code);
		}

		if ($input->$rm->text('action') == 'remove-code') {
			$record->delete();
		} else {
			$description = $input->$rm->text('description');
			$coop = $input->$rm->text('coop');
			// $ritm = $input->$rm->text('ritm');
			$sales = $input->$rm->text('sales');
			$credit = $input->$rm->text('credit');
			$cost_percent = $input->$rm->text('cost_percent');
			$inventory = $input->$rm->text('inventory');
			$drop_ship = $input->$rm->text('drop_ship');
			$surcharge = $input->$rm->text('surcharge');
			$surcharge_dollar_percent = $input->$rm->text('surcharge_dollar_percent');
			$surcharge_dollar_amount = $input->$rm->text('surcharge_dollar_amount');
			$surcharge_percent = $input->$rm->text('surcharge_percent');
			$freight_group = $input->$rm->text('freight_group');
			$product_line = $input->$rm->text('product_line');
			$ecomm_desc = $input->$rm->text('ecomm_desc');
			$record->setDescription($description);
			$record->setCoop($coop);
			// $record->setRitm($ritm);
			$record->setSales($sales);
			$record->setCredit($credit);
			$record->setCost_percent($cost_percent);
			$record->setInventory($inventory);
			$record->setDrop_ship($drop_ship);
			$record->setSurcharge($surcharge);
			$record->setSurcharge_dollar_percent($surcharge_dollar_percent);
			$record->setSurcharge_dollar_amount($surcharge_dollar_amount);
			$record->setSurcharge_percent($surcharge_percent);
			$record->setFreight_group($freight_group);
			$record->setProduct_line($product_line);
			$record->setEcomm_desc($ecomm_desc);
			$record->setDate(date('Ymd'));
			$record->setTime(date('His'));
			$record->setDummy('P');

			// TODO: show if company == Alumacraft as well
            if ($config_ar->is_web_group()) {
				$web_group = $input->$rm->text('web_group');
				$record->setWeb_group($web_group);
			}

			if ($config_so->is_request_program()) {
				$sales_program = $input->$rm->text('sales_program');
				$record->setSales_program($sales_program);
			}
		}

		$this->wire('session')->response_codetable = $this->save_and_process_response($table, $code, $record);
	}

	/**
	 * Returns CodeTablesResponse based on the outcome of the database save
	 *
	 * @param  string $table  Table Code
	 * @param  string $code   Code being added
	 * @param  bool   $is_new Was the Record in the database before Save?
	 * @param  bool   $saved  Was the Record Saved?
	 * @return CodeTablesResponse
	 */
	protected function save_and_process_response($table, $code, ItemGroupCode $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new CodeTablesResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(CodeTablesResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(CodeTablesResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}
		return $response;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus IGM Code Table CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for the IGM code table',
			'singular' => true,
			'autoload' => true,
		);
	}
}
