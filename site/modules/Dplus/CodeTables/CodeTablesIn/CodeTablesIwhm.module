<?php namespace ProcessWire;

include_once(__DIR__.'/../CodeTablesResponse.php');

use Purl\Url;

use WarehouseQuery, Warehouse;
use ConfigInQuery, ConfigIn;
use StatesQuery, States;
use CountryQuery, Country;

/**
 * Module that handles the editing of the IWHM codetable
 */
class CodeTablesIwhm extends WireData implements Module {
	const MODEL              = 'Warehouse';
	const MODEL_KEY          = 'id';
	const DESCRIPTION        = 'Warehouse';
	const DESCRIPTION_RECORD = 'Warehouse';
	const MODEL_TABLE = 'inv_whse_code';

	const COPY_TABLES = array(
		'inv_whse_orig' => 'IntbWhseOrig',
		'inv_whse_from' => 'IntbWhseFrom',
		'inv_whse_to'   => 'IntbWhseTo'
	);

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Returns the associated ModelQuery class for table code
	 * @param  string $table Table Code
	 * @return mixed
	 */
	public function get_query() {
		return WarehouseQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return the Code records from Database
	 * @param  string $table Table Code
	 * @return ObjectCollection
	 */
	public function get_codes() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return the IDs for the Warehouses
	 * @return array
	 */
	public function get_codes_ids() {
		$q = $this->get_query();
		$q->select(Warehouse::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Return the Code records from Database filtered by Warehouse ID
	 * @param  string $whseID WarehouseID
	 * @return ObjectCollection
	 */
	public function get_code($whseID) {
		$q = $this->get_query();
		return $q->findOneById($whseID);
	}

	/**
	 * Returns if Codes Exists
	 * @param  string $whseID WarehouseID
	 * @return bool
	 */
	public function code_exists($whseID) {
		$q = $this->get_query();
		return boolval($q->filterById($whseID)->count());
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input Calls handles input according to Action required
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$table  = $input->$rm->text('table');
		$whseID = $input->$rm->code ? $input->$rm->text('code') : $input->$rm->text('whseID');

		if ($input->$rm->text('action') == 'update-notes' || $input->$rm->text('action') == 'delete-notes') {
			$this->wire('modules')->get('CodeTablesIwhmNotes')->process_input($input);
		} else {
			$this->process_input_iwhm($input);
		}
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * NOTE: If an existing code is more than Warehouse::MAX_LENGTH_CODE, we will allow editing
	 * but we won't allow creation of a code with more than allowed characters we will trim it.
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_iwhm(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$table  = $input->$rm->text('table');
		$whseID = $input->$rm->code ? $input->$rm->text('code') : $input->$rm->text('whseID');

		$q = $this->get_query();
		$q->filterById($whseID);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$whseID  = $input->$rm->text('whseID', array('maxLength' => Warehouse::MAX_LENGTH_CODE));
			$record = new Warehouse();
			$record->setId($whseID);
		}

		if ($input->$rm->action) {
			$recordlocker = $this->wire('modules')->get('RecordLockerUser');

			/**
			 * Create lock for IWHM code if not already locked.
			 */
			if (!$recordlocker->function_locked('iwhm', $whseID)) {
				$recordlocker->create_lock('iwhm', $whseID);
			}

			if ($record->isNew() || $recordlocker->function_locked_by_user('iwhm', $whseID)) {
				if ($input->$rm->text('action') == 'remove-code') {
					$record->delete();

					if ($record->isDeleted()) {
						$notes_m = $this->wire('modules')->get('CodeTablesIwhmNotes');
						$notetypes = $notes_m->get_notetypes();

						foreach ($notetypes as $notetype) {
							$notes_m->delete_notes($notetype, $whseID);
						}
					}
				} else if ($input->$rm->text('action') == 'update-code') {
					$record->setName($input->$rm->text('name'));
					$this->update_warehouse_input($record, $input);
					$record->setDate(date('Ymd'));
					$record->setTime(date('His'));
					$record->setDummy('P');
				}
				$response = $this->save_and_process_response($table, $whseID, $record);
			} else {
				$response = new CodeTablesResponse();
				$response->set_key($whseID);
				$response->set_error(true);
				$response->set_action(CodeTablesResponse::CRUD_UPDATE);
				$message = self::DESCRIPTION_RECORD . " ($whseID) was not updated because it is locked by " . $recordlocker->get_locked_user('iwhm', $whseID);
				$response->set_message($message);
			}
		} else {
			$response = new CodeTablesResponse();
			$response->set_key($whseID);
			$response->set_error(true);
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
			$message = self::DESCRIPTION_RECORD . " ($whseID) was not updated";
			$response->set_message($message);
		}
		$this->wire('session')->response_codetable = $response;
	}

	/**
	 * Update Warehouse Record with Input Data
	 * @param  Warehouse  $warehouse
	 * @param  WireInput  $input     Input Data
	 * @return void
	 */
	public function update_warehouse_input(Warehouse $warehouse, WireInput $input) {
		$config_in = $this->get_config_in();
		$rm = strtolower($input->requestMethod());
		$warehouse->setAddress($input->$rm->text('address'));
		$warehouse->setAddress2($input->$rm->text('address2'));
		$warehouse->setCity($input->$rm->text('city'));
		$warehouse->setState($input->$rm->text('state'));
		$warehouse->setZip($input->$rm->text('zip'));
		$warehouse->setCountry($input->$rm->text('country'));
		$warehouse->setEmail($input->$rm->text('email'));
		$warehouse->setCash_customer($input->$rm->text('custID'));
		$warehouse->setPickdetail($input->$rm->text('pickdetail'));
		$warehouse->setBin_qcrga($input->$rm->text('bin_qcrga'));
		$warehouse->setConsignment($input->$rm->text('consignment'));

		$this->process_sub_warehouses($warehouse, $input);

		$warehouse->setArranged($input->$rm->text('arranged'));
		$warehouse->setPhone_ext($input->$rm->text('phone_ext'));

		$phone_arr = explode('-', $input->$rm->text('phone'));
		$warehouse->setPhone_area($phone_arr[0]);
		$warehouse->setPhone_prefix($phone_arr[1]);
		$warehouse->setPhone_line($phone_arr[2]);

		$fax_arr = explode('-', $input->$rm->text('fax'));
		$warehouse->setFax_area($fax_arr[0]);
		$warehouse->setFax_prefix($fax_arr[1]);
		$warehouse->setFax_line($fax_arr[2]);

		if ($config_in->use_controlbin()) {
			$warehouse->setBin_production($input->$rm->text('bin_production'));
		}
	}

	/**
	 * Sets the Profit, Asset, Supply Warehouses
	 * NOTE: if the value is "self", we will assign the current warehouse ID, as those values
	 * @param  Warehouse $warehouse Warehouse
	 * @param  WireInput $input     Input Data
	 * @return void
	 */
	public function process_sub_warehouses(Warehouse $warehouse, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$input->$rm->whse_profit = $input->$rm->text('whse_profit') == 'self' ? $warehouse->id : $input->$rm->text('whse_profit');
		$input->$rm->whse_supply = $input->$rm->text('whse_supply') == 'self' ? $warehouse->id : $input->$rm->text('whse_supply');
		$input->$rm->whse_asset  = $input->$rm->text('whse_asset')  == 'self' ? $warehouse->id : $input->$rm->text('whse_asset');

		$warehouse->setWhse_profit($input->$rm->text('whse_profit'));
		$warehouse->setWhse_asset($input->$rm->text('whse_asset'));
		$warehouse->setWhse_supply($input->$rm->text('whse_supply'));
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns CodeTablesResponse based on the outcome of the database save
	 *
	 * @param  string $table  Table Code
	 * @param  string $code   Code being added
	 * @param  bool   $is_new Was the Record in the database before Save?
	 * @param  bool   $saved  Was the Record Saved?
	 * @return CodeTablesResponse
	 */
	protected function save_and_process_response($table, $code, Warehouse $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new CodeTablesResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(CodeTablesResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(CodeTablesResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(CodeTablesResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->duplicate_copytables($record, $saved);
			$this->wire('modules')->get('CodeTables')->update_dplus_cobol($table, $code);
		}
		return $response;
	}

/* =============================================================
	Copy Table Functions
============================================================= */
	/**
	 * Duplicate Action of Warehouse into each copy table
	 * @param  Warehouse $warehouse
	 * @param  bool      $saved     Was Saved
	 * @return void
	 */
	public function duplicate_copytables(Warehouse $warehouse, bool $saved) {
		if ($saved) {
			if ($warehouse->isDeleted()) {
				foreach (array_keys(self::COPY_TABLES) as $table) {
					if ($this->does_copytable_whse_exist($table, $warehouse->id)) {
						$this->remove_copytable_whse($table, $warehouse->id);
					}
				}
			} else {
				foreach (array_keys(self::COPY_TABLES) as $table) {
					if ($this->does_copytable_whse_exist($table, $warehouse->id)) {
						$this->remove_copytable_whse($table, $warehouse->id);
					}
					$this->insertinto_copytable_whse($table, $warehouse->id);
				}
			}
		}
	}

	/**
	 * Checks if Warehouse Record exists in Copy Table
	 * @param  string $table  Copy Table
	 * @param  string $whseID Warehouse ID
	 * @return bool
	 */
	private function does_copytable_whse_exist($table, $whseID) {
		$q = WarehouseQuery::create();
		$col_whseid = self::COPY_TABLES[$table];
		$sql = "SELECT COUNT(*) FROM $table WHERE $col_whseid = :id";
		$params = array(':id' => $whseID);
		$result = $q->execute_query($sql, $params);
		return boolval($result->fetchColumn());
	}

	/**
	 * Removes Warehouse Record exists in Copy Table
	 * @param  string $table  Copy Table
	 * @param  string $whseID Warehouse ID
	 * @return bool
	 */
	private function remove_copytable_whse($table, $whseID) {
		$q = WarehouseQuery::create();
		$col_whseid = self::COPY_TABLES[$table];
		$sql = "DELETE FROM $table WHERE $col_whseid = :id";
		$params = array(':id' => $whseID);
		return $q->execute_query($sql, $params);
	}

	/**
	 * Inserts Warehouse Record exists in Copy Table
	 * @param  string $table  Copy Table
	 * @param  string $whseID Warehouse ID
	 * @return bool
	 */
	private function insertinto_copytable_whse($table, $whseID) {
		$q = WarehouseQuery::create();
		$model_table = self::MODEL_TABLE;
		$col_whseid = Warehouse::get_aliasproperty('id');
		$sql = "INSERT INTO $table (SELECT * FROM inv_whse_code WHERE $col_whseid = :id)";
		$params = array(':id' => $whseID);
		return $q->execute_query($sql, $params);
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return States
	 * @return States[]|ObjectCollection
	 */
	public function get_states() {
		return StatesQuery::create()->find();
	}

	/**
	 * Return Countries
	 * @return Country[]|ObjectCollection
	 */
	public function get_countries() {
		return CountryQuery::create()->find();
	}

	/**
	 * Return ConfigIn
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return ConfigInQuery::create()->findOne();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus IWHM Code Table CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for the IWHM code table',
			'singular' => true,
			'autoload' => true,
		);
	}
}
