<?php namespace ProcessWire;

	use PurchaseOrderQuery, PurchaseOrder;
	use PurchaseOrderDetailQuery, PurchaseOrderDetail;

	use Propel\Runtime\ActiveQuery\Criteria;

	class FilterPurchaseOrders extends WireData implements Module {

		/**
		 * Query
		 * @var PurchaseOrderQuery
		 */
		protected $query;

		/**
		 * Returns Query
		 * @return PurchaseOrderQuery
		 */
		public function get_query() {
			return $this->query;
		}

		/**
		 * Initializes Query
		 * NOTE: Filters by Sales Rep if provided user is a Sales rep
		 *
		 * @param  User   $user User to Check if they are a Sales Person
		 * @return void
		 */
		public function init_query(User $user) {
			$this->query = PurchaseOrderQuery::create();

		}

		/**
		 * Applies Filters to the Query
		 * NOTE:: Filters include TODO::
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_query(WireInput $input) {
			$this->filter_vendorid($input);
			$this->filter_shiptofromid($input);

			if ($input->get->filter) {

			} else {
				$input->get->status = array();
			}
		}

		/**
		 * Filters Query by Vendor ID
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_vendorid($input) {
			if ($input->get->vendorID) {
				if (is_array($input->get->vendorID)) {
					$filter = $input->get->array('vendorID');
				} else {
					$filter = $input->get->text('vendorID');
				}
				$this->query->filterByVendorid($filter);
			}
		}

		/**
		 * Filters Query by Vendor ShipfromID
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_shiptofromid($input) {
			if ($input->get->shipfromID && $input->get->vendorID) {
				if (is_array($input->get->shipfromID)) {
					$filter = $input->get->array('shipfromID');
				} else {
					$filter = $input->get->text('shipfromID');
				}
				$this->query->filterByShipfromid($filter);
			}
		}

		/**
		 * Adds the Sort By to the query
		 *
		 * @param  Page   $page
		 * @return void
		 */
		public function apply_sortby(Page $page) {
			if ($page->has_orderby()) {
				$orderbycolumn = $page->orderby_column;
				$sort = $page->orderby_sort;

				if ($orderbycolumn == 'total_total') {
					$this->query->join('PurchaseOrderDetail');
					$tablecolumn = PurchaseOrderDetail::get_aliasproperty('cost_total');
					$this->query->withColumn("SUM(PurchaseOrderDetail.$tablecolumn)", 'total_total');
					$this->query->groupBy('PurchaseOrder.pohdnbr');
					$this->query->orderBy("total_total", $sort);
				} else {
					$tablecolumn = PurchaseOrder::get_aliasproperty($orderbycolumn);
					$this->query->sortBy($tablecolumn, $sort);
				}

			} else {
				$this->query->orderByDate_ordered('DESC');
			}
		}

	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso filter Purchase Orders Module',
				'version' => 101,
				'summary' => 'Handles Purchase Orders Filtering',
				'singular' => true,
				'autoload' => true,
			);
		}
	}
