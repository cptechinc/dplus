<?php namespace ProcessWire;

	include_once(__DIR__ . "/FilterQuotesTraits.php");

	use QuoteQuery, Quote;
	use Propel\Runtime\ActiveQuery\Criteria;

	class FilterQuotes extends WireData implements Module {
		use FilterQuotesTraits;

		/**
		 * Query
		 * @var QuoteQuery
		 */
		protected $query;

		/**
		 * Returns Query
		 * @return QuoteQuery
		 */
		public function get_query() {
			return $this->query;
		}

		/**
		 * Initializes Query
		 * NOTE: Filters by Sales Rep if provided user is a Sales rep
		 *
		 * @param  User   $user User to Check if they are a Sales Person
		 * @return void
		 */
		public function init_query(User $user) {
			$this->query = QuoteQuery::create();

			if ($user->is_salesrep()) {
				$this->query->filterbySalesPerson($user->roleid);
			}
		}

		/**
		 * Applies Filters to the Query
		 * NOTE:: Filters include Customer, Quote #, Quote Date, Review Date, Expire Date, Quote Total, Quote Status
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_query(WireInput $input) {
			$this->filter_custid($input);
			$this->filter_shiptoid($input);

			if ($input->get->filter) {
				$this->filter_quotenumber($input);
				$this->filter_quotetotal($input);
				$this->filter_quotedate($input);
				$this->filter_reviewdate($input);
				$this->filter_expiredate($input);
				$this->filter_quotestatus($input);
			} else {
				$input->get->status = array();
			}
		}

		/**
		 * Filters Query by Order Status
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_quotestatus(WireInput $input) {
			if ($input->get->status) {
				$statuses = array();

				foreach ($input->get->status as $status) {
					$sanitized = $sanitizer->text($status);

					if (array_key_exists($sanitized, Quote::$status_descriptions)) {
						$statuses[] = $sanitized;
					}
				}
				$this->query->filterByQuotestatus($statuses);
			} else {
				$input->get->status = array();
			}
		}

		/**
		 * Filters Query by Customer ID
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_custid($input) {
			if ($input->get->custID) {
				if (is_array($input->get->custID)) {
					$filter = $input->get->array('custID');
				} else {
					$filter = $input->get->text('custID');
				}
				$this->query->filterByCustid($filter);
			}
		}

		/**
		 * Filters Query by Customer ShiptoID
		 *
		 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
		 * @return void
		 */
		public function filter_shiptoid($input) {
			if ($input->get->shiptoID && $input->get->custID) {
				if (is_array($input->get->shiptoID)) {
					$filter = $input->get->array('shiptoID');
				} else {
					$filter = $input->get->text('shiptoID');
				}
				$this->query->filterByShiptoid($filter);
			}
		}

		/**
		 * Adds the Sort By to the query
		 *
		 * @param  Page   $page
		 * @return void
		 */
		public function apply_sortby(Page $page) {
			if ($page->has_orderby()) {
				$orderbycolumn = $page->orderby_column;
				$sort = $page->orderby_sort;
				$tablecolumn = Quote::get_aliasproperty($orderbycolumn);
				$this->query->sortBy($tablecolumn, $sort);
			} else {
				$this->query->orderByDate_quoted('DESC');
			}
		}
	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso filter Quotes Module',
				'version' => 101,
				'summary' => 'Handles Quotes Filtering',
				'singular' => true,
				'autoload' => true,
			);
		}
	}
