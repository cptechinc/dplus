<?php namespace ProcessWire;
// Propel ORM Library
use Propel\Runtime\ActiveQuery\Criteria;
// Dplus Models
use ItemMasterItemQuery, ItemMasterItem;
// Dplus Validators
use Dplus\CodeValidators\Min as MinValidator;


/**
 * Load
 *
 * Class for Looking up / Validating Items through ITM and different X-refs
 *
 * @property string $exists  Item Exists
 * @property string $itemID  Item ID associated with Item
 * @property string $request What was sent to find Item
 * @property string $source  itm|cxm
 * @property array  $item
 */
class LoadItem extends WireData implements Module {
	public function __construct() {
		$this->exists  = false;
		$this->itemID  = '';
		$this->item = false;
	}

	/**
	 * Return Item
	 * @param  string $itemID Item ID
	 * @return ItemMasterItem
	 */
	public function get_item($itemID) {
		$this->itemID = $itemID;
		$validate = new MinValidator();

		if ($validate->itemid($itemID)) {
			return ItemMasterItemQuery::create()->findOneByItemid($itemID);
		}
	}

	/**
	 * Return Item Array
	 *
	 * @param  string $itemID Item ID
	 * @return array
	 */
	public function get_item_array($itemID, array $fields) {
		$this->itemID = $itemID;
		$validate = new MinValidator();

		if ($validate->itemid($itemID)) {
			$item = $this->get_item($itemID);
			$this->generate_item_array($item, $fields);
		}
		return $this->item;
	}

	public function generate_item_array(ItemMasterItem $item, array $fields) {
		$item_array = array('itemid' => $item->itemid, 'description' => $item->description, 'description2' => $item->description2);

		foreach ($fields as $field) {
			if ($field == 'uom') {
				$item_array[$field] = [
					'sale' => [
						'code'        => $item->UnitofMeasureSale ? $item->UnitofMeasureSale->code : '',
						'description' => $item->UnitofMeasureSale ? $item->UnitofMeasureSale->description : '',
						'conversion'  => $item->UnitofMeasureSale ? $item->UnitofMeasureSale->conversion : '',
					]
				];
				continue;
			}

			if ($field == 'iskit') {
				$item_array[$field] = $item->is_kit();
				continue;
			}

			if ($field == 'pricing') {
				$item_array[$field] = [
					'base' => $item->pricing->baseprice
				];
				continue;
			}

			if ($field == 'standardcostbasedon') {
				$item_array[$field] = [
					'base' => $item->standardcostbasedon
				];
				continue;
			}

			if (ItemMasterItem::aliasproperty_exists($field)) {
				$item_array[$field] = $item->$field;
			}
		}

		$this->item = $item_array;
	}



	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Item Load Module',
			'version' => 101,
			'summary' => 'Handles Item Load',
			'singular' => true,
			'autoload' => true,
			'installs' => array(),
			'requires' => array()
		);
	}
}
