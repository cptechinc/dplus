<?php namespace ProcessWire;

include_once(__DIR__.'/XrefResponse.php');

use Purl\Url;

use ItemMasterItemQuery, ItemMasterItem;
use ItemXrefCustomerQuery, ItemXrefCustomer;
use ConfigSysQuery, ConfigSys;
use UnitofMeasureSaleQuery, UnitofMeasureSale;
use CustomerQuery, Customer;

/**
 * Module that handles the editing of the CXM item Xref
 * NOTE: Users will not be able to edit the itemID field for CXM item
 * because there are notes and other linked items, so users must delete, recreate.
 */
class XrefCxm extends WireData implements Module {
	const MODEL              = 'ItemXrefCustomer';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Item CXM';
	const DESCRIPTION_RECORD = 'Item CXM';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return Query
	 * @return ItemXrefCustomerQuery
	 */
	public function get_query() {
		return ItemXrefCustomerQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return ItemXrefCustomer
	 * @param  string $custID     Cust ID
	 * @param  string $custitemID Cust's Item ID'
	 * @return ItemXrefCustomer
	 */
	public function get_cxm_item($custID, $custitemID) {
		$q = $this->get_query();
		$q->filterByCustid($custID);
		$q->filterByCustitemid($custitemID);
		return $q->findOne();
	}

	/**
	 * Return ItemXrefCustomer
	 * @param  string $custID     Cust ID
	 * @param  string $custitemID Cust's Item ID'
	 * @return ItemXrefCustomer
	 */
	public function get_create_cxm_item(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$custID = $values->text('custID');
		$custitemID = $values->original_custitemID ? $values->text('original_custitemID') : $values->text('custitemID');

		$q = $this->get_query();
		$q->filterByCustid($custID);
		$q->filterByCustitemid($custitemID);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$record = $this->get_cxm_item_new();
			$record->setCustid($custID);
			$record->setCustitemid($custitemID);
		}
		return $record;
	}

	/**
	 * Return ItemXrefCustomer and set Defaults
	 * @return ItemXrefCustomer
	 */
	public function get_cxm_item_new() {
		$record = ItemXrefCustomer::new();
		return $record;
	}

	/**
	 * Returns if Cust Item ID exists
	 * @param  string $custID     Customer ID
	 * @param  string $custitemID Customer's Item ID'
	 * @return bool
	 */
	public function cxm_item_exists($custID, $custitemID) {
		$q = $this->get_query();
		$q->filterByCustid($custID);
		$q->filterByCustitemid($custitemID);
		return boolval($q->count());
	}

	/**
	 * Return the CXM Item that has the short itemid
	 * @param  string $itemID Item ID / Our Item ID
	 * @return ItemXrefCustomer
	 */
	public function get_cxm_shortitem($itemID) {
		$q = $this->get_query();
		$custID = ConfigSysQuery::create()->findOne()->custid;
		$q->filterByCustid($custID);
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Return the CXM Item that has this custitemid
	 * @param  string $custitemID Customer Item ID
	 * @return ItemXrefCustomer
	 */
	public function get_cxm_shortitem_custitemid($custitemID) {
		$q = $this->get_query();
		$custID = ConfigSysQuery::create()->findOne()->custid;
		$q->filterByCustid($custID);
		$q->filterByCustitemid($custitemID);
		return $q->findOne();
	}

	/**
	 * Return New / Existing CXM item for ItemID with the ConfigSys cust ID
	 * @param  string $itemID Item ID
	 * @return ItemXrefCustomer
	 */
	public function get_create_cxm_shortitem($itemID) {
		if ($this->cxm_shortitem_exists($itemID)) {
			return $this->get_cxm_shortitem($itemID);
		} else {
			$custID = ConfigSysQuery::create()->findOne()->custid;
			$item = ItemXrefCustomer::new();
			$item->setItemid($itemID);
			$item->setCustid($custID);
			return $item;
		}
	}

	/**
	 * Return If there IS a CXM record with the short item ID
	 * @param  string $itemID Item ID / Our Item ID
	 * @return bool
	 */
	public function cxm_shortitem_exists($itemID) {
		$q = $this->get_query();
		$custID = ConfigSysQuery::create()->findOne()->custid;
		$q->filterByCustid($custID);
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	/**
	 * Return If there IS a CXM record with this Customer Item ID
	 * @param  string $custitemID Customer Item ID
	 * @return bool
	 */
	public function cxm_shortitem_exists_custitemid($custitemID) {
		$q = $this->get_query();
		$custID = ConfigSysQuery::create()->findOne()->custid;
		$q->filterByCustid($custID);
		$q->filterByCustitemid($custitemID);
		return boolval($q->count());
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, calls the function to process input
	 *
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->action) {
			$modules = $this->wire('modules');

			switch ($values->text('action')) {
				case 'update-notes':
				case 'delete-notes':
					$modules->get('QnotesItemCxm')->process_input($input);
					break;
				case 'update-cxm-shortitem':
					$this->process_input_cxm_shortitem($input);
					break;
				default:
					$this->process_input_cxm($input);
					break;
			}
		}
	}

	/**
	 * Takes Input, validate (action, cxm record, lock on record)
	 * Updates CXM Table
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_cxm(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new XrefResponse();
		$record = $this->get_create_cxm_item($input);
		$recordlocker = $this('modules')->get('RecordLockerUser');

		/**
		 * Create lock for ITM code if not already locked.
		 */
		if (!$recordlocker->function_locked('cxm', $this->get_recordlocker_key($record))) {
			$recordlocker->create_lock('cxm', $this->get_recordlocker_key($record));
		}

		if ($recordlocker->function_locked_by_user('cxm', $this->get_recordlocker_key($record))) {
			switch ($values->text('action')) {
				case 'remove-cxm-item':
					$record->delete();
					break;
				case 'update-cxm':
					$response = $this->update_record_input($record, $input);
					break;
				default:
					$message = self::DESCRIPTION_RECORD . " (".$this->get_recordlocker_key($record).")  was not saved, no action was specified";
					$response = $this->create_error_response($record->itemid, $message, ItmResponse::CRUD_UPDATE);
					break;
			}

			if (!$response->has_error()) {
				$response = $this->save_and_process_response($record);
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " (".$this->get_recordlocker_key($record).")  was not saved, it is locked by " . $recordlocker->get_locked_user('cxm', $this->get_recordlocker_key($record));
			$response = $this->create_error_response($record->itemid, $message, ItmResponse::CRUD_UPDATE);
		}
		$this->wire('session')->response_xref = $response;
	}

	/**
	 * Return XrefResponse for Updating the CXM record for Short Item ID
	 * @param  WireInput $input Input Data
	 * @return XrefResponse
	 */
	public function process_input_cxm_shortitem(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		$itemID = $values->text('itemID');
		$custitemID = $values->text('custitemid');

		if ($this->cxm_shortitem_exists_custitemid($custitemID)) {
			$cxmitem = $this->get_cxm_shortitem_custitemid($custitemID);
			$message = "Short ItemID '$custitemID' already exists for $cxmitem->itemid";
			$response = $this->create_error_response($itemID, $message);
		} else {
			$record = $this->get_create_cxm_shortitem($itemID);
			$array = $record->toArray();
			$record->delete();
			$record = ItemXrefCustomer::new();
			$record->fromArray($array);
			$record->setCustitemid($custitemID);
			$record->save();
			$record->setDate(date('Ymd'));
			$record->setTime(date('His'));

			$response = $this->save_and_process_response($record);
		}
		$this->wire('session')->response_xref = $response;
	}

	/**
	 * Updates CXM Item Record
	 * @param  ItemXrefCustomer $record CXM Item Record
	 * @param  WireInput        $input  Input Data
	 * @return XrefResponse
	 */
	public function update_record_input(ItemXrefCustomer $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		$response = new XrefResponse();
		$response->set_action(XrefResponse::CRUD_UPDATE);

		$record->setCustitemid($values->text('custitemID'));

		if ($this->is_modifying_cxm_key($record) && !$record->isNew()) {
			$record_delete = $record;
			$array = $record_delete->toArray();

			$record_delete->setCustitemid($values->text('original_custitemID'));
			$this->update_dplus_cobol($record_delete);
			$record_delete->delete();
			$record = ItemXrefCustomer::new();
			$record->fromArray($array);
			$record->setCustitemid($values->text('custitemID'));
			$record->save();
		}
		$record->setItemid($values->text('itemID'));
		$record->setDescription($values->text('description'));
		$record->setDescription2($values->text('description2'));
		$record->setRevision($values->text('revision'));
		$record->setConvert($values->text('convert'));
		$record->setQty_percase($values->text('qty_percase'));
		$record->setQty_purchase($values->text('qty_purchase'));
		$record->setPrice_retail($values->text('price_retail'));
		$record->setPrice_customer($values->text('price_customer'));
		$this->update_record_input_validated($record, $input, $response);
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		return $response;
	}

	/**
	 * Updates CXM Item Record's UoM Pricing, UoM Customer, Item ID, CustID
	 * Validates Each property is valid
	 * @param  ItemXrefCustomer $record   CXM Item
	 * @param  WireInput        $input    Input Data
	 * @param  XrefResponse     $response Response to Fix
	 * @return XrefResponse
	 */
	protected function update_record_input_validated(ItemXrefCustomer $record, WireInput $input, XrefResponse $response) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$modules = $this->wire('modules');
		$validate_uom = $modules->get('ValidateUom');
		$validate_item = $modules->get('LookupItem');
		$validate_customer = $modules->get('LookupCustomer');

		$response = new XrefResponse();
		$response->set_action(XrefResponse::CRUD_UPDATE);


		$uom_pricing = $values->text('uom_pricing');
		if ($uom_pricing == '' || $validate_uom->validate_sale($uom_pricing)) {
			$record->setUom_pricing($uom_pricing);
		}

		$uom_customer = $values->text('uom_customer');
		if ($uom_customer == '' || $validate_uom->validate_sale($uom_customer)) {
			$record->setUom_customer($uom_customer);
		}

		if ($validate_item->lookup_itm($values->text('itemID'))) {
			$record->setItemid($values->text('itemID'));
		} else {
			$response->set_error(true);
			$response->set_message($values->text('itemID') . " does not exist in the Item Master");
		}

		if ($validate_customer->lookup_customer($values->text('custID'))) {
			$record->setCustid($values->text('custID'));
		} else {
			$response->set_error(true);
			$response->set_message($values->text('custID') . " does not exist in the Customer Master");
		}

		$rounding = $values->text('rounding');

		if (in_array($rounding, $this->get_rounding_options())) {

		} else {
			$rounding = ItemXrefCustomer::ROUNDING_DEFAULT;
		}
		$record->setRounding($rounding);

		return $response;
	}

	/**
	 * Returns if Record is Modifying one of the Keys of the Record
	 * @param  ItemXrefCustomer $record
	 * @return bool
	 */
	protected function is_modifying_cxm_key(ItemXrefCustomer $record) {
		$q = $this->get_query();
		$tablemap = $q->getTableMap();
		$primarykeys = array_keys($tablemap->getPrimaryKeys());
		$modified = $record->getModifiedColumns();

		foreach ($modified as $column) {
			$col = str_replace($tablemap::TABLE_NAME.'.', '', $column);
			if (in_array($col, $primarykeys)) {
				return true;
			}
		}
		return false;
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemXrefCustomer $record Record to record response of database save
	 * @return XrefResponse
	 */
	protected function save_and_process_response(ItemXrefCustomer $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();
		$code = "$record->custid-$record->custitemid-$record->itemid";

		$response = new XrefResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(XrefResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(XrefResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(XrefResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->update_dplus_cobol($record);
		}
		return $response;
	}

	/**
	 * Return Error Response with Provided Message
	 * @param  string $itemID     Item ID
	 * @param  string $message    Error Message
	 * @param  int    $actiontype XrefResponse CRUD value
	 * @return XrefResponse
	 */
	public function create_error_response($itemID, $message, $actiontype = 0) {
		$response = new XrefResponse();
		$response->set_key($itemID);
		$response->set_error(true);
		$response->set_action($actiontype != 0 ? $actiontype : XrefResponse::CRUD_UPDATE);
		$response->set_message($message);
		return $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the CXM file for this ITEM
	 * @param  ItemXrefCustomer $item
	 * @return void
	 */
	public function update_dplus_cobol(ItemXrefCustomer $item) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATECXM', "CUSTID=$item->custid", "CUSTITEM=$item->custitemid", "OURITEM=$item->itemid");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return Key for CXM Item
	 * @param  ItemXrefCustomer $item CXM Item
	 * @return string
	 */
	public function get_recordlocker_key(ItemXrefCustomer $item) {
		return "$item->custid-$item->custitemid-$item->itemid";
	}

	/**
	 * Return Unit of Measure Sales
	 * @return UnitofMeasureSale[]|ObjectCollection
	 */
	public function get_unitsofm_sales() {
		return UnitofMeasureSaleQuery::create()->find();
	}

	/**
	 * Returns if Item ID is valid
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function validate_itemID($itemID) {
		$q = ItemMasterItemQuery::create();
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	public function get_rounding_options() {
		return ItemXrefCustomer::ROUNDING_OPTIONS;
	}

	/**
	 * Return Customers that are in the CXM
	 * @return Customer[]|ObjectCollection
	 */
	public function get_cxm_customers() {
		$q_cxm = $this->get_query();
		$q->select('DISTINCT('.ItemXrefCustomer::get_aliasproperty('custid').')') ;
		$custIDs = $q->find()->toArray();

		$q_cust = CustomerQuery::create();
		$q_cust->filterByCustid($custIDs);
		return $q_cust->findAll();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus CXM CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for CXM',
			'singular' => true,
			'autoload' => true,
		);
	}
}
