<?php namespace ProcessWire;

include_once(__DIR__.'/XrefResponse.php');

use Purl\Url;
use Propel\Runtime\Map\TableMap as PropelTableMap;

use ItemMasterItemQuery, ItemMasterItem;
use ItemXrefVendorQuery, ItemXrefVendor;
use UnitofMeasurePurchaseQuery, UnitofMeasurePurchase;
use VendorQuery, Vendor;
use ConfigInQuery, ConfigIn;

/**
 * Module that handles the editing of the VXM item Xref
 * NOTE: Users will not be able to edit the itemID field for VXM item
 * because there are notes and other linked items, so users must delete, recreate.
 */
class XrefVxm extends WireData implements Module {
	const MODEL              = 'ItemXrefVendor';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'VXM Item';
	const RESPONSE_TEMPLATE  = 'VXM X-ref {key} was {not} {crud}';
	const RECORDLOCKER_FUNCTION = 'vxm';

	const MARGIN_DECIMALPLACES = 3;

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Returns ItemXrefVendorQuery
	 * @return ItemXrefVendorQuery
	 */
	public function query() {
		return ItemXrefVendorQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return ItemXrefVendor[] for vendor
	 * @param  string $vendorID Vendor ID
	 * @return ObjectCollection
	 */
	public function get_vendoritems($vendorID) {
		$q = $this->query();
		$q->filterByVendorid($vendorID);
		return $q->find();
	}

	/**
	 * Return ItemXrefVendor[] for our Item ID
	 * @param  string $itemID  Our Item ID
	 * @return ObjectCollection
	 */
	public function get_ouritemitems($itemID) {
		$q = $this->query();
		$q->filterByOuritemid($itemID);
		return $q->find();
	}

	/**
	 * Return ItemXrefVendor
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @return ItemXrefVendor
	 */
	public function get_vxm_item($vendorID, $vendoritemID) {
		$q = $this->query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);
		return $q->findOne();
	}

	/**
	 * Return Existing or New X-ref
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor Item ID
	 * @return ItemXrefVendor
	 */
	public function get_create_vxm_item($vendorID, $vendoritemID) {
		if ($this->vxm_item_exists($vendorID, $vendoritemID)) {
			$record = $this->get_vxm_item($vendorID, $vendoritemID);
		} else {
			$vendoritemID = $vendoritemID == 'new' ? $vendoritemID : '';
			$record = $this->get_vxm_item_new();
			$record->setVendorid($vendorID);
			$record->setVendoritemid($vendoritemID);
		}
		return $record;
	}

	/**
	 * Return ItemXrefVendor and set Defaults
	 * @return ItemXrefVendor
	 */
	public function get_vxm_item_new() {
		$config_in = $this->get_config_in();
		$record = ItemXrefVendor::new();
		$record->setUom_purchase($config_in->default_uom_purchase);
		$record->setMinbuyqty(0);
		return $record;
	}

	/**
	 * Returns if Vendor Item ID exists
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @return bool
	 */
	public function vxm_item_exists($vendorID, $vendoritemID) {
		$q = $this->query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);
		return boolval($q->count());
	}

	/**
	 * Return Primary ItemXrefVendor
	 * @param  string $itemID Our Item ID
	 * @return ItemXrefVendor
	 */
	public function get_primary_poordercode_itemid($itemID) {
		$q = $this->query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return if Primary ItemXrefVendor for itemID exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function poordercode_primary_exists($itemID) {
		$q = $this->query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return Vendor IDs of Existing VXM items
	 * @return array
	 */
	public function vendorids() {
		$q = $this->query();
		$q->select(ItemXrefVendor::get_aliasproperty('vendorid'));
		return $q->find()->toArray();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->action) {
			switch ($values->text('action')) {
				case 'remove-vxm-item':
					$this->input_delete($input);
					break;
				case 'update-vxm':
					$this->input_update($input);
					break;
				case 'delete-notes':
				case 'update-notes';
					$qnotes = $this->wire('modules')->get('QnotesItemVxm');
					$qnotes->process_input($input);
					break;
			}
		} else {
			$this->wire('session')->response_xref = XrefResponse::response_error("No VXM Action specified");
		}
	}

	/**
	 * Delete VXM Item from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_delete(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$vendorID = $values->text('vendorID');
		$vendoritemID = $values->text('vendoritemID');

		if ($this->vxm_item_exists($vendorID, $vendoritemID)) {
			$record = $this->get_vxm_item($vendorID, $vendoritemID);

			if (!$this->lockrecord($record)) {
				$message = self::DESCRIPTION_RECORD . " ($vendorID-$vendoritemID)  was not saved, it is locked by " . $this->recordlocker->get_locked_user($record);
				$this->wire('session')->response_xref = XrefResponse::response_error("$vendorID-$vendoritemID", $message);
				return false;
			}
			$record->delete();
			$this->wire('session')->response_xref = $this->save_and_respond($record);
			return $this->wire('session')->response_xref->has_success();
		}
		return true;
	}

	/**
	 * Update VXM Item from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_update(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$vendorID = $values->text('vendorID');
		$vendoritemID = $values->text('original_vendoritemID') != $values->text('vendoritemID') ? $values->text('original_vendoritemID') : $values->text('vendoritemID');

		$record = $this->get_create_vxm_item($vendorID, $vendoritemID);

		if (!$record->isNew()) {
			if (!$this->lockrecord($record)) {
				$message = self::DESCRIPTION_RECORD . " ($vendorID-$vendoritemID)  was not saved, it is locked by " . $this->recordlocker->get_locked_user($record);
				$this->wire('session')->response_xref = XrefResponse::response_error("$vendorID-$vendoritemID", $message);
				return false;
			}
		}
		$invalidfields = $this->update_record_input($record, $input);
		$response = $this->save_and_respond($record, $invalidfields);

		/**
		 * IF we saved this Item as the Primary PO ORDER then we have to update
		 * the other primary item to be a secondary
		 */
		if ($response->has_success() && !$record->isDeleted()) {
			if ($record->is_po_ordercode_primary() && $record->other_primary_poordercode_exists()) {
				$vxmitem = $record->get_other_primary_vxm_item();
				$vxmitem->setPo_ordercode(ItemXrefVendor::POORDERCODE_SECONDARY);
				$vxmitem->save();
				$this->update_dplus_cobol($vxmitem);
			}
		}
		$this->wire('session')->response_xref = $response;
		return $this->wire('session')->response_xref->has_success();
	}

	/**
	 * Updates VXM Item Record, Returns Invalid Fields
	 * @param  ItemXrefVendor  $record VXM Item Record
	 * @param  WireInput       $input  Input Data
	 * @return array
	 */
	public function update_record_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$invalidfields = array();

		$response = new XrefResponse();
		$response->set_action(XrefResponse::CRUD_UPDATE);
		$record->setVendoritemid($values->text('vendoritemID'));
		$itemID = $record->ouritemid;
		$invalidfields = $this->update_record_validated($record, $input);

		if ($this->is_key_modified($record) && !$record->isNew()) {
			$this->delete_recreate_record($record, $input);
		}
		$record->setQty_percase($values->text('qty_percase'));
		$record->setMinbuyqty($values->text('minbuyqty'));
		$record->setListprice($values->text('listprice'));
		$this->update_record_unitx_input($record, $input);
		$record->setDate_changed(date('Ymd'));
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		return $invalidfields;
	}

	/**
	 * Deletes Record in Database, so then record can be saved
	 * NOTE: Used for When Keys are Updated since Propel doesn't keep track of keys
	 * NOTE: Sends Cobol Request for delete for original Record
	 * @param  ItemXrefVendor $record
	 * @return void
	 */
	public function delete_recreate_record(ItemXrefVendor $record, WireInput $input) {
		$array = $record->toArray();
		$original = new ItemXrefVendor();
		$original->fromArray($array);
		$original->setVendoritemid($record->originalvalues[ItemXrefVendor::get_aliasproperty('vendoritemid')]);
		$original->setOuritemid($record->originalvalues[ItemXrefVendor::get_aliasproperty('ouritemid')]);
		$original->delete();
		$this->update_dplus_cobol($original);

		$new =  new ItemXrefVendor();
		$new->fromArray($array);
		$new->save();
		$record = $new;
	}

	/**
	 * Update the unitcost and unitqty columns for record
	 * @param  ItemXrefVendor $record VXM record
	 * @param  WireInput      $input  Input Data
	 * @return void
	 */
	public function update_record_unitx_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$sanitizer = $this->wire('sanitizer');

		if ($record->uompurchase) {
			$cost = $values->float('unitcost_base', ['precision' => $this->decimal_places_cost()]);
			$unitcost = $cost / $record->uompurchase->conversion;
			$record->setUnitcost_base($sanitizer->float($unitcost));
		}

		for ($i = 1; $i < ItemXrefVendor::UNITS_AVAILABLE + 1; $i++) {
			$col_qty = ucfirst(ItemXrefVendor::get_unitqty_column($i));
			$col_cost = ucfirst(ItemXrefVendor::get_unitcost_column($i));
			$function_unitqty = "set$col_qty";
			$function_unitcost = "set$col_cost";
			$record->$function_unitqty($values->float("unit_qty$i", ['precision' => $this->decimal_places_qty()]));

			if ($record->uompurchase) {
				$cost = $values->float("unit_cost$i", ['precision' => $this->decimal_places_cost()]);
				$unitcost = $cost / $record->uompurchase->conversion;
				$record->$function_unitcost($sanitizer->float($unitcost));
			} else {
				$record->$function_unitcost($values->float("unit_cost$i"));
			}
		}
	}

	/**
	 * Sets Record fields if valid, returns invalid fields
	 * @param  ItemXrefVendor $record VXM Item
	 * @param  WireInput      $input  Input Data
	 * @return array
	 */
	public function update_record_validated(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$validate = $this->wire('modules')->get('ValidateVxm');
		$invalid = array();

		$fields = array(
			'ouritemid' => array(
				'description' => 'Item ID',
				'input'       => 'itemID',
				'function'    => 'itemid'
			),
			'approvalcode' => array(
				'description' => 'Approval Code',
				'input'       => 'approvalcode',
				'function'    => 'approvalcode'
			),
			'uom_purchase' => array(
				'description' => 'UoM Purchase',
				'input'       => 'uom_purchase',
				'function'    => 'unitofm_purchase'
			),
		);
		$validator = $this->wire('modules')->get('InputValidator');
		$validator->set_validator($validate)->set_input($input)->set_record($record)->set_validatefields($fields);
		$invalid = $validator->validate();
		$validator->set_valid_properties();

		if ($validate->ordercode($values->text('po_ordercode'))) {
			if ($values->text('po_ordercode') == ItemXrefVendor::POORDERCODE_PRIMARY) {
				if ($values->text('po_ordercode_validated') == 'true') {
					$record->setPo_ordercode($values->text('po_ordercode'));
				} else {
					$record->setPo_ordercode('');
				}
			} else {
				$record->setPo_ordercode($values->text('po_ordercode'));
			}
		} else {
			$invalid['po_ordercode'] = "PO Order Code";
		}
		return $invalid;
	}

	/**
	 * Returns if Record is Modifying one of the Keys of the Record
	 * @param  ItemXrefVendor $record
	 * @return bool
	 */
	protected function is_key_modified(ItemXrefVendor $record) {
		$q = $this->query();
		$tablemap = $q->getTableMap();
		$primarykeys = array_keys($tablemap->getPrimaryKeys());
		$modified = $record->getModifiedColumns();

		foreach ($primarykeys as $key) {
			$col = $tablemap->translateFieldName($key, PropelTableMap::TYPE_FIELDNAME, $tablemap::TYPE_COLNAME);

			if ($record->isColumnModified($col)) {
				return true;
			}
		}
		return false;
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemXrefVendor $record        Record to record response of database save
	 * @param  array          $invalidfields
	 * @return XrefResponse
	 */
	protected function save_and_respond(ItemXrefVendor $record, array $invalidfields = null) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new XrefResponse();
		$response->set_key($this->get_recordlocker_key($record));

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
		}

		if ($is_new) {
			$response->set_action(XrefResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$response->set_action(XrefResponse::CRUD_DELETE);
		} else {
			$response->set_action(XrefResponse::CRUD_UPDATE);
		}

		$response->build_message(self::RESPONSE_TEMPLATE);

		if ($response->has_success() && empty($invalidfields)) {
			$this->update_dplus_cobol($record);
		}
		return $response;
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the VXM file for this ITEM
	 * @param  ItemXrefVendor $item
	 * @return void
	 */
	public function update_dplus_cobol(ItemXrefVendor $item) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEVXM', "VENDORID=$item->vendorid", "VENDITEM=$item->vendoritemid", "OURITEM=$item->ouritemid");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Lock Record, validate User is locking Record
	 * @param  ItemXrefVendor $item
	 * @return bool
	 */
	public function lockrecord(ItemXrefVendor $item) {
		if (!$this->recordlocker->function_locked($this->get_recordlocker_key($item))) {
			$this->recordlocker->create_lock($this->get_recordlocker_key($item));
		}
		return $this->recordlocker->function_locked_by_user($this->get_recordlocker_key($item));
	}

	/**
	 * Return Key for VXM Item
	 * @param  ItemXrefVendor $item VXM Item
	 * @return string
	 */
	public function get_recordlocker_key(ItemXrefVendor $item) {
		return "$item->vendorID-$item->vendoritemID-$item->ouritemID";
	}

	/**
	 * Return Unit of Measure Purchases
	 * @return UnitofMeasurePurchase[]|ObjectCollection
	 */
	public function get_unitsofm_purchases() {
		return UnitofMeasurePurchaseQuery::create()->find();
	}

	/**
	 * Return Vendor by Vendor ID
	 * @param  string $vendorID Vendor ID
	 * @return Vendor
	 */
	public function get_vendor($vendorID) {
		return VendorQuery::create()->findOneById($vendorID);
	}

	/**
	 * Return Config IN
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return $this->wire('modules')->get('ConfigureIn')->config();
	}

	/**
	 * Return Config SO
	 * @return ConfigSalesOrder
	 */
	public function get_config_so() {
		return $this->wire('modules')->get('ConfigureSo')->config();
	}

	/**
	 * Return Config PO
	 * @return ConfigPo
	 */
	public function get_config_po() {
		return $this->wire('modules')->get('ConfigurePo')->config();
	}

	/**
	 * Intialize configs
	 * @return void
	 */
	public function init_configs() {
		$this->configs = new WireData();
		$this->configs->in = $this->get_config_in();
		$this->configs->so = $this->get_config_so();
		$this->configs->po = $this->get_config_po();
	}

	/**
	 * Return the number of Decimal Places to use for Qty
	 * @return int
	 */
	public function decimal_places_qty() {
		$config = $this->get_config_so();
		return $config->decimal_places_qty;
	}

	/**
	 * Return the number of Decimal Places to use for price
	 * @return int
	 */
	public function decimal_places_price() {
		$config = $this->get_config_so();
		return $config->decimal_places_price;
	}

	/**
	 * Return the number of Decimal Places to use for cost
	 * @return int
	 */
	public function decimal_places_cost() {
		$config = $this->get_config_po();
		return $config->decimal_places_cost;
	}

	/**
	 * Return the number of Decimal Places to use for Margin
	 * @return int
	 */
	public function decimal_places_margin() {
		return self::MARGIN_DECIMALPLACES;
	}

	/**
	 * Return if Field has Error
	 * NOTE: Uses $session->response_itm->fields to derive this
	 * @param  string $inputname Input name e.g. itemid
	 * @return bool
	 */
	public function field_has_error($inputname) {
		$response = $this->wire('session')->response_xref;
		return ($response) ? array_key_exists($inputname, $response->fields) : false;
	}

	/**
	 * Return Response
	 * @return XrefResponse|null
	 */
	public function response() {
		return $this->wire('session')->response_xref;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus VXM CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for VXM',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {
		$this->recordlocker = $this->wire('modules')->get('RecordLockerUserFunction');
		$this->recordlocker->set_function(self::RECORDLOCKER_FUNCTION);
	}
}
