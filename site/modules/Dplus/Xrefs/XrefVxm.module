<?php namespace ProcessWire;

include_once(__DIR__.'/XrefResponse.php');

use Purl\Url;

use ItemMasterItemQuery, ItemMasterItem;
use ItemXrefVendorQuery, ItemXrefVendor;
use UnitofMeasurePurchaseQuery, UnitofMeasurePurchase;
use VendorQuery, Vendor;
use ConfigInQuery, ConfigIn;

/**
 * Module that handles the editing of the VXM item Xref
 * NOTE: Users will not be able to edit the itemID field for VXM item
 * because there are notes and other linked items, so users must delete, recreate.
 */
class XrefVxm extends WireData implements Module {
	const MODEL              = 'ItemXrefVendor';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'VXM Item';
	const DESCRIPTION_RECORD = 'VXM Item';

	const MARGIN_DECIMALPLACES = 3;

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Returns ItemXrefVendorQuery
	 * @return ItemXrefVendorQuery
	 */
	public function get_query() {
		return ItemXrefVendorQuery::create();
	}

	/**
	 * Return ItemXrefVendor[] for vendor
	 * @param  string $vendorID Vendor ID
	 * @return ObjectCollection
	 */
	public function get_vendoritems($vendorID) {
		$q = $this->get_query();
		$q->filterByVendorid($vendorID);
		return $q->find();
	}

	/**
	 * Return ItemXrefVendor[] for our Item ID
	 * @param  string $itemID  Our Item ID
	 * @return ObjectCollection
	 */
	public function get_ouritemitems($itemID) {
		$q = $this->get_query();
		$q->filterByOuritemid($itemID);
		return $q->find();
	}

	/**
	 * Return ItemXrefVendor
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @return ItemXrefVendor
	 */
	public function get_vxm_item($vendorID, $vendoritemID) {
		$q = $this->get_query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);
		return $q->findOne();
	}

	/**
	 * Returns ItemXrefVendor after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return ItemXrefVendor
	 */
	public function get_create_vxm_item(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$vendorID = $values->text('vendorID');
		$vendoritemID = $values->original_vendoritemID ? $values->text('original_vendoritemID') : $values->text('vendoritemID');

		$q = $this->get_query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);

		if ($q->count()) {
			$record = $q->findOne();
		} else {
			$record = $this->get_vxm_item_new();
			$record->setVendorid($vendorID);
			$record->setVendoritemid($vendoritemID);
		}
		return $record;
	}

	/**
	 * Return ItemXrefVendor and set Defaults
	 * @return ItemXrefVendor
	 */
	public function get_vxm_item_new() {
		$config_in = $this->get_config_in();
		$record = ItemXrefVendor::new();
		$record->setUom_purchase($config_in->default_uom_purchase);
		$record->setMinbuyqty(0);
		return $record;
	}

	/**
	 * Returns if Vendor Item ID exists
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @return bool
	 */
	public function vxm_item_exists($vendorID, $vendoritemID) {
		$q = $this->get_query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);
		return boolval($q->count());
	}

	/**
	 * Return Primary ItemXrefVendor
	 * @param  string $itemID Our Item ID
	 * @return ItemXrefVendor
	 */
	public function get_primary_poordercode_itemid($itemID) {
		$q = $this->get_query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return if Primary ItemXrefVendor for itemID exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function poordercode_primary_exists($itemID) {
		$q = $this->get_query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return Vendor IDs of Existing VXM items
	 * @return array
	 */
	public function vendorids() {
		$q = $this->get_query();
		$q->select(ItemXrefVendor::get_aliasproperty('vendorid'));
		return $q->find()->toArray();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->action) {
			switch ($values->text('action')) {
				case 'remove-vxm-item':
				case 'update-vxm':
					$this->process_input_vxm($input);
					break;
				case 'delete-notes':
				case 'update-notes';
					$qnotes = $this->wire('modules')->get('QnotesItemVxm');
					$qnotes->process_input($input);
					break;
			}
		} else {
			$this->wire('session')->response_xref = XrefResponse::response_error('vxm', "No VXM Action specified");
		}
	}

	/**
	 * Processes Input for VXM
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	protected function process_input_vxm(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new XrefResponse();
		$record = $this->get_create_vxm_item($input);
		$recordlocker = $this('modules')->get('RecordLockerUser');

		/**
		 * Create lock for ITM code if not already locked.
		 */
		if (!$recordlocker->function_locked('vxm', $this->get_recordlocker_key($record))) {
			$recordlocker->create_lock('vxm', $this->get_recordlocker_key($record));
		}

		if ($recordlocker->function_locked_by_user('vxm', $this->get_recordlocker_key($record))) {
			switch ($values->text('action')) {
				case 'remove-vxm-item':
					$record->delete();
					break;
				case 'update-vxm':
					$response = $this->update_record_input($record, $input);
					break;
				default:
					$message = self::DESCRIPTION_RECORD . " (".$this->get_recordlocker_key($record).")  was not saved, no action was specified";
					$response = XrefResponse::response_error($this->get_recordlocker_key($record), $message);
					break;
			}

			if (!$response->has_error()) {
				$response = $this->save_and_process_response($record);
			} elseif(!empty($response->fields)) {
				$record->save();
			}

			/**
			 * IF we saved this Item as the Primary PO ORDER then we have to update
			 * the other primary item to be a secondary
			 */
			if ($response->has_success() && !$record->isDeleted()) {
				if ($record->is_po_ordercode_primary() && $record->other_primary_poordercode_exists()) {
					$vxmitem = $record->get_other_primary_vxm_item();
					$vxmitem->setPo_ordercode(ItemXrefVendor::POORDERCODE_SECONDARY);
					$vxmitem->save();
					$this->update_dplus_cobol($vxmitem);
				}
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " (".$this->get_recordlocker_key($record).")  was not saved, it is locked by " . $recordlocker->get_locked_user('cxm', $this->get_recordlocker_key($record));
			$response = XrefResponse::response_error($this->get_recordlocker_key($record), $message);
		}
		$this->wire('session')->response_xref = $response;
	}

	/**
	 * Updates VXM Item Record
	 * @param  ItemXrefVendor  $record VXM Item Record
	 * @param  WireInput       $input  Input Data
	 * @return XrefResponse
	 */
	public function update_record_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$invalidfields = array();

		$response = new XrefResponse();
		$response->set_action(XrefResponse::CRUD_UPDATE);

		$record->setVendoritemid($values->text('vendoritemID'));

		if ($this->is_modifying_vxm_key($record) && !$record->isNew()) {
			$this->delete_recreate_record($record, $input);
		}

		$record->setQty_percase($values->text('qty_percase'));
		$record->setMinbuyqty($values->text('minbuyqty'));
		$record->setListprice($values->text('listprice'));
		$record->setUnitcost_base($values->text('unitcost_base'));
		$this->update_record_unitx_input($record, $input);
		$invalidfields = $this->update_record_validated($record, $input);

		$record->setDate_changed(date('Ymd'));
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));

		if ($invalidfields) {
			$response->set_error(true);
			$response->set_success(false);
			$response->set_fields($invalidfields);
		}
		return $response;
	}

	/**
	 * Deletes and recreates VXM record so key can be allowed to be saved
	 * @param  ItemXrefVendor $record [description]
	 * @return
	 */
	public function delete_recreate_record(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$record_delete = $record;
		$array = $record_delete->toArray();

		$record_delete->setVendoritemid($values->text('original_vendoritemID'));
		$this->update_dplus_cobol($record_delete);
		$record_delete->delete();
		$record = ItemXrefVendor::new();
		$record->fromArray($array);
		$record->setVendoritemid($values->text('vendoritemID'));
		$record->save();
	}

	/**
	 * Update the unitcost and unitqty columns for record
	 * @param  ItemXrefVendor $record VXM record
	 * @param  WireInput      $input  Input Data
	 * @return void
	 */
	public function update_record_unitx_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		for ($i = 1; $i < ItemXrefVendor::UNITS_AVAILABLE + 1; $i++) {
			$col_qty = ucfirst(ItemXrefVendor::get_unitqty_column($i));
			$col_cost = ucfirst(ItemXrefVendor::get_unitcost_column($i));
			$function_unitqty = "set$col_qty";
			$function_unitcost = "set$col_cost";
			$record->$function_unitqty($values->float("unit_qty$i", ['precision' => $this->decimal_places_qty()]));
			$record->$function_unitcost($values->float("unit_cost$i", ['precision' => $this->decimal_places_price()]));
		}
	}

	/**
	 * Sets Record fields if valid, returns invalid fields
	 * @param  ItemXrefVendor $record VXM Item
	 * @param  WireInput      $input  Input Data
	 * @return array
	 */
	public function update_record_validated(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$validate = $this->wire('modules')->get('ValidateVxm');
		$invalid = array();

		$fields = array(
			'ouritemid' => array(
				'description' => 'Item ID',
				'input'       => 'ouritemID',
				'function'    => 'itemid'
			),
			'approvalcode' => array(
				'description' => 'Approval Code',
				'input'       => 'approvalcode',
				'function'    => 'approvalcode'
			),
			'uom_purchase' => array(
				'description' => 'UoM Purchase',
				'input'       => 'uom_purchase',
				'function'    => 'unitofm_purchase'
			),
		);

		foreach ($fields as $property => $field) {
			if (strlen($values->text($field['input']))) {
				$function = $field['function'];

				if ($validate->$function($values->text($field['input']))) {
					$setProperty = "set".ucfirst($property);
					$record->$setProperty($values->text($field['input']));
				} else {
					$invalid[$field['input']] = $field['description'];
				}
			}
		}

		if ($validate->ordercode($values->text('po_ordercode'))) {
			if ($values->text('po_ordercode') == ItemXrefVendor::POORDERCODE_PRIMARY) {
				if ($values->text('po_ordercode_validated') == 'true') {
					$record->setPo_ordercode($values->text('po_ordercode'));
				} else {
					$record->setPo_ordercode('');
				}
			} else {
				$record->setPo_ordercode($values->text('po_ordercode'));
			}
		} else {
			$invalid['po_ordercode'] = "PO Order Code";
		}
		return $invalid;
	}

	/**
	 * Returns if Record is Modifying one of the Keys of the Record
	 * @param  ItemXrefVendor $record
	 * @return bool
	 */
	protected function is_modifying_vxm_key(ItemXrefVendor $record) {
		$q = $this->get_query();
		$tablemap = $q->getTableMap();
		$primarykeys = array_keys($tablemap->getPrimaryKeys());
		$modified = $record->getModifiedColumns();

		foreach ($modified as $column) {
			$col = str_replace($tablemap::TABLE_NAME.'.', '', $column);
			if (in_array($col, $primarykeys)) {
				return true;
			}
		}
		return false;
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemXrefVendor $record Record to record response of database save
	 * @return XrefResponse
	 */
	protected function save_and_process_response(ItemXrefVendor $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();
		$code   = "$record->vendorID-$record->vendoritemID-$record->ouritemID";

		$response = new XrefResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(XrefResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(XrefResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(XrefResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->update_dplus_cobol($record);
		}
		return $response;
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the VXM file for this ITEM
	 * @param  ItemXrefVendor $item
	 * @return void
	 */
	public function update_dplus_cobol(ItemXrefVendor $item) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEVXM', "VENDORID=$item->vendorid", "VENDITEM=$item->vendoritemid", "OURITEM=$item->ouritemid");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return Key for VXM Item
	 * @param  ItemXrefVendor $item VXM Item
	 * @return string
	 */
	public function get_recordlocker_key(ItemXrefVendor $item) {
		return "$item->vendorID-$item->vendoritemID-$item->ouritemID";
	}

	/**
	 * Return Unit of Measure Purchases
	 * @return UnitofMeasurePurchase[]|ObjectCollection
	 */
	public function get_unitsofm_purchases() {
		return UnitofMeasurePurchaseQuery::create()->find();
	}

	/**
	 * Return Vendor by Vendor ID
	 * @param  string $vendorID Vendor ID
	 * @return Vendor
	 */
	public function get_vendor($vendorID) {
		return VendorQuery::create()->findOneById($vendorID);
	}

	/**
	 * Return Config IN
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return $this->wire('modules')->get('ConfigureIn')->config();
	}

	/**
	 * Return Config SO
	 * @return ConfigSalesOrder
	 */
	public function get_config_so() {
		return $this->wire('modules')->get('ConfigureSo')->config();
	}

	/**
	 * Return Config PO
	 * @return ConfigPo
	 */
	public function get_config_po() {
		return $this->wire('modules')->get('ConfigurePo')->config();
	}

	/**
	 * Intialize configs
	 * @return void
	 */
	public function init_configs() {
		$this->configs = new WireData();
		$this->configs->in = $this->get_config_in();
		$this->configs->so = $this->get_config_so();
		$this->configs->po = $this->get_config_po();
	}

	/**
	 * Return the number of Decimal Places to use for Qty
	 * @return int
	 */
	public function decimal_places_qty() {
		$config = $this->get_config_so();
		return $config->decimal_places_qty;
	}

	/**
	 * Return the number of Decimal Places to use for price
	 * @return int
	 */
	public function decimal_places_price() {
		$config = $this->get_config_so();
		return $config->decimal_places_price;
	}

	/**
	 * Return the number of Decimal Places to use for cost
	 * @return int
	 */
	public function decimal_places_cost() {
		$config = $this->get_config_po();
		return $config->decimal_places_cost;
	}

	/**
	 * Return the number of Decimal Places to use for Margin
	 * @return int
	 */
	public function decimal_places_margin() {
		return self::MARGIN_DECIMALPLACES;
	}

	/**
	 * Return if Field has Error
	 * NOTE: Uses $session->response_itm->fields to derive this
	 * @param  string $inputname Input name e.g. itemid
	 * @return bool
	 */
	public function field_has_error($inputname) {
		$response = $this->wire('session')->response_xref;
		return ($response) ? array_key_exists($inputname, $response->fields) : false;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus VXM CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for VXM',
			'singular' => true,
			'autoload' => true,
		);
	}
}
