<?php namespace ProcessWire;

include_once(__DIR__.'/XrefResponse.php');

// Purl URI
use Purl\Url;
// Propel ORM
use Propel\Runtime\Map\TableMap as PropelTableMap;
// Dplus Model
use ItemMasterItemQuery, ItemMasterItem;
use ItemXrefVendorQuery, ItemXrefVendor;
use UnitofMeasurePurchaseQuery, UnitofMeasurePurchase;
use VendorQuery, Vendor;
use ConfigInQuery, ConfigIn;
// Dplus Record Locker
use Dplus\RecordLocker\UserFunction as FunctionLocker;
// Dplus Configs
use Dplus\Configs;
// Dplus Validators
use Dplus\CodeValidators\Map\Vxm as VxmValidator;

/**
 * Module that handles the editing of the VXM item Xref
 * NOTE: Users will not be able to edit the itemID field for VXM item
 * because there are notes and other linked items, so users must delete, recreate.
 */
class XrefVxm extends WireData implements Module {
	const MODEL              = 'ItemXrefVendor';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'VXM Item';
	const RESPONSE_TEMPLATE  = 'VXM X-ref {key} was {not} {crud}';
	const RECORDLOCKER_FUNCTION = 'vxm';

	const ORDERCODES_ITM_COST  = ['C', 'P'];
	const ITM_COSTBASE_ALLOWED = ['R', 'M'];

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	/**
	 * Return Query
	 * @return ItemXrefVendorQuery
	 */
	public function query() {
		return ItemXrefVendorQuery::create();
	}

	/**
	 * Return Query with filters applied to VendorID, Vendor ItemID, Item ID
	 * @return ItemXrefVendorQuery
	 */
	public function query_xref($vendorID, $vendoritemID, $itemID) {
		$q = $this->query();
		$q->filterByVendorid($vendorID);
		$q->filterByVendoritemid($vendoritemID);
		$q->filterByItemid($itemID);
		return $q;
	}

/* =============================================================
	Field Attributes, Functions
============================================================= */
	const PRECISION_MARGIN = 3;

	const FIELD_ATTRIBUTES = [
		'qty_percase' => ['type' => 'number', 'precision' => 2, 'max' => 999999.99],
		'minbuyqty'   => ['type' => 'number', 'precision' => 0, 'max' => 99999999],
		'listprice'   => ['type' => 'number', 'precision' => 2, 'max'  => 999999999.000],
	];

	public function init_field_attributes_config() {
		$this->init_configs();
		$configs = $this->configs;
		$attributes = self::FIELD_ATTRIBUTES;
		$attributes['listprice']   = ['type' => 'number', 'precision' => $configs->so->decimal_places_price, 'max' => 99999999.9999];
		$attributes['unit_cost']   = ['type' => 'number', 'precision' => $configs->po->decimal_places_cost, 'max' => 99999999.9999];
		$attributes['unit_qty']    = ['type' => 'number', 'precision' => 0, 'max' => 9999999];
		$attributes['unit_margin'] = ['type' => 'number', 'precision' => 3, 'max' => 99.999];
		$attributes['optioncode']  = ['type' => 'text', 'label' => $configs->ap->vxm_optioncode1_label, 'disabled' => $configs->ap->vxm_optioncode1_label == '', 'maxlength' => 8];
		$this->field_attributes = $attributes;
	}

	/**
	 * Return Field Attribute value
	 * @param  string $field Field Name
	 * @param  string $attr  Attribute Name
	 * @return mixed|bool
	 */
	public function field_attribute($field = '', $attr = '') {
		if (empty($field) || empty($attr)) {
			return false;
		}
		$this->init_field_attributes_config();
		if (array_key_exists($field, $this->field_attributes) === false) {
			return false;
		}
		if (array_key_exists($attr, $this->field_attributes[$field]) === false) {
			return false;
		}
		return $this->field_attributes[$field][$attr];
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Returns if Vendor Item ID exists
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @param  string $itemID       ITM Item ID'
	 * @return bool
	 */
	public function xref_exists($vendorID, $vendoritemID, $itemID) {
		$q = $this->query_xref($vendorID, $vendoritemID, $itemID);
		return boolval($q->count());
	}

	/**
	 * Return ItemXrefVendor
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor's Item ID'
	 * @param  string $itemID       ITM Item ID
	 * @return ItemXrefVendor
	 */
	public function xref($vendorID, $vendoritemID, $itemID) {
		$q = $this->query_xref($vendorID, $vendoritemID, $itemID);
		return $q->findOne();
	}

	/**
	 * Return ItemXrefVendor from Recordlocker Key
	 * @param  string $key Key (vendorID-vendoritemID-itemID)
	 * @return ItemXrefVendor
	 */
	public function xref_by_recordlocker_key($key) {
		$keys = explode(FunctionLocker::glue(), $key);
		$vendorID = $keys[0];
		$vendoritemID = $keys[1];
		$itemID = $keys[2];
		return $this->xref($vendorID, $vendoritemID, $itemID);
	}

	/**
	 * Return Existing or New X-ref
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor Item ID
	 * @return ItemXrefVendor
	 */
	public function get_create_xref($vendorID, $vendoritemID, $itemID) {
		if ($this->xref_exists($vendorID, $vendoritemID, $itemID)) {
			$record = $this->xref($vendorID, $vendoritemID, $itemID);
		} else {
			$vendoritemID = $vendoritemID == 'new' ? '' : $vendoritemID;
			$record = $this->new_xref();
			$record->setVendorid($vendorID);
			$record->setVendoritemid($vendoritemID);

			if ($this->itemid_exists($itemID)) {
				$record->setItemid($itemID);
			}
		}
		return $record;
	}

	/**
	 * Return ItemXrefVendor and set Defaults
	 * @return ItemXrefVendor
	 */
	public function new_xref() {
		$config_in = $this->get_config_in();
		$record = ItemXrefVendor::new();
		$record->setUom_purchase($config_in->default_uom_purchase);
		$record->setMinbuyqty(0);
		return $record;
	}

	/**
	 * Return Primary ItemXrefVendor
	 * @param  string $itemID Our Item ID
	 * @return ItemXrefVendor
	 */
	public function get_primary_poordercode_itemid($itemID) {
		$q = $this->query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return if Primary ItemXrefVendor for itemID exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function poordercode_primary_exists($itemID) {
		$q = $this->query();
		$q->filterByOuritemid($itemID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return $q->findOne();
	}

	/**
	 * Return Vendor IDs of Existing VXM items
	 * @return array
	 */
	public function vendorids() {
		$q = $this->query();
		$q->select(ItemXrefVendor::get_aliasproperty('vendorid'));
		return $q->find()->toArray();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->action) {
			switch ($values->text('action')) {
				case 'delete-xref':
					$this->input_delete($input);
					break;
				case 'update-vxm':
					$this->input_update($input);
					break;
				case 'delete-notes':
				case 'update-notes';
					$qnotes = $this->wire('modules')->get('QnotesItemVxm');
					$qnotes->process_input($input);
					break;
			}
		} else {
			$this->wire('session')->setFor('response', 'vxm', XrefResponse::response_error("No VXM Action specified"));
		}
	}

	/**
	 * Delete VXM Item from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_delete(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$vendorID = $values->text('vendorID');
		$vendoritemID = $values->text('vendoritemID');
		$itemID = $values->text('itemID');

		if ($this->xref_exists($vendorID, $vendoritemID, $itemID)) {
			$record = $this->xref($vendorID, $vendoritemID, $itemID);

			if (!$this->lockrecord($record)) {
				$key = $this->get_recordlocker_key($record);
				$message = self::DESCRIPTION_RECORD . " ($key)  was not saved, it is locked by " . $this->recordlocker->getLockingUser($record);
				$this->wire('session')->setFor('response', 'vxm', XrefResponse::response_error($key, $message));
				return false;
			}
			$record->delete();
			$response = $this->save_and_respond($record);
			$this->wire('session')->setFor('response', 'vxm', $response);
			return $response->has_success();
		}
		return true;
	}

	/**
	 * Update VXM Item from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_update(WireInput $input) {
		$this->init_configs();
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$vendorID = $values->text('vendorID');
		$vendoritemID = $values->text('original_vendoritemID') != $values->text('vendoritemID') ? $values->text('original_vendoritemID') : $values->text('vendoritemID');
		$itemID = $values->text('itemID');

		$record = $this->get_create_xref($vendorID, $vendoritemID, $itemID);


		if (!$record->isNew()) {
			if (!$this->lockrecord($record)) {
				$key = $this->get_recordlocker_key($record);
				$message = self::DESCRIPTION_RECORD . " ($key)  was not saved, it is locked by " . $this->recordlocker->getLockingUser($record);
				$this->wire('session')->setFor('response', 'vxm', XrefResponse::response_error("$key", $message));
				return false;
			}
		}
		$invalidfields = $this->update_record_input($record, $input);
		$response = $this->save_and_respond($record, $invalidfields);

		/**
		 * IF we saved this Item as the Primary PO ORDER then we have to update
		 * the other primary item to be a secondary
		 */
		if ($response->has_success() && !$record->isDeleted()) {
			$this->update_other_primary($record);
			if ($values->text('update_itm_cost') == 'true') {
				$this->update_itm_cost($record);
			}

			$this->update_itm_pricing($record);
		}
		$this->wire('session')->setFor('response', 'vxm', $response);
		return $response->has_success();
	}

	/**
	 * Updates VXM Item Record, Returns Invalid Fields
	 * @param  ItemXrefVendor  $record VXM Item Record
	 * @param  WireInput       $input  Input Data
	 * @return array
	 */
	public function update_record_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$invalidfields = array();

		$response = new XrefResponse();
		$response->set_action(XrefResponse::CRUD_UPDATE);
		$record->setVendoritemid($values->text('vendoritemID'));
		$itemID = $record->ouritemid;
		$invalidfields = $this->update_record_validated($record, $input);

		if ($this->is_key_modified($record) && !$record->isNew()) {
			$this->delete_recreate_record($record, $input);
		}
		$this->init_field_attributes_config();
		$record->setQty_percase($values->float('qty_percase', ['precision' => $this->field_attribute('qty_percase', 'precision'), 'max' => $this->field_attribute('qty_percase', 'max')]));
		$record->setMinbuyqty($values->float('minbuyqty', ['precision' => $this->field_attribute('minbuyqty', 'precision'), 'max' => $this->field_attribute('minbuyqty', 'max')]));
		$record->setListprice($values->float('listprice', ['precision' => $this->field_attribute('listprice', 'precision'), 'max' => $this->field_attribute('listprice', 'max')]));
		if ($this->configs->ap->use_vendor_cost_breaks()) {
			$this->update_record_unitx_input($record, $input);
		}
		$record->setDate_changed(date('Ymd'));
		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		return $invalidfields;
	}

	/**
	 * Deletes Record in Database, so then record can be saved
	 * NOTE: Used for When Keys are Updated since Propel doesn't keep track of keys
	 * NOTE: Sends Cobol Request for delete for original Record
	 * @param  ItemXrefVendor $record
	 * @return void
	 */
	public function delete_recreate_record(ItemXrefVendor $record, WireInput $input) {
		$array = $record->toArray();
		$original = new ItemXrefVendor();
		$original->fromArray($array);
		$original->setVendoritemid($record->originalvalues[ItemXrefVendor::get_aliasproperty('vendoritemid')]);
		$original->setOuritemid($record->originalvalues[ItemXrefVendor::get_aliasproperty('ouritemid')]);
		$original->delete();
		$this->update_dplus_cobol($original);

		$new =  new ItemXrefVendor();
		$new->fromArray($array);
		$new->save();
		$record = $new;
	}

	/**
	 * Update the unitcost and unitqty columns for record
	 * @param  ItemXrefVendor $record VXM record
	 * @param  WireInput      $input  Input Data
	 * @return void
	 */
	protected function update_record_unitx_input(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$sanitizer = $this->wire('sanitizer');

		if ($record->uompurchase) {
			$cost = $values->float('unitcost_base', ['precision' => $this->field_attribute('unit_cost', 'precision')]);
			$unitcost = $cost / $record->uompurchase->conversion;
			$record->setUnitcost_base($sanitizer->float($unitcost));
		}

		if ($this->configs->ap->use_vendor_cost_breaks() == false) {
			return true;
		}

		for ($i = 1; $i < ItemXrefVendor::UNITS_AVAILABLE + 1; $i++) {
			$col_qty = ucfirst(ItemXrefVendor::get_unitqty_column($i));
			$col_cost = ucfirst(ItemXrefVendor::get_unitcost_column($i));
			$function_unitqty = "set$col_qty";
			$function_unitcost = "set$col_cost";
			$record->$function_unitqty($values->float("unit_qty$i", ['precision' => $this->field_attribute('unit_qty', 'precision')]));

			if ($record->uompurchase) {
				$cost = $values->float("unit_cost$i", ['precision' => $this->field_attribute('unit_cost', 'precision')]);
				$unitcost = $cost / $record->uompurchase->conversion;
				$record->$function_unitcost($sanitizer->float($unitcost));
			} else {
				$record->$function_unitcost($values->float("unit_cost$i"));
			}
		}
	}

	/**
	 * Sets Record fields if valid, returns invalid fields
	 * @param  ItemXrefVendor $record VXM Item
	 * @param  WireInput      $input  Input Data
	 * @return array
	 */
	public function update_record_validated(ItemXrefVendor $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$validate = new VxmValidator();
		$invalid = array();

		$fields = array(
			'itemid' => array(
				'description' => 'Item ID',
				'input'       => 'itemID',
				'function'    => 'itemid'
			),
			'approvalcode' => array(
				'description' => 'Approval Code',
				'input'       => 'approvalcode',
				'function'    => 'approvalcode'
			),
			'uom_purchase' => array(
				'description' => 'UoM Purchase',
				'input'       => 'uom_purchase',
				'function'    => 'unitofm_purchase'
			),
			'vendorid' => array(
				'description' => 'Vendor ID',
				'input'       => 'vendorID',
				'function'    => 'vendorid'
			),
		);
		$validator = $this->wire('modules')->get('InputValidator');
		$validator->set_validator($validate)->set_input($input)->set_record($record)->set_validatefields($fields);
		$invalid = $validator->validate();
		$validator->set_valid_properties();

		if ($validate->ordercode($values->text('po_ordercode'))) {
			if ($values->text('po_ordercode') == ItemXrefVendor::POORDERCODE_PRIMARY) {
				if ($values->text('po_ordercode_validated') == 'true') {
					$record->setPo_ordercode($values->text('po_ordercode'));
				} else {
					$record->setPo_ordercode('');
				}
			} else {
				$record->setPo_ordercode($values->text('po_ordercode'));
			}
		} else {
			$invalid['po_ordercode'] = "PO Order Code";
		}

		if ($this->field_attribute('optioncode', 'disabled') === false) {
			$record->setOptioncode($values->text('optioncode', ['maxlength' => 8]));
		}
		if (array_key_exists('itemid', $invalid) === false) {
			$record->setIskit($values->yn('iskit'));
		}
		return $invalid;
	}

	/**
	 * Returns if Record is Modifying one of the Keys of the Record
	 * @param  ItemXrefVendor $record
	 * @return bool
	 */
	protected function is_key_modified(ItemXrefVendor $record) {
		$q = $this->query();
		$tablemap = $q->getTableMap();
		$primarykeys = array_keys($tablemap->getPrimaryKeys());
		$modified = $record->getModifiedColumns();

		foreach ($primarykeys as $key) {
			$col = $tablemap->translateFieldName($key, PropelTableMap::TYPE_FIELDNAME, $tablemap::TYPE_COLNAME);

			if ($record->isColumnModified($col)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * IF Order Code is primary, check if other primary exists to change it's order code
	 * @param  ItemXrefVendor $record X-ref
	 * @return void
	 */
	protected function update_other_primary(ItemXrefVendor $record) {
		if ($record->is_po_ordercode_primary() && $record->other_primary_poordercode_exists()) {
			$vxmitem = $record->get_other_primary_vxm_item();
			$vxmitem->setPo_ordercode(ItemXrefVendor::POORDERCODE_SECONDARY);
			$vxmitem->save();
			$this->update_dplus_cobol($vxmitem);
		}
	}

	/**
	 * Request Itm Costing Update
	 * @param  ItemXrefVendor $record [description]
	 * @return bool
	 */
	protected function update_itm_cost(ItemXrefVendor $record) {
		$allowed = $this->allow_itm_cost_update($record->vendorid, $record->vendoritemid, $record->itemid);
		$costchanged = $record->originalvalues[ItemXrefVendor::get_aliasproperty('unitcost_base')] != $record->unitcost_base;
		if ($allowed === false && $costchanged === false) {
			return false;
		}
		$itm = $this->wire('modules')->get('ItmCosting');
		return $itm->update_cost_from_vxm($record);
	}

	protected function update_itm_pricing(ItemXrefVendor $xref) {
		$config = $this->get_config_ap();

		if ($config->update_itm_pricing() && $xref->is_primary_vxmitem()){
			if ($xref->imitem->pricing->baseprice != $xref->get_listprice_uom_sale()) {
				$pricing = $this->wire('modules')->get('ItmPricing');
				$item = $pricing->get_pricing($xref->itemid);
				$item->setBaseprice($xref->get_listprice_uom_sale());
				$pricing->save_and_respond($item);
			}
		}
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemXrefVendor $record        Record to record response of database save
	 * @param  array          $invalidfields
	 * @return XrefResponse
	 */
	protected function save_and_respond(ItemXrefVendor $record, array $invalidfields = null) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new XrefResponse();
		$response->set_key($this->get_recordlocker_key($record));

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
		}

		if ($is_new) {
			$response->set_action(XrefResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$response->set_action(XrefResponse::CRUD_DELETE);
		} else {
			$response->set_action(XrefResponse::CRUD_UPDATE);
		}

		$response->build_message(self::RESPONSE_TEMPLATE);

		if ($response->has_success() && empty($invalidfields)) {
			$this->update_dplus_cobol($record);
		}
		return $response;
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the VXM file for this ITEM
	 * @param  ItemXrefVendor $item
	 * @return void
	 */
	public function update_dplus_cobol(ItemXrefVendor $item) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEVXM', "VENDORID=$item->vendorid", "VENDITEM=$item->vendoritemid", "OURITEM=$item->ouritemid");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Lock Record, validate User is locking Record
	 * @param  ItemXrefVendor $item
	 * @return bool
	 */
	public function lockrecord(ItemXrefVendor $item) {
		if (!$this->recordlocker->isLocked($this->get_recordlocker_key($item))) {
			$this->recordlocker->lock($this->get_recordlocker_key($item));
		}
		return $this->recordlocker->userHasLocked($this->get_recordlocker_key($item));
	}

	/**
	 * Return Key for VXM Item
	 * @param  ItemXrefVendor $item VXM Item
	 * @return string
	 */
	public function get_recordlocker_key(ItemXrefVendor $item) {
		return implode(FunctionLocker::glue(), [$item->vendorid, $item->vendoritemid, $item->ouritemid]);
	}

	/**
	 * Return Unit of Measure Purchases
	 * @return UnitofMeasurePurchase[]|ObjectCollection
	 */
	public function get_unitsofm_purchases() {
		return UnitofMeasurePurchaseQuery::create()->find();
	}

	/**
	 * Return Vendor by Vendor ID
	 * @param  string $vendorID Vendor ID
	 * @return Vendor
	 */
	public function get_vendor($vendorID) {
		return VendorQuery::create()->findOneById($vendorID);
	}

	/**
	 * Return if Vendor exists
	 * @param  string $vendorID Vendor ID
	 * @return bool
	 */
	public function vendor_exists($vendorID) {
		return boolval(VendorQuery::create()->filterById($vendorID)->count());
	}

	/**
	 * Return if itemID Exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function itemid_exists($itemID) {
		return boolval(ItemMasterItemQuery::create()->filterByItemid($itemID)->count());
	}

	/**
	 * Return Config IN
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return $this->wire('modules')->get('ConfigureIn')->config();
	}

	/**
	 * Return Config SO
	 * @return ConfigSalesOrder
	 */
	public function get_config_so() {
		return $this->wire('modules')->get('ConfigureSo')->config();
	}

	/**
	 * Return Config PO
	 * @return ConfigPo
	 */
	public function get_config_po() {
		return $this->wire('modules')->get('ConfigurePo')->config();
	}

	/**
	 * Return Config Ap
	 * @return ConfigAp
	 */
	public function get_config_ap() {
		return $this->getConfigAp();
	}

	public function getConfigAp() {
		return Configs\Ap::config();
	}

	/**
	 * Intialize configs
	 * @return void
	 */
	public function init_configs() {
		if ($this->configs == false) {
			$this->configs = new WireData();
			$this->configs->in = $this->get_config_in();
			$this->configs->so = $this->get_config_so();
			$this->configs->po = $this->get_config_po();
			$this->configs->ap = $this->get_config_ap();
		}
	}

	/**
	 * Return if Field has Error
	 * NOTE: Uses $session->response_itm->fields to derive this
	 * @param  string $inputname Input name e.g. itemid
	 * @return bool
	 */
	public function field_has_error($inputname) {
		$response = $this->response();
		return ($response) ? array_key_exists($inputname, $response->fields) : false;
	}

	/**
	 * Return Response
	 * @return XrefResponse|null
	 */
	public function response() {
		return $this->wire('session')->getFor('response', 'vxm');
	}

	/**
	 * Return if ITM costing can be updated
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor Item ID
	 * @param  string $itemID       Item ID
	 * @return bool
	 */
	public function allow_itm_cost_update($vendorID, $vendoritemID, $itemID) {
		if ($this->xref_exists($vendorID, $vendoritemID, $itemID) == false) {
			return false;
		}
		$xref = $this->xref($vendorID, $vendoritemID, $itemID);
		return $this->allow_itm_cost_update_xref($xref);
	}

	/**
	 * Return if ITM costing can be updated
	 * @param  ItemXrefVendor $xref Vendor X-ref
	 * @return bool
	 */
	public function allow_itm_cost_update_xref(ItemXrefVendor $xref) {
		if ($this->configs->ap->update_itm_cost($xref->imitem->standardcostbasedon) == false) {
			return false;
		}

		if (in_array($xref->imitem->standardcostbasedon, self::ITM_COSTBASE_ALLOWED) == false) {
			return false;
		}

		if (in_array($xref->po_ordercode, self::ORDERCODES_ITM_COST) == false) {
			return false;
		}

		if ($xref->costing_xref_for_itemid_exists()) {
			return false;
		}
		return true;
	}

	/**
	 * Return Base Price for X-ref
	 * NOTE: Will use itm BASE Price if configured
	 * @param  ItemXrefVendor $xref Vendor X-ref
	 * @return float
	 */
	public function baseprice(ItemXrefVendor $xref) {
		if ($this->use_itm_baseprice($xref)) {
			return $xref->imitem->pricing->baseprice;
		}
		return $xref->get_listprice_uom_sale();
	}

	/**
	 * Return if ITM Base price should be used for VXM baseprice
	 * @param  ItemXrefVendor $xref Vendor X-ref
	 * @return bool
	 */
	public function use_itm_baseprice(ItemXrefVendor $xref) {
		$config = $this->get_config_ap();
		return ($config->update_itm_pricing() === false || $xref->is_primary_vxmitem() === false);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus VXM CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for VXM',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {
		$this->recordlocker = new FunctionLocker();
		$this->recordlocker->setFunction(self::RECORDLOCKER_FUNCTION);
		$this->recordlocker->setUser($this->wire('user'));
		$this->field_attributes = self::FIELD_ATTRIBUTES;
	}
}
