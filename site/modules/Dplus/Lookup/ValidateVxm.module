<?php namespace ProcessWire;

use Propel\Runtime\ActiveQuery\Criteria;

use ItemMasterItemQuery, ItemMasterItem;
use ItemXrefVendorQuery, ItemXrefVendor;

/**
 * ValidateCxm
 *
 * Class for validating Cxm fields
 */
class ValidateVxm extends WireData implements Module {
/* =============================================================
	AP Functions
============================================================= */
	/**
	 * Return if Vendor ID is Valid
	 * @param  string $vendorID Vendor ID
	 * @return bool
	 */
	public function vendorid($vendorID) {
		return $this->validate->ap->vendorid($vendorID);
	}

/* =============================================================
	IN Functions
============================================================= */
	/**
	 * Return if Item ID is Valid
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function itemid($itemID) {
		return $this->validate->in->itemid_exists($itemID);
	}

	/**
	 * Return if Unit of Measure Purchase Code is valid
	 * @param  string $code Unit of Measure Sale Code
	 * @return bool
	 */
	public function unitofm_purchase($code) {
		return $this->validate->in->unitofm_purchase($code);
	}

/* =============================================================
	VXM Functions
============================================================= */
	/**
	 * Return if PO order code Exists
	 * @param  string $option PO Order Code Option
	 * @return bool
	 */
	public function ordercode($option) {
		return array_key_exists($option, ItemXrefVendor::OPTIONS_POORDERCODE);
	}

	/**
	 * Return if approval code Exists
	 * @param  string $option Approval Code
	 * @return bool
	 */
	public function approvalcode($option) {
		return array_key_exists($option, ItemXrefVendor::OPTIONS_APPROVALCODE);
	}

	/**
	 * Validate if Vendor ID has a X-ref for Item ID
	 * @param  string $vendorID Vendor ID
	 * @param  string $itemID   Item ID
	 * @return bool
	 */
	public function vendor_has_xref_itemid($vendorID, $itemID) {
		if ($this->vendorid($vendorID) === false || $this->itemid($itemID) === false) {
			return false;
		}
		$q = ItemXrefVendorQuery::create()->filterByItemid($itemID)->filterByVendorid($vendorID);
		return boolval($q->count());
	}

	/**
	 * Validate if VXM X-ref exists
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor Item ID
	 * @return bool
	 */
	public function exists($vendorID, $vendoritemID) {
		return $this->modules->get('XrefVxm')->vxm_item_exists($vendorID, $vendoritemID);
	}

	/**
	 * Validate Vendor has Primary X-ref
	 * @param  string $vendorID     Vendor ID
	 * @param  string $vendoritemID Vendor Item ID
	 * @return bool
	 */
	public function vendor_has_primary($vendorID, $itemID) {
		$q = ItemXrefVendorQuery::create()->filterByItemid($itemID)->filterByVendorid($vendorID);
		$q->filterByPo_ordercode(ItemXrefVendor::POORDERCODE_PRIMARY);
		return boolval($q);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'VXM Validate Module',
			'version' => 101,
			'summary' => 'Handles VXM Fields Validation',
			'singular' => true,
			'autoload' => true,
			'installs' => array()
		);
	}

	public function init() {
		$this->validate = new WireData();
		$this->validate->ap  = $this->wire('modules')->get('ValidateAp');
		$this->validate->in  = $this->wire('modules')->get('ValidateIn');
		$this->modules = $this->wire('modules');
	}
}
