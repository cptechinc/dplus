<?php namespace ProcessWire;

use Propel\Runtime\ActiveQuery\Criteria;

use UnitofMeasurePurchaseQuery, UnitofMeasurePurchase;
use UnitofMeasureSaleQuery, UnitofMeasureSale;

/**
 * ValidateUom
 *
 * //TODO DEPRECATE
 *
 * Class for Looking up / Validating Items through ITM and different X-refs
 *
 * @property string $exists  UoM Exists
 * @property string $request What was sent to find UoM
 * @property string $source  sale / purchase
 */
class ValidateUom extends WireData implements Module {
	public function __construct() {
		$this->exists  = false;
		$this->source  = '';
		$this->request = '';
	}

	/**
	 * Returns if Unit of Measurement Sale Code Exists
	 * @param  string $code Unit of Measurement Code
	 * @return bool
	 */
	public function validate_sale($code) {
		$this->source = 'sale';
		$this->request = $code;
		$q = UnitofMeasureSaleQuery::create();
		$this->exists = boolval($q->filterByCode($code)->count());
		return $this->exists;
	}

	/**
	 * Returns if Unit of Measurement Purchase Code Exists
	 * @param  string $code Unit of Measurement Code
	 * @return bool
	 */
	public function validate_purchase($code) {
		$this->source = 'sale';
		$this->request = $code;
		$q = UnitofMeasurePurchaseQuery::create();
		$this->exists = boolval($q->filterByCode($code)->count());
		return $this->exists;
	}


	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Validate UoM Module',
			'version' => 101,
			'summary' => 'Handles Validation of Unit of Measurement',
			'singular' => true,
			'autoload' => true,
			'installs' => array()
		);
	}
}
