<?php namespace ProcessWire;

use Propel\Runtime\ActiveQuery\Criteria;

use ItemMasterItemQuery, ItemMasterItem;
use InvHazmatItemQuery, InvHazmatItem;

/**
 * ValidateItm
 *
 * Class for validating Itm fields
 */
class ValidateItm extends WireData implements Module {
/* =============================================================
	Itm Item Functions
============================================================= */
	/**
	 * Return if Preference Value is valid
	 * @param  string $value  Preference Value
	 * @return bool
	 */
	public function preference($value) {
		return in_array($value, ItemMasterItem::OPTIONS_PREFERENCE);
	}

	/**
	 * Return if Producer Value is valid
	 * @param  string $value  Producer Value
	 * @return bool
	 */
	public function producer($value) {
		return array_key_exists($value, ItemMasterItem::OPTIONS_PRODUCER);
	}

	/**
	 * Return if Preference Value is valid
	 * @param  string $value  Preference Value
	 * @return bool
	 */
	public function documentation($value) {
		return in_array($value, ItemMasterItem::OPTIONS_DOCUMENTATION);
	}

/* =============================================================
	Itm Hazmat Functions
============================================================= */
	/**
	 * Return if Group is valid Hazmat Pack Group
	 * @param  string $group
	 * @return bool
	 */
	public function hazmat_packgroup($group) {
		return in_array($group, InvHazmatItem::OPTIONS_PACKGROUP);
	}

	/**
	 * Return if $class is valid Hazmat Class
	 * @param  string $class
	 * @return bool
	 */
	public function hazmat_class($group) {
		return true;
	}

	/**
	 * Return if $nbr is valid UN Nbr
	 * @param  string $nbr UN Nbr
	 * @return bool
	 */
	public function hazmat_unnbr($nbr) {
		return true;
	}

	/**
	 * Return if $label is valid Label Value
	 * @param  string $label Label
	 * @return bool
	 */
	public function hazmat_label($label) {
		return true;
	}

	/**
	 * Return if Hazmat Allow Air value is valid
	 * @param  string $val Allow Air
	 * @return bool
	 */
	public function hazmat_allowair($val) {
		return in_array(strtoupper($val), ['Y', 'N']);
	}

/* =============================================================
	AR Functions
============================================================= */
	/**
	 * Return if Cust ID is Valid
	 * @param  string $custID Customer ID
	 * @return bool
	 */
	public function custid($custID) {
		return $this->validate->ar->custid($custID);
	}

/* =============================================================
	IN Functions
============================================================= */
	/**
	 * Return if Item ID is Valid
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function itemid_exists($itemID) {
		return $this->validate->in->itemid_exists($itemID);
	}

	/**
	 * Return if Item Type is Valid
	 * @param  string $type Item Type
	 * @return bool
	 */
	public function itemtype($type) {
		return $this->validate->in->itemtype($type);
	}

	/**
	 * Return if Inventory Stock Code is valid
	 * @param  string $code Inventory Stock Code
	 * @return bool
	 */
	public function stockcode($code) {
		return $this->validate->in->stockcode($code);
	}

	/**
	 * Return if Inventory Stock Code is valid
	 * @param  string $code Inventory Stock Code
	 * @return bool
	 */
	public function itemgroup($code) {
		return $this->validate->in->itemgroup($code);
	}

	/**
	 * Return if Inventory Price Code is valid
	 * @param  string $code Inventory Price Code
	 * @return bool
	 */
	public function pricecode($code) {
		return $this->validate->in->pricecode($code);
	}

	/**
	 * Return if Inventory Commission Group Code is valid
	 * @param  string $code Inventory Commission Group Code
	 * @return bool
	 */
	public function commissiongroup($code) {
		return $this->validate->in->commissiongroup($code);
	}

	/**
	 * Return if Inventory Special Item Code is valid
	 * @param  string $code Inventory Special Item Group Code
	 * @return bool
	 */
	public function specialitem($code) {
		return $this->validate->in->specialitem($code);
	}

	/**
	 * Return if Inventory Assortment Code is valid
	 * @param  string $code Inventory Special Assortment Code
	 * @return bool
	 */
	public function assortmentcode($code) {
		return $this->validate->in->assortmentcode($code);
	}

	/**
	 * Return if Unit of Measure Sale Code is valid
	 * @param  string $code Unit of Measure Sale Code
	 * @return bool
	 */
	public function unitofm_sale($code) {
		return $this->validate->in->unitofm_sale($code);
	}

	/**
	 * Return if Inventory Assortment Code is valid
	 * @param  string $code Inventory Special Assortment Code
	 * @return bool
	 */
	public function tariffcode($code) {
		return $this->validate->in->tariffcode($code);
	}

	/**
	 * Return if Inventory Assortment Code is valid
	 * @param  string $code Inventory Special Assortment Code
	 * @return bool
	 */
	public function countrycode($code) {
		return $this->validate->in->countrycode($code);
	}

	/**
	 * Return if Msds Code is valid
	 * @param  string $code Msds Code
	 * @return bool
	 */
	public function msdscode($code) {
		return $this->validate->in->msdscode($code);
	}

/* =============================================================
	AP Functions
============================================================= */
	public function buyercode($code) {
		return $this->validate->ap->buyercode($code);
	}

/* =============================================================
	SO Functions
============================================================= */
	/**
	 * Return if Motor Freight Code is valid
	 * @param  string $code  Motor Freight Code
	 * @return bool
	 */
	public function freightcode($code) {
		return $this->validate->so->freightcode($code);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'ITM Validate Module',
			'version' => 101,
			'summary' => 'Handles ITM Fields Validation',
			'singular' => true,
			'autoload' => true,
			'installs' => array()
		);
	}

	public function init() {
		$this->validate = new WireData();
		$this->validate->ar  = $this->wire('modules')->get('ValidateAr');
		$this->validate->ap  = $this->wire('modules')->get('ValidateAp');
		$this->validate->in  = $this->wire('modules')->get('ValidateIn');
		$this->validate->so  = $this->wire('modules')->get('ValidateSo');
		$this->modules = $this->wire('modules');
	}
}
