<?php namespace ProcessWire;

class Filters extends WireData implements Module {

	const MODULE_ALIASES = array(
		'salesorder' => 'FilterSalesOrders',
		'sales-order' => 'FilterSalesOrders',
		'saleshistory' => 'FilterSalesHistory',
		'sales-history' => 'FilterSalesHistory',
		'quote' => 'FilterQuotes',
		'purchaseorder'  => 'FilterPurchaseOrder',
		'purchase-order' => 'FilterPurchaseOrder',
		'purchasehistory'  => 'FilterApInvoices',
		'purchase-history' => 'FilterApInvoices',
		'bookings' => 'FilterBookings',
		'vendors'  => 'FilterVendors'
	);

	/**
	 * Returns Filter Module
	 * @param  string $module Filter Module Name
	 * @return Module
	 */
	public function get_filter($module) {
		$modules = $this->wire('modules');
		$filter = self::MODULE_ALIASES[strtolower($module)];
		return $modules->get($filter);
	}

	public function update() {
		$info = self::getModuleInfo();
		$modules = $this->wire('modules');
		$modules->refresh();

		foreach ($info['installs'] as $module_name) {
			$modules->install($module_name);
		}
	}


	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Filters Module',
			'version' => 101,
			'summary' => 'Handles Loading of Filters Modules',
			'singular' => true,
			'autoload' => true,
			'installs' => array(
				'FilterSalesOrders',
				'FilterSalesHistory',
				'FilterQuotes',
				'FilterPurchaseOrder',
				'FilterApInvoices',
				'FilterBookings',
				'FilterVendors',
				'FilterItemXrefUpc',
				'FilterItemMaster',
				'FilterItemXrefVxm',
				'FilterQnotes',
				'FilterCountryCodes',
			)
		);
	}
}
