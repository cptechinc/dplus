<?php namespace ProcessWire;

use Propel\Runtime\ActiveQuery\Criteria;
use ItemXrefVendorQuery, ItemXrefVendor;

/**
 * FilterItemXrefVendor
 * Filters Input to Retreive ItemXrefVendor objects
 *
 * @property ItemXrefVendorQuery $query
 */
class FilterXrefItemVxm extends WireData implements Module {
	public function __construct() {
		$this->query = ItemXrefVendorQuery::create();
	}

	/**
	 * Returns Query
	 * @return ItemXrefVendorQuery
	 */
	public function get_query() {
		return $this->query;
	}

	/**
	 * Initializes Query
	 * NOTE: Filters by Sales Rep if provided user is a Sales rep
	 * @return void
	 */
	public function init_query() {
		$this->query = ItemXrefVendorQuery::create();
	}

	/**
	 * Applies Filters to the Query
	 * NOTE:: Filters include Customer, ItemXrefVendor #, ItemXrefVendor Date, Review Date, Expire Date, ItemXrefVendor Total, ItemXrefVendor Status
	 *
	 * @param  WireInput $input Object that Contains the $_GET array for values to filter on
	 * @return void
	 */
	public function filter_input(WireInput $input) {
		$this->itemid_input($input);
		$this->vendorid_input($input);
		$this->vendoritemid_input($input);
	}

/* =============================================================
	Input Functions
============================================================= */
	/**
	 * Filters Query by Item ID
	 * @param  WireInput $input Input Data
	 * @return self
	 */
	public function itemid_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		$itemID = $values->ouritemID ? $values->text('ouritemID') : $values->text('itemID');
		return $this->itemid($itemID);
	}

	/**
	 * Filters Query by Customer ID
	 * @param  WireInput $input Input Data
	 * @return self
	 */
	public function vendorid_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		if ($values->vendorID) {
			$this->vendorid($values->text('vendorID'));
		}
		return $this;
	}

	/**
	 * Filters Query by Customer ID
	 * @param  WireInput $input Input Data
	 * @return self
	 */
	public function vendoritemid_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		if ($values->vendoritemID) {
			$this->vendoritemid($values->text('vendoritemID'));
		}
		return $this;
	}

/* =============================================================
	Base Filter Functions
============================================================= */
	/**
	 * Filters Query by Item ID
	 * @param  string|array $itemID Item ID(s)
	 * @return self
	 */
	public function itemid($itemID) {
		if ($itemID) {
			$this->query->filterByItemid($itemID);
		}
		return $this;
	}

	/**
	 * Filters Query by Vendor ID
	 * @param  string|array  Vendor ID(s)
	 * @return self
	 */
	public function vendorid($vendorID) {
		if ($vendorID) {
			$this->query->filterByVendorid($vendorID);
		}
		return $this;
	}

	/**
	 * Filters Query by Vendor Item ID
	 * @param  string|array  Vendor Item ID(s)
	 * @return self
	 */
	public function vendoritemid($vendoritemID) {
		if ($vendoritemID) {
			$this->query->filterByVendoritemid($vendoritemID);
		}
		return $this;
	}

	/**
	 * Searches the ItemXrefVendor Table to find vendors that match the query provided
	 * @param  string $q Search Query
	 * @return void
	 */
	public function search($q) {
		$columns = array(
			ItemXrefVendor::get_aliasproperty('ouritemid'),
			ItemXrefVendor::get_aliasproperty('vendoritemid'),
			ItemXrefVendor::get_aliasproperty('description')
		);
		$this->query->search_filter($columns, strtoupper($q));
	}

/* =============================================================
	Misc Query Functions
============================================================= */
	/**
	 * Adds the Sort By to the query
	 * @param  Page   $page
	 * @return void
	 */
	public function apply_sortby(Page $page) {
		if ($page->has_orderby()) {
			$orderbycolumn = $page->orderby_column;
			$sort = $page->orderby_sort;
			$tablecolumn = ItemXrefVendor::get_aliasproperty($orderbycolumn);
			$this->query->sortBy($tablecolumn, $sort);
		} else {
			$this->query->orderByVendoritemid('ASC');
		}
	}

	/**
	 * Return Position of VXM item in Results
	 * @param  ItemXrefVendor $item VXM Item
	 * @return int
	 */
	public function position(ItemXrefVendor $item) {
		$items = $this->query->find();
		return $items->search($item);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso filter X-ref Item VXM Module',
			'version' => 101,
			'summary' => 'Handles X-ref Item VXM Filtering',
			'singular' => true,
			'autoload' => true,
		);
	}
}
