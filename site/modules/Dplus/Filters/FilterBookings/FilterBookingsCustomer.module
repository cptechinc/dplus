<?php namespace ProcessWire;

use BookingDayCustomerQuery, BookingDayCustomer;

use Propel\Runtime\ActiveQuery\Criteria;

require_once(__DIR__ . '/FilterBookingsUser.module');

class FilterBookingsCustomer extends FilterBookingsUser implements Module {
	protected $className ='FilterBookingsCustomer';

	/**
	 * Query Class for the Bookings Customer table
	 * @var BookingDayCustomerQuery
	 */
	protected $query;

	/**
	 * Module Initilization
	 * Sets $this->query && $this->user
	 * @return void
	 */
	public function init() {
		$this->query = BookingDayCustomerQuery::create();
		$this->user = $this->wire('user');
	}

	/**
	 * Return query with filters applied
	 * NOTE: Groups results by Custid
	 * @param  WireInput $input Object contatining $_GET values
	 * @return BookingDayCustomerQuery    Query with filters applied
	 */
	public function get_bookings_by_customer(WireInput $input) {
		$this->query = BookingDayCustomerQuery::create();
		$this->determine_interval($input);
		$this->select_bookings_by_customer();
		$this->filter_user();
		$this->filter_bookdate($input);
		return $this->query;
	}

	/**
	 * Return query with filters applied
	 * NOTE: Groups results by Custid, Shiptoid
	 * @param  WireInput $input Object contatining $_GET values
	 * @return BookingDayCustomerQuery    Query with filters applied
	 */
	public function get_bookings_by_shipto(WireInput $input) {
		$this->query = BookingDayCustomerQuery::create();
		$this->determine_interval($input);
		$this->select_bookings_by_shipto();
		$this->filter_user();
		$this->filter_bookdate($input);
		$this->filter_customer($input);
		$this->filter_shipto($input);
		return $this->query;
	}

	/**
	 * Adds Columns, Grouping to the query depending on the Interval
	 * @return void
	 */
	public function select_interval() {
		switch ($this->interval) {
			case 'month':
				$column_date = BookingDayCustomer::get_aliasproperty('bookingdate');
				$column_amt = BookingDayCustomer::get_aliasproperty('amount');
				$this->query->withColumn("CAST(CONCAT(YEAR($column_date), LPAD(MONTH($column_date), 2, '0'), '01') AS UNSIGNED)", 'bookingdate');
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->withColumn("MONTH($column_date)", 'month');
				$this->query->withColumn("YEAR($column_date)", 'year');
				$this->query->groupBy(['year', 'month']);
				break;
			case 'day':
				$column_date = BookingDayCustomer::get_aliasproperty('bookingdate');
				$column_amt = BookingDayCustomer::get_aliasproperty('amount');
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->groupBy($column_date);
				break;
		}
	}

	/**
	 * Adds Sum column, groups by custid
	 * @return void
	 */
	public function select_bookings_by_customer() {
		$column_amt = BookingDayCustomer::get_aliasproperty('amount');
		$column_custid   = BookingDayCustomer::get_aliasproperty('custid');

		switch ($this->interval) {
			case 'month':
				$column_custid   = BookingDayCustomer::get_aliasproperty('custid');
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->groupBy([$column_custid]);
				break;
			case 'day':
				$column_date = BookingDayCustomer::get_aliasproperty('bookingdate');
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->groupBy([$column_custid, $column_date]);
				break;
		}
	}
	/**
	 * Adds Sum column, groups by custid, shiptoid
	 * @return void
	 */
	public function select_bookings_by_shipto() {
		$column_amt = BookingDayCustomer::get_aliasproperty('amount');
		$column_custid   = BookingDayCustomer::get_aliasproperty('custid');
		$column_shiptoid = BookingDayCustomer::get_aliasproperty('shiptoid');

		switch ($this->interval) {
			case 'month':
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->groupBy([$column_custid, $column_shiptoid]);
				break;
			case 'day':
				$column_date = BookingDayCustomer::get_aliasproperty('bookingdate');
				$this->query->withColumn("SUM($column_amt)", 'amount');
				$this->query->groupBy([$column_custid, $column_shiptoid, $column_date]);
				break;
		}
	}

	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso Bookings By Customer Filter',
				'version' => 101,
				'summary' => 'Handles Bookings by Customer Filter',
				'singular' => true,
				'autoload' => true,
				'requires' => array(
					'FilterBookings',
				),
			);
		}
}
