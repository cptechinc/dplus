<?php namespace ProcessWire;

use Purl\Url;

/**
 * Module that handles the editing of the ITM item X-refs
 */
class ItmXrefs extends WireData implements Module {
	const MODEL              = 'ItemMasterItem';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'ITM Item';
	const DESCRIPTION_RECORD = 'ITM Item';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->xrefs = new WireData();
		$this->xrefs->upcx = false;
		$this->xrefs->cxm = false;
	}

	public function init2() {
		$this->xrefs->cxm = $modules->get('XrefCxm');
	}

/* =============================================================
	CRUD Proccessing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$itm = $this->wire('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');

		if ($values->action) {
			if ($itm->item_exists($itemID)) {
				if ($values->text('action') == 'update-itm-xrefs') {
					$response = $this->process_input_xref($input);
				}
			} else {
				$response = $itm->create_error_response($itemID, "Item $itemID does not exist");
			}
		} else {
			$response = $itm->create_error_response($itemID, "No Action was specified");
		}
		$this->wire('session')->response_itm = $response;
	}


	/**
	 * Takes Input, validates it's for an Item
	 * Updates Item
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_xref(WireInput $input) {
		$itm = $this('modules')->get('Itm');
		$recordlocker = $this('modules')->get('RecordLockerUser');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($values->text('itemID'));
		$record = $itm->get_item($itemID);

		/**
		 * Create lock for ITM code if not already locked.
		 */
		if (!$recordlocker->function_locked('itm', $itemID)) {
			$recordlocker->create_lock('itm', $itemID);
		}

		if ($record->isNew() || $recordlocker->function_locked_by_user('itm', $itemID)) {
			if ($values->text('action') == 'update-itm-xrefs') {
				$record->setSupercededby(strtoupper($values->text('supercededby')));

				if ($itm->item_exists($values->text('supercededby'))) {
					$response_itm = $itm->save_and_process_response($record);
				} else {
					$response_itm = $itm->create_error_response($record->itemid, "Supercede Item $record->supercededby does not exist");
				}

				$this->send_cxm_update($input);
			} else {
				$message = self::DESCRIPTION_RECORD . " ($record->itemid) was not saved, no action was specified";
				$response_itm = $itm->create_error_response($record->itemid, $message);
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " ($record->itemid)  was not saved, it is locked by " . $recordlocker->get_locked_user('itm', $itemID);
			$response_itm = $itm->create_error_response($record->itemid, $message);
		}
		return $response_itm;
	}

/* =============================================================
	Request Functions
============================================================= */
	/**
	 * Send Request to Update the Short Item ID using the XrefCxm module
	 * @param  WireInput $input
	 * @return void
	 */
	protected function send_cxm_update(WireInput $input)  {
		$cxm = $this('modules')->get('XrefCxm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($values->text('itemID'));

		if (!$cxm->cxm_shortitem_exists($itemID) ||$cxm->get_cxm_shortitem($itemID)->custitemid != $values->text('cxm_custitemid')) {
			$data_cxm = array('action' => 'update-cxm-shortitem', 'itemID' => $itemID, 'custitemid' => $values->text('cxm_custitemid'));
			$input_cxm = new WireInput();
			$input_cxm->$rm->setArray($data_cxm);
			$cxm->process_input($input_cxm);
		}
	}

/* =============================================================
	URL Functions
============================================================= */
	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefsURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_upcxURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit UPC for Item
	 * @param  string $itemID Item ID
	 * @param  string $upc    UPC Code
	 * @return string
	 */
	public function get_upcURL($itemID, $upc = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('itemID', $itemID);

		if ($upc) {
			$url->query->set('upc', $upc);
		}
		return $url->getUrl();
	}

	/**
	 * Return URL to delete UPC for Item
	 * @param  string $itemID Item ID
	 * @param  string $upc    UPC Code
	 * @return string
	 */
	public function get_upc_deleteURL($itemID, $upc) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('action', 'remove-upcx');
		$url->query->set('itemID', $itemID);
		$url->query->set('upc', $upc);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_vxmURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-vxm")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view VXM Item
	 * @param  string  $itemID       Item ID
	 * @param  string  $vendorID     Vendor ID
	 * @param  string  $vendoritemID Vendor's Item ID
	 * @return string
	 */
	public function get_vxm_itemURL($itemID, $vendorID = '', $vendoritemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('itemID', $itemID);

		if ($vendorID) {
			$url->query->set('vendorID', $vendorID);
		}

		$url->query->set('vendoritemID', $vendoritemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view Item ID VXM List
	 * @param  string  $itemID       Item ID
	 * @return string
	 */
	public function get_vxm_itemidURL($itemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}


	/**
	 * Return URL to Delete VXM Item
	 * @param  string  $itemID       Item ID
	 * @param  string  $vendorID     Vendor ID
	 * @param  string  $vendoritemID Vendor's Item ID
	 * @return string
	 */
	public function get_vxm_item_deleteURL($itemID, $vendorID, $vendoritemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('action', 'remove-vxm-item');
		$url->query->set('itemID', $itemID);

		if ($vendorID) {
			$url->query->set('vendorID', $vendorID);
		}

		$url->query->set('vendoritemID', $vendoritemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_cxmURL($itemID, $focus = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-cxm")->url);
		$url->query->set('itemID', $itemID);
		if ($focus) {
			$url->query->set('focus', $focus);
		}
		return $url->getUrl();
	}


	/**
	 * Return URL to view CXM Item
	 * @param  string  $itemID      Item ID
	 * @param  string  $custID      Customer ID
	 * @param  string  $custitemID  Customer's Item ID
	 * @return string
	 */
	public function get_cxm_itemURL($itemID, $custID = '', $custitemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-cxm')->url);
		$url->query->set('itemID', $itemID);

		if ($custID) {
			$url->query->set('custID', $custID);
		}

		$url->query->set('custitemID', $custitemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to Delete CXM Item
	 * @param  string  $itemID     Item ID
	 * @param  string  $custID     Customer ID
	 * @param  string  $custitemID Customer's Item ID
	 * @return string
	 */
	public function get_cxm_item_deleteURL($itemID, $custID, $custitemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-cxm')->url);
		$url->query->set('action', 'remove-cxm-item');
		$url->query->set('itemID', $itemID);

		if ($custID) {
			$url->query->set('custID', $custID);
		}

		$url->query->set('custitemID', $custitemID);
		return $url->getUrl();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM XRefs CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Xrefs',
			'singular' => true,
			'autoload' => true,
		);
	}

	/**
	 * Sets up Hook Functions for pages that have itm-xrefs as a parent
	 * @return void
	 */
	public function init() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefsURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefsURL($itemID);
		});

		$this->add_pagehooks_upcx();
		$this->add_pagehooks_vxm();
		$this->add_pagehooks_cxm();
	}

	public function add_pagehooks_upcx() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_upcxURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_upcxURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::upc_create_itemidURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_upcURL($itemID, 'new');
		});

		$this->addHook("Page(pw_template=$templates)::upc_deleteURL", function($event) {
			$p = $event->object;
			$upc    = $event->arguments(0);
			$event->return = $this->get_upc_deleteURL($p->itemID, $upc);
		});

		$this->addHook("Page(pw_template=$templates)::upcURL", function($event) {
			$p = $event->object;
			$upc    = $event->arguments(0);
			$event->return = $this->get_upcURL($p->itemID, $upc);
		});

		$this->addHook("Page(pw_template=$templates)::upc_listURL", function($event) {
			$p = $event->object;
			$event->return = $this->get_upcURL($p->itemID);
		});

		$this->addHookProperty('Page(pw_template=itm-xrefs-upcx)::upc', function($event) {
			$p = $event->object;
			$event->return = $p->fullURL->query->get('upc');
		});

		$this->addHookProperty('Page(pw_template=itm-xrefs-upcx)::itemID', function($event) {
			$p = $event->object;
			$event->return = $p->fullURL->query->get('itemID');
		});
	}

	public function add_pagehooks_vxm() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_vxmURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_vxmURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_itemidURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$event->return = $this->get_vxm_itemidURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_itemURL", function($event) {
			$p = $event->object;
			$vendorID = $event->arguments(0);
			$vendoritemID = $event->arguments(1);
			$itemID = $p->itemID;
			$event->return = $this->get_vxm_itemURL($itemID, $vendorID, $vendoritemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_item_newURL", function($event) {
			$p = $event->object;
			$itemID = $p->itemID;
			$event->return = $this->get_vxm_itemURL($itemID, '','new');
		});

		$this->addHook("Page(pw_template=$templates)::vxm_item_deleteURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$vendorID = $event->arguments(1);
			$vendoritemID = $event->arguments(2);
			$event->return = $this->get_vxm_item_deleteURL($itemID, $vendorID, $vendoritemID);
		});
	}

	public function add_pagehooks_cxm() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_cxmURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_cxmURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_itemURL", function($event) {
			$p = $event->object;
			$custID = $event->arguments(0);
			$custitemID = $event->arguments(1);
			$itemID = $p->itemID;
			$event->return = $this->get_cxm_itemURL($itemID, $custID, $custitemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_deleteURL", function($event) {
			$p = $event->object;
			$custID = $event->arguments(0);
			$custitemID = $event->arguments(1);
			$itemID = $p->itemID;
			$event->return = $this->get_cxm_item_deleteURL($itemID, $custID, $custitemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_newURL", function($event) {
			$p = $event->object;
			$itemID = $p->itemID;
			$event->return = $this->get_cxm_itemURL($itemID, '','new');
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_exitURL", function($event) {
			$item = $event->arguments(0);
			$custID = $item->custid;
			$custitemID = $item->custitemid;
			$event->return = $this->get_itm_xrefs_cxmURL($item->itemid, "$custID-$custitemID");
		});
	}
}
