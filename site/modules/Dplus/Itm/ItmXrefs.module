<?php namespace ProcessWire;

use Purl\Url;

/**
 * Module that handles the editing of the ITM item X-refs
 */
class ItmXrefs extends WireData implements Module {
	const MODEL              = 'ItemMasterItem';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'ITM Item';
	const DESCRIPTION_RECORD = 'ITM Item';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->xrefs = new WireData();
		$this->xrefs->upcx = false;
		$this->xrefs->cxm = false;
	}

	public function init2() {
		$this->xrefs->cxm = $modules->get('XrefCxm');
	}

/* =============================================================
	CRUD Proccessing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$itm = $this->wire('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');

		if ($values->action) {
			if ($itm->item_exists($itemID)) {
				if ($values->text('action') == 'update-itm-xrefs') {
					$response = $this->process_input_xref($input);
				}
			} else {
				$response = ItmResponse::response_error($itemID, "Item $itemID does not exist");
			}
		} else {
			$response = ItmResponse::response_error($itemID, "No Action was specified");
		}
		$this->wire('session')->response_itm = $response;
	}

	/**
	 * Takes Input, validates it's for an Item
	 * Updates Item
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_xref(WireInput $input) {
		$itm = $this('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($values->text('itemID'));
		$record = $itm->get_item($itemID);

		if ($record->isNew() === false) {
			$itm->lockrecord($itemID);
		}


		if ($record->isNew() || $itm->recordlocker->function_locked_by_user($itemID)) {
			if ($values->text('action') == 'update-itm-xrefs') {
				$record->setSupercededby(strtoupper($values->text('supercededby')));

				if ($itm->item_exists($values->text('supercededby'))) {
					$response_itm = $itm->save_and_respond($record);
				} else {
					$response_itm = ItmResponse::response_error($record->itemid, "Supercede Item $record->supercededby does not exist");
				}

				$this->send_cxm_update($input);
			} else {
				$message = self::DESCRIPTION_RECORD . " ($record->itemid) was not saved, no action was specified";
				$response_itm = ItmResponse::response_error($record->itemid, $message);
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " ($record->itemid)  was not saved, it is locked by " . $itm->recordlocker->get_locked_user($itemID);
			$response_itm = ItmResponse::response_error($record->itemid, $message);
		}
		return $response_itm;
	}

/* =============================================================
	Request Functions
============================================================= */
	/**
	 * Send Request to Update the Short Item ID using the XrefCxm module
	 * @param  WireInput $input
	 * @return void
	 */
	protected function send_cxm_update(WireInput $input)  {
		$cxm = $this('modules')->get('XrefCxm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($values->text('itemID'));

		if (!$cxm->xref_shortitem_exists($itemID) ||$cxm->xref_shortitem($itemID)->custitemid != $values->text('cxm_custitemid')) {
			$data_cxm = array('action' => 'update-cxm-shortitem', 'itemID' => $itemID, 'custitemid' => $values->text('cxm_custitemid'));
			$input_cxm = new WireInput();
			$input_cxm->$rm->setArray($data_cxm);
			$cxm->process_input($input_cxm);
		}
	}

/* =============================================================
	URL Functions
============================================================= */
	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefsURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_upcxURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit UPC for Item
	 * @param  string $itemID Item ID
	 * @param  string $upc    UPC Code
	 * @return string
	 */
	public function get_upcURL($itemID, $upc = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('itemID', $itemID);

		if ($upc) {
			$url->query->set('upc', $upc);
		}
		return $url->getUrl();
	}

	public function get_upc_listURL($itemID, $focus = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('itemID', $itemID);
		if ($focus == '') {
			return $url->getUrl();
		}
		return $this->get_upc_list_focusURL($itemID, $focus);
	}

	public function get_upc_list_focusURL($itemID, $focus = '') {
		$page = $this->wire('pages')->get("pw_template=itm-xrefs-upcx");
		$upcx = $this->wire('modules')->get('XrefUpc');
		if ($focus == '' || $upcx->xref_exists($focus) === false) {
			return $this->get_upc_listURL($itemID);
		}

		$url = new Url($this->get_upc_listURL($itemID));
		$xref = $upcx->xref($focus);
		$filter = $this->wire->modules('FilterXrefItemUpc');
		$filter->itemid($itemID);
		$offset = $filter->position($xref);
		$pagenbr = ceil($offset / $this->wire('session')->display);
		$url = $this->wire('modules')->get('Dpurl')->paginate($url, $page->name, $pagenbr);
		$url->query->set('focus', $focus);
		return $url->getUrl();
	}

	/**
	 * Return URL to delete UPC for Item
	 * @param  string $itemID Item ID
	 * @param  string $upc    UPC Code
	 * @return string
	 */
	public function get_upc_deleteURL($itemID, $upc) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-upcx")->url);
		$url->query->set('action', 'delete-upcx');
		$url->query->set('itemID', $itemID);
		$url->query->set('upc', $upc);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_vxmURL($itemID, $focus = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-vxm")->url);
		$url->query->set('itemID', $itemID);
		if ($focus) {
			return $this->get_itm_xrefs_vxm_focusURL($itemID, $focus);
		}
		return $url->getUrl();
	}
	/**
	 * Return URL to VXM List
	 * @param  string $itemID Item ID
	 * @param  string $focus  VXM Key
	 * @return string
	 */
	public function get_itm_xrefs_vxm_focusURL($itemID, $focus) {
		$page = $this->wire('pages')->get("pw_template=itm-xrefs-vxm");
		$url = new Url($page->url);
		$url->query->set('itemID', $itemID);

		if ($this->wire('session')->response_xref) {
			if ($this->wire('session')->response_xref->key != $focus) {
				$url->query->set('focus', $focus);
			}
		} else {
			$url->query->set('focus', $focus);
		}

		$vxm = $this->wire('modules')->get('XrefVxm');
		$item = $vxm->xref_by_recordlocker_key($focus);

		if ($item) {
			$filter = $this->wire('modules')->get('FilterXrefItemVxm');
			$filter->itemid($itemID);
			$position = $filter->position($item);

			$pagenbr = floor($filter->query->count() / $this->wire('session')->display);
			$url = $this->wire('modules')->get('Dpurl')->paginate($url, $page->name, $pagenbr);
		}
		return $url->getUrl();
	}

	/**
	 * Return URL to view VXM Item
	 * @param  string  $itemID       Item ID
	 * @param  string  $vendorID     Vendor ID
	 * @param  string  $vendoritemID Vendor's Item ID
	 * @return string
	 */
	public function get_vxm_itemURL($itemID, $vendorID = '', $vendoritemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('itemID', $itemID);

		if ($vendorID) {
			$url->query->set('vendorID', $vendorID);
		}

		$url->query->set('vendoritemID', $vendoritemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view Item ID VXM List
	 * @param  string  $itemID       Item ID
	 * @return string
	 */
	public function get_vxm_itemidURL($itemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to Delete VXM Item
	 * @param  string  $itemID       Item ID
	 * @param  string  $vendorID     Vendor ID
	 * @param  string  $vendoritemID Vendor's Item ID
	 * @return string
	 */
	public function get_vxm_item_deleteURL($itemID, $vendorID, $vendoritemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-vxm')->url);
		$url->query->set('action', 'delete-vxm-item');
		$url->query->set('itemID', $itemID);
		$url->query->set('vendorID', $vendorID);
		$url->query->set('vendoritemID', $vendoritemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefs_cxmURL($itemID, $focus = '') {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs-cxm")->url);
		$url->query->set('itemID', $itemID);
		if ($focus) {
			return $this->get_cxm_customer_focusURL($itemID, $focus);
		}
		return $url->getUrl();
	}

	/**
	 * REturn Paginated URL to CXM Item Page
	 * @param  string $itemID Item ID
	 * @param  string $focus  Record Locker Key for Item
	 * @return string
	 */
	public function get_cxm_customer_focusURL($itemID, $focus) {
		$page = $this->wire('pages')->get('pw_template=itm-xrefs-cxm');
		$url = new Url($page->url);
		$url->query->set('itemID', $itemID);

		if ($this->wire('session')->response_xref) {
			if ($this->wire('session')->response_xref->key != $focus) {
				$url->query->set('focus', $focus);
			}
		} else {
			$url->query->set('focus', $focus);
		}

		$cxm = $this->wire('modules')->get('XrefCxm');
		$item = $cxm->xref_by_recordlocker_key($focus);

		if ($item) {
			$filter = $this->wire('modules')->get('FilterXrefItemCxm');
			$filter->itemid($itemID);
			$position = $filter->position($item);

			$pagenbr = ceil($position / ($this->wire('session')->display - 1));
			$url = $this->wire('modules')->get('Dpurl')->paginate($url, $page->name, $pagenbr);
		}
		return $url->getUrl();
	}

	/**
	 * Return URL to view CXM Item
	 * @param  string  $itemID      Item ID
	 * @param  string  $custID      Customer ID
	 * @param  string  $custitemID  Customer's Item ID
	 * @return string
	 */
	public function get_cxm_itemURL($itemID, $custID = '', $custitemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-cxm')->url);
		$url->query->set('itemID', $itemID);

		if ($custID) {
			$url->query->set('custID', $custID);
		}

		$url->query->set('custitemID', $custitemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to Delete CXM Item
	 * @param  string  $itemID     Item ID
	 * @param  string  $custID     Customer ID
	 * @param  string  $custitemID Customer's Item ID
	 * @return string
	 */
	public function get_cxm_item_deleteURL($itemID, $custID, $custitemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-cxm')->url);
		$url->query->set('action', 'delete-cxm-item');
		$url->query->set('itemID', $itemID);

		if ($custID) {
			$url->query->set('custID', $custID);
		}

		$url->query->set('custitemID', $custitemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view Kit
	 * @param  string  $itemID      Item ID / Kit ID
	 * @return string
	 */
	public function get_kitURL($itemID, $focus = '') {
		$url = new Url($this->wire('pages')->get('pw_template=itm-kit')->url);
		$url->query->set('itemID', $itemID);
		if ($focus) {
			$url->query->set('focus', $focus);
		}
		return $url->getUrl();
	}

	/**
	 * Return URL to view Kit Component
	 * @param  string  $itemID      Item ID / Kit ID
	 * @param  string  $component   Component Item ID
	 * @return string
	 */
	public function get_kit_componentURL($itemID, $component = '') {
		$url = new Url($this->wire('pages')->get('pw_template=itm-kit')->url);
		$url->query->set('itemID', $itemID);
		$url->query->set('component', $component);
		return $url->getUrl();
	}

	/**
	 * Return URL to view Kit Component
	 * @param  string  $itemID      Item ID / Kit ID
	 * @param  string  $component   Component Item ID
	 * @return string
	 */
	public function get_kit_component_deleteURL($itemID, $component) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-kit')->url);
		$url->query->set('action', 'delete-component');
		$url->query->set('itemID', $itemID);
		$url->query->set('kitID', $itemID);
		$url->query->set('component', $component);
		return $url->getUrl();
	}

	/**
	 * Return URL to view MXRFE
	 * @param  string  $itemID      Item ID / Kit ID
	 * @return string
	 */
	public function itm_xrefs_mxrfeURL($itemID, $focus = '') {
		return $this->itm_xrefs_mxrfe_focusURL($itemID, $focus);
	}

	/**
	 * Return URL to view Item MXRFE List
	 * @param  string $itemID Item ID
	 * @param  string $focus  X-ref Key to focus on
	 * @return string
	 */
	public function itm_xrefs_mxrfe_focusURL($itemID, $focus) {
		if (empty($focus)) {
			return $this->_itm_xrefs_mxrfeURL($itemID);
		}
		$mxrfe = $this->wire('modules')->get('XrefMxrfe');
		$xref  = $mxrfe->xref_by_recordlocker_key($focus);

		if ($xref == false) {
			return $this->_itm_xrefs_mxrfeURL($itemID);
		}
		$url = new Url($this->_itm_xrefs_mxrfeURL($itemID));
		$url->query->set('focus', $focus);
		$filter = $this->wire('modules')->get('FilterXrefItemMxrfe');
		$filter->itemid($itemID);
		$position = $filter->position($xref);
		$pagenbr = ceil($position / $this->wire('session')->display);
		$url = $this->wire('modules')->get('Dpurl')->paginate($url, $this->wire('pages')->get('pw_template=itm-xrefs-mxrfe')->name, $pagenbr);
		return $url->getUrl();
	}

	public function _itm_xrefs_mxrfeURL($itemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-mxrfe')->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to MXRFE X-ref
	 * @param  string $mnfrID      Vendor ID
	 * @param  string $mnfritemID  Vendor Item ID
	 * @param  string $itemID        ITM Item ID
	 * @return string
	 */
	public function xref_mxrfeURL($mnfrID, $mnfritemID, $itemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-mxrfe')->url);
		$url->query->set('itemID', $itemID);
		$url->query->set('mnfrID', $mnfrID);
		$url->query->set('mnfritemID', $mnfritemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to DELETE MXRFE X-ref
	 * @param  string $mnfrID      Vendor ID
	 * @param  string $mnfritemID  Vendor Item ID
	 * @param  string $itemID        ITM Item ID
	 * @return string
	 */
	public function xref_mxrfe_deleteURL($mnfrID, $mnfritemID, $itemID) {
		$url = new Url($this->wire('pages')->get('pw_template=itm-xrefs-mxrfe')->url);
		$url->query->set('action', 'delete-xref');
		$url->query->set('mnfrID', $mnfrID);
		$url->query->set('mnfritemID', $mnfritemID);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to MXRFE X-ref
	 * @param  WireInput $input  Input Data
	 * @return string
	 */
	public function redirect_mxrfeURL(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if (empty($values->text('itemID'))) {
			return $this->wire('pages')->get('template=item-xrefs-mxrfe')->url;
		}

		$mxrfe = $this->wire('modules')->get('XrefMxrfe');

		$mnfrID     = $values->text('mnfrID');
		$mnfritemID = $values->text('mnfritemID');
		$itemID     = $values->text('itemID');

		if ($mxrfe->xref_exists($mnfrID, $mnfritemID, $itemID) === false) {
			return $this->itm_xrefs_mxrfeURL($itemID);
		}

		$xref = $mxrfe->xref($mnfrID, $mnfritemID, $itemID);

		switch ($values->text('action')) {
			case 'update-xref':
				$focus = $mxrfe->get_recordlocker_key($xref);
				return $this->itm_xrefs_mxrfeURL($itemID, $focus);
				break;
			case 'delete-notes':
			case 'update-notes';
				return $this->xref_mxrfeURL($mnfrID, $mnfritemID, $itemID);
				break;
		}
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM XRefs CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Xrefs',
			'singular' => true,
			'autoload' => true,
		);
	}

	/**
	 * Sets up Hook Functions for pages that have itm-xrefs as a parent
	 * @return void
	 */
	public function init() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefsURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefsURL($itemID);
		});

		$this->add_pagehooks_upcx();
		$this->add_pagehooks_vxm();
		$this->add_pagehooks_cxm();
		$this->add_pagehooks_kim();
		$this->add_pagehooks_mxrfe();
	}

	public function add_pagehooks_upcx() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_upcxURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_upcxURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::upc_create_itemidURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_upcURL($itemID, 'new');
		});

		$this->addHook("Page(pw_template=$templates)::upc_deleteURL", function($event) {
			$p = $event->object;
			$upc    = $event->arguments(0);
			$event->return = $this->get_upc_deleteURL($p->itemID, $upc);
		});

		$this->addHook("Page(pw_template=$templates)::upcURL", function($event) {
			$p = $event->object;
			$upc    = $event->arguments(0);
			$event->return = $this->get_upcURL($p->itemID, $upc);
		});

		$this->addHook("Page(pw_template=$templates)::upc_listURL", function($event) {
			$p = $event->object;
			$focus = $event->arguments(0);
			$event->return = $this->get_upc_listURL($p->itemID, $focus);
		});

		$this->addHookProperty('Page(pw_template=itm-xrefs-upcx)::upc', function($event) {
			$p = $event->object;
			$event->return = $p->fullURL->query->get('upc');
		});

		$this->addHookProperty('Page(pw_template=itm-xrefs-upcx)::itemID', function($event) {
			$p = $event->object;
			$event->return = $p->fullURL->query->get('itemID');
		});
	}

	public function add_pagehooks_vxm() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_vxmURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_vxmURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_itemidURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$event->return = $this->get_vxm_itemidURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_itemURL", function($event) {
			$p = $event->object;
			$vendorID = $event->arguments(0);
			$vendoritemID = $event->arguments(1);
			$itemID = $event->arguments(2);
			$event->return = $this->get_vxm_itemURL($itemID, $vendorID, $vendoritemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_item_newURL", function($event) {
			$p = $event->object;
			$itemID = $p->itemID;
			$event->return = $this->get_vxm_itemURL($itemID, '', 'new');
		});

		$this->addHook("Page(pw_template=$templates)::vxm_item_deleteURL", function($event) {
			$p = $event->object;
			$vendorID = $event->arguments(0);
			$vendoritemID = $event->arguments(1);
			$itemID = $event->arguments(2);
			$event->return = $this->get_vxm_item_deleteURL($itemID, $vendorID, $vendoritemID);
		});

		$this->addHook("Page(pw_template=$templates)::vxm_item_exitURL", function($event) {
			$p = $event->object;
			$item = $event->arguments(0);
			$vxm = $this->wire('modules')->get('XrefVxm');
			$event->return = $this->get_itm_xrefs_vxmURL($item->itemid, $vxm->get_recordlocker_key($item));
		});
	}

	public function add_pagehooks_cxm() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_cxmURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefs_cxmURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_itemURL", function($event) {
			$p = $event->object;
			$custID = $event->arguments(0);
			$custitemID = $event->arguments(1);
			$itemID = $p->itemID;
			$event->return = $this->get_cxm_itemURL($itemID, $custID, $custitemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_deleteURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$custID = $event->arguments(1);
			$custitemID = $event->arguments(2);
			$event->return = $this->get_cxm_item_deleteURL($itemID, $custID, $custitemID);
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_newURL", function($event) {
			$p = $event->object;
			$itemID = $p->itemID;
			$event->return = $this->get_cxm_itemURL($itemID, '','new');
		});

		$this->addHook("Page(pw_template=$templates)::cxm_item_exitURL", function($event) {
			$item = $event->arguments(0);
			$custID = $item->custid;
			$custitemID = $item->custitemid;
			$cxm = $this->wire('modules')->get('XrefCxm');
			$event->return = $this->get_itm_xrefs_cxmURL($item->itemid, $cxm->get_recordlocker_key($item));
		});
	}

	public function add_pagehooks_kim() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::kitURL", function($event) {
			$itemID = $event->arguments(0);
			$focus  = $event->arguments(1);
			$event->return = $this->get_kitURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::kit_exitURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$event->return = $p->itm_xrefsURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::kit_componentURL", function($event) {
			$itemID = $event->arguments(0);
			$component = $event->arguments(1);
			$event->return = $this->get_kit_componentURL($itemID, $component);
		});

		$this->addHook("Page(pw_template=$templates)::kit_component_deleteURL", function($event) {
			$itemID = $event->arguments(0);
			$component = $event->arguments(1);
			$event->return = $this->get_kit_component_deleteURL($itemID, $component);
		});
	}

	public function add_pagehooks_mxrfe() {
		$itm = $this->wire('modules')->get('Itm');
		$templates = implode('|', $itm::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itm_xrefs_mxrfeURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->itm_xrefs_mxrfeURL($itemID);
		});

		$this->addHook('Page(pw_template=itm-xrefs-mxrfe)::xrefURL', function($event) {
			$mnfrID        = $event->arguments(0);
			$mnfritemID    = $event->arguments(1);
			$itemID        = $event->arguments(2);
			$event->return = $this->xref_mxrfeURL($mnfrID, $mnfritemID, $itemID);
		});

		$this->addHook('Page(pw_template=itm-xrefs-mxrfe)::xref_deleteURL', function($event) {
			$mnfrID        = $event->arguments(0);
			$mnfritemID    = $event->arguments(1);
			$itemID        = $event->arguments(2);
			$event->return = $this->xref_mxrfe_deleteURL($mnfrID, $mnfritemID, $itemID);
		});

		$this->addHook('Page(pw_template=itm-xrefs-mxrfe)::xref_exitURL', function($event) {
			$mxrfe = $this->wire('modules')->get('XrefMxrfe');
			$xref = $event->arguments(0);
			$event->return = $this->itm_xrefs_mxrfeURL($xref->itemid, $mxrfe->get_recordlocker_key($xref));
		});

		$this->addHook("Page(pw_template=itm-xrefs-mxrfe)::redirectURL", function($event) {
			$input = $event->arguments(0);
			$event->return = $this->redirect_mxrfeURL($input);
		});
	}
}
