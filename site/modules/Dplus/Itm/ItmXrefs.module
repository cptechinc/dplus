<?php namespace ProcessWire;
// Purl
use Purl\Url;
// Dplus Model
use ItemMasterItem;
// Dplus Filters
use Dplus\Filters\Mso\Cxm   as CxmFilter;
use Dplus\Filters\Map\Mxrfe as MxrfeFilter;
use Dplus\Filters\Map\Vxm   as VxmFilter;
use Dplus\Filters\Min\Upcx  as UpcxFilter;
// Dplus Configs
use Dplus\Configs;

/**
 * Module that handles the editing of the ITM item X-refs
 */
class ItmXrefs extends WireData implements Module {
	const MODEL              = 'ItemMasterItem';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'ITM Item';
	const DESCRIPTION_RECORD = 'ITM Item';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->xrefs = new WireData();
		$this->xrefs->upcx = false;
		$this->xrefs->cxm = false;
	}

	public function init2() {
		$this->xrefs->cxm = $modules->get('XrefCxm');
	}

/* =============================================================
	CRUD Proccessing Functions
============================================================= */
	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$itm = $this->wire('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');

		if ($values->action) {
			if ($itm->exists($itemID)) {
				if ($values->text('action') == 'update-itm-xrefs') {
					return $this->processInputXref($input);
				}
			} else {
				$response = ItmResponse::response_error($itemID, "Item $itemID does not exist");
			}
		} else {
			$response = ItmResponse::response_error($itemID, "No Action was specified");
		}
		$this->wire('session')->setFor('response', 'itm', $response);
	}

	private function processInputXref(WireInput $input) {
		$itm = $this('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$item = $itm->item($values->text('itemID'));

		if ($item->isNew() === false) {
			$itm->lockrecord($item->itemid);
		}

		if ($itm->recordlocker->userHasLocked($item->itemid) === false) {
			$message = self::DESCRIPTION_RECORD . " ($record->itemid)  was not saved, it is locked by " . $itm->recordlocker->getLockingUser($itemID);
			$response = ItmResponse::response_error($record->itemid, $message);
			return false;
		}

		return $this->inputUpdate($input, $item);
	}

	private function inputUpdate(WireInput $input, ItemMasterItem $item) {
		$itm = $this('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		$configIn  = Configs\In::config();
		$supercede = $configIn->useUppercaseItemid() ? strtoupper($values->text('supercededby')) : $values->text('supercededby');
		$item->setSupercededby($supercede);
		$item->setDate(date('Ymd'));
		$item->setTime(date('His'));

		$response = ItmResponse::response_error($item->itemid, "Supercede Item $item->supercededby does not exist");

		if ($itm->exists($values->text('supercededby')) || $this->supercededby == '') {
			$response = $itm->save_and_respond($item);
		}

		$this->wire('session')->setFor('response', 'itm', $response);
		$this->send_cxm_update($input);
		return $response->has_success();
	}

/* =============================================================
	Request Functions
============================================================= */
	/**
	 * Send Request to Update the Short Item ID using the XrefCxm module
	 * @param  WireInput $input
	 * @return void
	 */
	protected function send_cxm_update(WireInput $input)  {
		$cxm = $this('modules')->get('XrefCxm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($values->text('itemID'));

		if (!$cxm->xref_shortitem_exists($itemID) || $cxm->xref_shortitem($itemID)->custitemid != $values->text('cxm_custitemid')) {
			$data = array('action' => 'update-cxm-shortitem', 'itemID' => $itemID, 'custitemid' => $values->text('cxm_custitemid'));
			$input_cxm = new WireInput();
			$input_cxm->$rm->setArray($data);
			$cxm->process_input($input_cxm);
		}
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM XRefs CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Xrefs',
			'singular' => true,
			'autoload' => true,
		);
	}
}
