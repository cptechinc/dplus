<?php namespace ProcessWire;

include_once(__DIR__.'/ItmResponse.php');

use Purl\Url;

use ConfigInQuery, ConfigIn;
use ConfigPoQuery, ConfigPo;
use ConfigSalesOrderQuery, ConfigSalesOrder;
use ItemPricingQuery, ItemPricing;
use InvAssortmentCodeQuery, InvAssortmentCode;
use UnitofMeasureSaleQuery, UnitofMeasureSale;

/**
 * Module that handles the editing of the UPC item Xref
 */
class ItmPricing extends WireData implements Module {
	const MODEL              = 'ItemPricing';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Item Master Item Pricing';
	const DESCRIPTION_RECORD = 'Item Master Item Pricing';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->configs = new WireData();
		$this->configs->inv = false;
		$this->configs->po  = false;
		$this->configs->so  = false;
	}

	/**
	 * Returns ItemPricingQuery
	 * @return ItemPricingQuery
	 */
	public function get_query() {
		return ItemPricingQuery::create();
	}

	public function init_configs() {
		$this->configs->inv = $this->get_config_in();
		$this->configs->po  = $this->get_config_po();
		$this->configs->so  = $this->get_config_so();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */

	/**
	 * Return if Item Exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function pricing_exists($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}


	/**
	 * Return ItemPricing
	 * @param  string $itemID Item ID
	 * @return ItemPricing
	 */
	public function get_pricing($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Returns ItemPricing after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return ItemPricing
	 */
	public function get_create_itempricing(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$itemID = $input->$rm->text('itemID');

		if ($this->wire('modules')->get('Itm')->item_exists($itemID)) {
			$record = $this->get_pricing($itemID);
		} else {
			$record = new ItemPricing();
			$record->setItemid($itemID);
		}
		return $record;
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */

	/**
	 * Takes Input, validates Item Updates the pricing record for it, sends update to DPlus
	 * NOTE: Updates ITM record with changes to the uom_sale, allow_discount, assortmentcode, assortmentqty fields
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$itm = $this->wire('modules')->get('Itm');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');
		$recordlocker = $this('modules')->get('RecordLockerUser');

		if ($values->action) {
			if ($itm->item_exists($itemID)) {
				$record = $this->get_create_itempricing($input);
				/**
				 * Create lock for ITM code if not already locked.
				 */
				if (!$recordlocker->function_locked('itm', $itemID)) {
					$recordlocker->create_lock('itm', $itemID);
				}

				if ($recordlocker->function_locked_by_user('itm', $itemID)) {
					if ($input->$rm->text('action') == 'update-itm-pricing') {
						$response = $this->update_itm_pricing($input, $record);
						$saved_itm = $response->has_success() ? $this->update_itm($input) : false;
						$response->set_saved_itm($saved_itm);
					}
				} else {
					$message = self::DESCRIPTION_RECORD . " ($record->itemid)  was not saved, it is locked by " . $recordlocker->get_locked_user('itm', $itemID);
					$response = ItmResponse::response_error($record->itemid, $message);
				}
			} else {
				$response = ItmResponse::response_error($record->itemid, "No Item with ItemID $itemID exists");
			}
		} else {
			$response = ItmResponse::response_error($record->itemid, "($record->itemid) was not saved, no action was specified");
		}
		$this->wire('session')->response_itm = $response;
	}

	/**
	 * Updates ITM Pricing Record and updates DPLUS
	 * Records values for uom_sale, allow_discount, assortmentcode, assortmentqty
	 * @param  WireInput $input
	 * @return ItmResponse
	 */
	public function update_itm_pricing(WireInput $input, ItemPricing $record) {
		$rm = strtolower($input->requestMethod());
		$record->setBaseprice($input->$rm->text('baseprice'));
		$record->setUpdated(date('Ymd'));

		for ($i = 1; $i < ItemPricing::QTY_BREAKS; $i++) {
			$col_qty = ucfirst(ItemPricing::get_pricebreak_qty_column($i));
			$col_price = ucfirst(ItemPricing::get_pricebreak_price_column($i));
			$function_unitqty = "set$col_qty";
			$function_unitprice = "set$col_price";
			$record->$function_unitqty($input->$rm->text("pricebreak_qty$i"));
			$record->$function_unitprice($input->$rm->text("pricebreak_price$i"));
		}
		return $this->save_and_process_response($record);
	}

	/**
	 * Updates ITM Item Record and updates DPLUS
	 * Records values for uom_sale, allow_discount, assortmentcode, assortmentqty
	 * @param  WireInput $input
	 * @return bool was it able to be saved?
	 */
	public function update_itm(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$this->errorfields = array();
		$itm = $this->wire('modules')->get('Itm');
		$validate = $this->wire('modules')->get('ValidateItm');
		$itemID = $values->text('itemID');

		$item = $itm->get_item($itemID);

		if ($validate->unitofm_sale($values->text('uom_sale'))) {
			$item->setUom_sale($values->text('uom_sale'));
		} else {
			$this->invalidfields['uom_sale'] = "UoM Sale";
		}
		
		if ($validate->assortmentcode($values->text('assortmentcode'))) {
			$item->setAssortmentcode($values->text('assortmentcode'));
		} else {
			$this->invalidfields['assortmentcode'] = "Assortment Code";
		}

		$item->setAssortmentqty($values->float('assortmentqty'));
		$item->setAllow_discount($values->text('allow_discount'));
		$saved = $item->save();

		if ($saved && empty($this->errorfields)) {
			$itm->request_item_update($itemID);
		}
		return $saved;
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemPricing $record Record to record response of database save
	 * @return ItmResponse
	 */
	protected function save_and_process_response(ItemPricing $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new ItmResponse();
		$response->set_itemID($record->itemid);
		$message = self::DESCRIPTION_RECORD . " ($record->itemid) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(ItmResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(ItmResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(ItmResponse::CRUD_UPDATE);
		}

		$response->set_message($message);
		$response->set_saved_itm_pricing($response->has_success());

		if ($response->has_success()) {
			$this->request_pricing_update($record->itemid);
		}
		return $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the ITM file for this ITEM
	 * @param  string $itemID Item ID
	 * @return void
	 */
	public function request_pricing_update($itemID) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEITMPRICE', "ITEMID=$itemID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Returns IN config
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return ConfigInQuery::create()->findOne();
	}

	/**
	 * Returns PO config
	 * @return ConfigPo
	 */
	public function get_config_po() {
		return ConfigPoQuery::create()->findOne();
	}

	/**
	 * Returns SO config
	 * @return ConfigSo
	 */
	public function get_config_so() {
		return ConfigSalesOrderQuery::create()->findOne();
	}

	public function get_unitsofm_sale() {
		return UnitofMeasureSaleQuery::create()->find();
	}

	public function get_assortmentcodes() {
		return InvAssortmentCodeQuery::create()->find();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM Pricing CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Pricing',
			'singular' => true,
			'autoload' => true,
		);
	}
}
