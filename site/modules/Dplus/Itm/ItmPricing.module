<?php namespace ProcessWire;

include_once(__DIR__.'/XrefResponse.php');

use Purl\Url;

use ItemPricingQuery, ItemPricing;

/**
 * Module that handles the editing of the UPC item Xref
 */
class ItmPricing extends WireData implements Module {
	const MODEL              = 'ItemPricing';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Item Master Item Pricing';
	const DESCRIPTION_RECORD = 'Item Master Item Pricing';

	public function __construct() {
		$this->description = self::DESCRIPTION;
	}

	public function init() {

	}

	/**
	 * Return if Item Exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function pricing_exists($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}


	/**
	 * Return ItemPricing
	 * @param  string $itemID Item ID
	 * @return ItemPricing
	 */
	public function get_pricing($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Returns ItemPricingQuery
	 * @return ItemPricingQuery
	 */
	public function get_query() {
		return ItemPricingQuery::create();
	}

	/**
	 * Returns ItemPricing after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return ItemPricing
	 */
	public function get_create_itempricing(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$itemID = $input->$rm->text('itemID');

		if ($this->item_exists($itemID)) {
			$record = $this->get_item($itemID);
		} else {
			$record = new ItemPricing();
			$record->setItemid($itemID);
		}

		return $record;
	}

	/**
	 * Takes Input, validates it's for one of the code tables
	 * Processes it, and if updated sends request to dplus
	 *
	 * TODO:
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$upc = $input->$rm->text('upc');
		$itemID = $input->$rm->text('itemID');

		$record = $this->get_create_upc($input);

		if ($input->$rm->text('action') == 'remove-upc-item') {
			$record->delete();
		} elseif ($input->$rm->text('action') == 'update-itm') {
			$record->setQty($input->$rm->int('qty'));
			$record->setUom($input->$rm->text('uom'));
			$record->setMastercase($input->$rm->text('mastercase'));
			$record->setNeedslabel($input->$rm->text('needslabel'));
			$record->setDate(date('Ymd'));
			$record->setTime(0);

			if ($input->$rm->text('primary') == ItemPricing::PRIMARY_TRUE) {
				if ($input->$rm->text('valid_primary') == 'true') {
					$record->setPrimary(ItemPricing::PRIMARY_TRUE);
				}
			} else {
				$record->setPrimary(ItemPricing::PRIMARY_FALSE);
			}
		}

		if ($input->$rm->action) {
			$response = $this->save_and_process_response($record);

			/**
			 * IF we saved this Item as the Primary PO ORDER then we have to update
			 * the other primary item to be a secondary
			 */
			if ($response->has_success() && !$record->isDeleted()) {
				if ($record->is_primary() && $record->get_primary_upc_code()) {
					$primary_upc = $record->get_primary_upc();
					$primary_upc->setPrimary(ItemPricing::PRIMARY_FALSE);
					$primary_upc->save();
					$this->update_dplus_cobol($primary_upc);
				}
			}
			$this->wire('session')->response_xref = $response;
		}
	}

	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  ItemPricing $record Record to record response of database save
	 * @return XrefResponse
	 */
	protected function save_and_process_response(ItemPricing $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();
		$code = "$record->upc";

		$response = new XrefResponse();
		$response->set_key($code);
		$message = self::DESCRIPTION_RECORD . " ($code) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(XrefResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(XrefResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(XrefResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			$this->update_dplus_cobol($record);
		}
		return $response;
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM Pricing CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Pricing',
			'singular' => true,
			'autoload' => true,
		);
	}
}
