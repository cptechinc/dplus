<?php namespace ProcessWire;

include_once(__DIR__.'/ItmResponse.php');

use Purl\Url;

use ItemMasterItemQuery, ItemMasterItem;
use ConfigInQuery, ConfigIn;
use InvGroupCodeQuery, InvGroupCode;
use InvPriceCodeQuery, InvPriceCode;
use InvCommissionCodeQuery, InvCommissionCode;
use InvStockCodeQuery, InvStockCode;
use InvSpecialCodeQuery, InvSpecialCode;

/**
 * Module that handles the editing of the UPC item Itm
 */
class Itm extends WireData implements Module {
	const MODEL              = 'ItemMasterItem';
	const MODEL_KEY          = 'code';
	const DESCRIPTION        = 'Item Master Item';
	const DESCRIPTION_RECORD = 'Item Master Item';

	const TEMPLATES_ITM = array(
		'itm',
		'itm-pricing',
		'itm-whse',
		'itm-costing',
		'itm-xrefs'
	);

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->configs = new WireData();
		$this->configs->inventory = false;
	}

	public function init2() {
		$this->configs->inventory = $this->get_config_in();
	}

	/**
	 * Returns ItemMasterItemQuery
	 * @return ItemMasterItemQuery
	 */
	public function get_query() {
		return ItemMasterItemQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return ItemMasterItem[]
	 * @return ItemMasterItem[]|ObjectCollection
	 */
	public function get_items() {
		$q = $this->get_query();
		return $q->find();
	}

	/**
	 * Return if Item Exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function item_exists($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	/**
	 * Return ItemMasterItem
	 * @param  string $itemID Item ID
	 * @return ItemMasterItem
	 */
	public function get_item($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Returns ItemMasterItem after retreiving or creating it
	 * @param  string $itemID Item ID
	 * @return ItemMasterItem
	 */
	public function get_create_item($itemID) {
		if ($this->item_exists($itemID)) {
			$record = $this->get_item($itemID);
		} else {
			$record = $this->get_new_item();
			$record->setItemid($itemID);
		}
		return $record;
	}

	/**
	 * Returns Item with Defaults Set
	 * @return ItemMasterItem
	 */
	public function get_new_item() {
		$item = new ItemMasterItem();
		$this->configs->inventory = $this->get_config_in();

		$item->setItemgroup($this->configs->inventory->default_itemgroup);

		if ($this->configs->inventory->use_pricegroup()) {
			$item->setPricecode($this->configs->inventory->default_pricegroup);
		}

		if ($this->configs->inventory->use_commgroup()) {
			$item->setCommissiongroup($this->configs->inventory->default_commgroup);
		}

		$item->setItemtype($this->configs->inventory->default_itemtype);

		$item->setTaxable('Y');
		$item->setAllow_backorder('Y');
		$item->setAllow_discount('Y');
		$item->setRequire_freight('N');
		$item->setCore('N');
		$item->setSplitorder('Y');

		$item->setUom_sale($this->configs->inventory->default_uom_sale);
		$item->setUom_purchase($this->configs->inventory->default_uom_purchase);
		$item->setPreference($this->configs->inventory->default_nafta_pref_code);
		$item->setProducer($this->configs->inventory->default_nafta_producer);
		$item->setDocumentation($this->configs->inventory->default_nafta_documentation);
		$item->setBasestandardcost($this->configs->inventory->default_base_standard_cost);

		if ($this->wire('modules')->get('DplusCustomer')->get_custID() == 'LINDST') {
			$item->setStockcode('MM');
		}
		return $item;
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, processses the action, calls the process_input
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());

		if ($input->$rm->text('action') == 'update-notes' || $input->$rm->text('action') == 'delete-notes') {
			$module_notes = $this->wire('modules')->get('QnotesItem');
			$module_notes->process_input($input);
		} else {
			$this->process_input_itm($input);
		}
	}

	/**
	 * Takes Input, validates it's for an Item
	 * Updates Item
	 * Processes it, and if updated sends request to dplus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_itm(WireInput $input) {
		$this->configs->inventory = $this->get_config_in();
		$recordlocker = $this('modules')->get('RecordLockerUser');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = strtoupper($input->$rm->text('itemID'));
		$record = $this->get_create_item($itemID);

		/**
		 * Create lock for ITM code if not already locked.
		 */
		if (!$recordlocker->function_locked('itm', $itemID)) {
			$recordlocker->create_lock('itm', $itemID);
		}

		if ($record->isNew() || $recordlocker->function_locked_by_user('itm', $itemID)) {
			if ($values->text('action') == 'remove-itm-item') {
				$record->delete();
			} elseif ($values->text('action') == 'update-itm') {
				$record->setDescription($values->text('description'));
				$record->setDescription2($values->text('description2'));
				$record->setRevision($values->text('revision'));
				$record->setTimefence($values->text('itemfence'));
				$record->setQtypercase($values->int('qtypercase'));

				$record->setAllow_backorder($values->yn('allow_backorder'));
				$record->setSplitorder($values->yn('splitorder'));
				$record->setInspection($values->yn('inspection'));
				$record->setTaxable($values->yn('taxable'));
				$this->set_validated_fields($record, $input);
			}

			if ($values->action) {
				$response = $this->save_and_process_response($record);
				$response->set_saved_itm($response->success);

				if ($values->text('action') == 'remove-itm-item') {
					$response = $this->verify_delete($itemID);
					$this->wire('page')->fullURL->query->remove('itemID');
				} else {
					$this->wire('page')->fullURL->query->set('itemID', $record->itemid);
				}
			} else {
				$message = self::DESCRIPTION_RECORD . " ($record->itemid) was not saved, no action was specified";
				$response = $this->create_error_response($record->itemid, $message);
			}
		} else {
			$message = self::DESCRIPTION_RECORD . " ($record->itemid)  was not saved, it is locked by " . $recordlocker->get_locked_user('itm', $itemID);
			$response = $this->create_error_response($record->itemid, $message);
		}
		$this->wire('session')->response_itm = $response;
	}

	/**
	 * Updates the fields that need to be validated against a table
	 * @param ItemMasterItem $record Item
	 * @param WireInput      $input  Input Values
	 */
	protected function set_validated_fields(ItemMasterItem $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$modules = $this->wire('modules');

		// VALIDATE with Respective tables
		$validate_custid = $modules->get('LookupCustomer');
		$custID = $input->$rm->text('custid');
		if ($validate_custid->lookup_customer($custID)) {
			$record->setCustid($custID);
		}

		if (in_array($input->$rm->text('itemtype'), array_keys(ItemMasterItem::ITEMTYPE_DESCRIPTIONS))) {
			$record->setItemtype($values->text('itemtype'));
		}

		$validate_stockcode = $modules->get('CodeTablesStcm');
		$stockcode = $values->text('stockcode');

		if ($validate_stockcode->code_exists($stockcode)) {
			$record->setStockcode($stockcode);
		}

		$validate_itemgroup = $modules->get('CodeTablesIgm');
		$itemgroup = $values->text('itemgroup');

		if ($validate_itemgroup->code_exists($itemgroup)) {
			$record->setItemgroup($itemgroup);
		}

		if ($this->configs->inventory->use_pricegroup()) {
			$validate_pricecode = $modules->get('CodeTablesIgpm');
			$pricecode = $values->text('pricecode');

			if ($validate_pricecode->code_exists($pricecode)) {
				$record->setPricecode($pricecode);
			}
		}

		if ($this->configs->inventory->use_commgroup()) {
			$validate_commissiongroup = $modules->get('CodeTablesIgcm');
			$commissiongroup = $values->text('commissiongroup');

			if ($validate_commissiongroup->code_exists($commissiongroup)) {
				$record->setCommissiongroup($commissiongroup);
			}
		}
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns ItmResponse based on the outcome of the database save
	 * @param  ItemMasterItem $record Record to record response of database save
	 * @return ItmResponse
	 */
	public function save_and_process_response(ItemMasterItem $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new ItmResponse();
		$response->set_itemID($record->itemid);
		$message = self::DESCRIPTION_RECORD . " ($record->itemid) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(ItmResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(ItmResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(ItmResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success()) {
			if ($record->isDeleted()) {
				$this->delete_dplus_cobol($record->itemid);
			} else {
				$this->update_dplus_cobol($record->itemid);
			}
		}
		return $response;
	}

	/**
	 * Return Error Response with Provided Message
	 * @param  string $itemID     Item ID
	 * @param  string $message    Error Message
	 * @param  int    $actiontype ItmResponse CRUD value
	 * @return ItmResponse
	 */
	public function create_error_response($itemID, $message, $actiontype = 0) {
		$response = new ItmResponse();
		$response->set_itemID($itemID);
		$response->set_error(true);
		$response->set_saved_itm(false);
		$response->set_action($actiontype != 0 ? $actiontype : ItmResponse::CRUD_UPDATE);
		$response->set_message($message);
		return $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the ITM file for this ITEM
	 * @param  string $itemID Item ID
	 * @return void
	 */
	public function update_dplus_cobol($itemID) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEITM', "ITEMID=$itemID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

	/**
	 * Writes File for Dplus to delete the ITM file for this ITEM
	 * @param  string $itemID Item ID
	 * @return void
	 */
	public function delete_dplus_cobol($itemID, $debug = false) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'DELETEITM', "ITEMID=$itemID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

	/**
	 * Return if Item was able to be deleted
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function verify_delete($itemID) {
		$m_json = $this->wire('modules')->get('JsonDataFiles');
		$json = $m_json->get_file(session_id(), 'itm-delete');
		$response = new ItmResponse();
		$response->set_itemID($itemID);
		$response->set_action(ItmResponse::CRUD_DELETE);
		$message = self::DESCRIPTION_RECORD . " ($itemID) was ";

		if ($m_json->had_succeeded()) {
			if ($json['itemid'] != $itemID) {
				$response->set_error(true);
				$message .= "not deleted";
			} elseif ($json['error'] === true) {
				$response->set_error(true);
				$message .= "not deleted";
			} else {
				$response->set_success(true);
				$message .= "deleted";
			}
		} else {
			$response->set_error(true);
			$message .= "not deleted";
		}

		if ($json['error']) {
			$message .= " Error: " . $json['errormsg'];
		}
		$response->set_message($message);
		return $response;
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Returns IN config
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return ConfigInQuery::create()->findOne();
	}

	/**
	 * Return Item Groups
	 * @return InvGroupCode[]|ObjectCollection
	 */
	public function get_itemgroups() {
		return InvGroupCodeQuery::create()->find();
	}

	/**
	 * Return Price Codes
	 * @return InvPriceCode[]|ObjectCollection
	 */
	public function get_pricecodes() {
		return InvPriceCodeQuery::create()->find();
	}

	/**
	 * Return Commission Codes
	 * @return InvCommissionCode[]|ObjectCollection
	 */
	public function get_commissoncodes() {
		return InvCommissionCodeQuery::create()->find();
	}

	/**
	 * Return Stock Codes
	 * @return InvStockCode[]|ObjectCollection
	 */
	public function get_stockcodes() {
		return InvStockCodeQuery::create()->find();
	}

	/**
	 * Return Stock Codes
	 * @return InvSpecialCode[]|ObjectCollection
	 */
	public function get_speicialitemcodes() {
		return InvSpecialCodeQuery::create()->find();
	}

/* =============================================================
	URL Functions
============================================================= */
	/**
	 * Return URL to view / edit Item
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itmURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_deleteURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm")->url);
		$url->query->set('action', 'remove-itm-item');
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Pricing
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_pricingURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-pricing")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Warehouse
	 * @param  string $itemID
	 * @param  string $whseID
	 * @return string
	 */
	public function get_itm_warehouseURL($itemID, $whseID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-whse")->url);
		$url->query->set('itemID', $itemID);
		$url->query->set('whseID', $whseID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Warehouse
	 * @param  string $itemID
	 * @param  string $whseID
	 * @return string
	 */
	public function get_itm_warehouse_deleteURL($itemID, $whseID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-whse")->url);
		$url->query->set('action', 'remove-itm-whse');
		$url->query->set('itemID', $itemID);
		$url->query->set('whseID', $whseID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Costing
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_costingURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-costing")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

	/**
	 * Return URL to view / edit Item Xrefs
	 * @param  string $itemID
	 * @return string
	 */
	public function get_itm_xrefsURL($itemID) {
		$url = new Url($this->wire('pages')->get("pw_template=itm-xrefs")->url);
		$url->query->set('itemID', $itemID);
		return $url->getUrl();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM',
			'singular' => true,
			'autoload' => true,
			'installs' => array(
				'ItmCosting',
				'ItmPricing',
				'ItmWarehouse',
				'ItmXrefs',
			)
		);
	}

	public function update() {
		$info = self::getModuleInfo();
		$modules = $this->wire('modules');
		$modules->refresh();

		foreach ($info['installs'] as $module_name) {
			$modules->install($module_name);
		}
	}

	/**
	 * Set up Functions / Properties for pw_templated pages
	 * @return void
	 */
	public function init() {
		$templates = implode('|', self::TEMPLATES_ITM);

		$this->addHook("Page(pw_template=$templates)::itmURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itmURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::itm_deleteURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_deleteURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::get_itemURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itmURL($itemID);
		});

		$this->addHookProperty("Page(pw_template=$templates)::itemID", function($event) {
			$p = $event->object;
			$event->return = $p->fullURL->query->get('itemID');
		});

		$this->addHook("Page(pw_template=$templates)::itm_pricingURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_pricingURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::itm_warehouseURL", function($event) {
			$itemID = $event->arguments(0);
			$whseID = $event->arguments(1);
			$event->return = $this->get_itm_warehouseURL($itemID, $whseID);
		});

		$this->addHook("Page(pw_template=$templates)::itm_warehouse_deleteURL", function($event) {
			$itemID = $event->arguments(0);
			$whseID = $event->arguments(1);
			$event->return = $this->get_itm_warehouse_deleteURL($itemID, $whseID);
		});

		$this->addHook("Page(pw_template=$templates)::itm_costingURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_costingURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::itm_xrefsURL", function($event) {
			$itemID = $event->arguments(0);
			$event->return = $this->get_itm_xrefsURL($itemID);
		});

		$this->addHook("Page(pw_template=$templates)::itemIDURL", function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$url = new Url($p->url);
			$url->query->set('itemID', $itemID);
			$event->return = $url->getUrl();
		});

		$this->addHookProperty("Page(pw_template=$templates)::lockcode", function($event) {
			$p = $event->object;
			$lockcode = $p->pw_template;

			switch ($p->pw_template) {
				case 'itm-xrefs':
				case 'itm-costing':
				case 'itm-pricing':
					$lockcode = 'itm';
					break;
				default:
					$lockcode = $p->pw_template;
			}
			$event->return = $lockcode;
		});

		$this->addHookProperty("Page(pw_template=$templates)::itemlookupURL", function($event) {
			$event->return = $this->wire('pages')->get('pw_template=itm-search')->url;
		});

		$this->addHook('Page(pw_template=itm-search)::get_itemURL', function($event) {
			$p = $event->object;
			$itemID = $event->arguments(0);
			$url = new Url($this->wire('pages')->get('pw_template=itm')->url);
			$url->query->set('itemID', $itemID);
			$event->return = $url->getUrl();
		});
	}
}
