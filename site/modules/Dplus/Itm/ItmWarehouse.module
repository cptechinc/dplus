<?php namespace ProcessWire;

include_once(__DIR__.'/ItmResponse.php');

use Purl\Url;

use WarehouseInventoryQuery, WarehouseInventory;
use WarehouseQuery, Warehouse;
use WarehouseBinQuery, WarehouseBin;
use ConfigInQuery, ConfigIn;
use ConfigSalesOrderQuery, ConfigSalesOrder;

/**
 * Module that handles the editing of the Itm Warehouse Items
 */
class ItmWarehouse extends WireData implements Module {
	const MODEL                 = 'WarehouseInventory';
	const MODEL_KEY             = 'code';
	const DESCRIPTION           = 'ITM Item Warehouse';
	const DESCRIPTION_RECORD    = 'ITM Item {0} Warehouse {1}';
	const LOCKRECORD_FUNCTIONID = 'itm-whse';

	const REGEX_CODEABC = '/^[A-J]+$/i';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->configs = new WireData();
		$this->configs->inventory  = false;
		$this->configs->salesorder = false;
	}

	/**
	 * Initializes the configs needed for this Module
	 * @return void
	 */
	public function init2() {
		$this->configs->inventory = $this->get_config_in();
		$this->configs->salesorder = $this->get_config_so();
	}

/* =============================================================
	CRUD Functions Read, Validation
============================================================= */
	/**
	 * Return if Item Exists
	 * @param  string $whseID Warehouse ID
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function itemwarehouse_exists($whseID, $itemID) {
		$q = $this->get_query();
		$q->filterByWhseid($whseID);
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	/**
	 * Return WarehouseInventory
	 * @param  string $whseID Warehouse ID
	 * @param  string $itemID Item ID
	 * @return WarehouseInventory
	 */
	public function get_itemwarehouse($whseID, $itemID) {
		$q = $this->get_query();
		$q->filterByWhseid($whseID);
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Return WarehouseInventory[]
	 * @param  string $itemID Item ID
	 * @return WarehouseInventory[]|ObjectCollection
	 */
	public function get_itemwarehouses($itemID) {
		$q = $this->get_query();
		$q->filterByItemid($itemID);
		return $q->find();
	}

	/**
	 * Returns WarehouseInventoryQuery
	 * @return WarehouseInventoryQuery
	 */
	public function get_query() {
		return WarehouseInventoryQuery::create();
	}

/* =============================================================
	CRUD Functions
============================================================= */
	/**
	 * Returns WarehouseInventory after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return WarehouseInventory
	 */
	public function get_create_itemwarehouse(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$itemID = $input->$rm->text('itemID');
		$whseID = $input->$rm->text('whseID');

		if ($this->itemwarehouse_exists($whseID, $itemID)) {
			$record = $this->get_itemwarehouse($whseID, $itemID);
		} else {
			$record = $this->get_new_itemwarehouse();
			$record->setWhseid($whseID);
			$record->setItemid($itemID);
		}
		return $record;
	}

	public function get_new_itemwarehouse() {
		$record = new WarehouseInventory();
		$record->setBin_default($this->configs->inventory->default_bin);
		$record->setStatus(WarehouseInventory::STATUS_ACTIVE);
		$record->setSpecialorder(WarehouseInventory::SPECIALORDER_NORMAL);
		return $record;
	}

	/**
	 * Takes Input, calls the function / module that will handle the action
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'delete-notes':
			case 'update-notes':
				$this->wire('modules')->get('QnotesItemWhseOrder')->process_input($input);
				break;
			default:
				$this->process_input_itemwarehouse($input);
				break;
		}
	}

	/**
	 * Takes Input, validates Item Updates the ITM warehouse record, sends update to DPlus
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input_itemwarehouse(WireInput $input) {
		$validator_warehouses = $this->wire('modules')->get('LookupWarehouse');
		$validator_item = $this->wire('modules')->get('LookupItem');
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');
		$whseID = $values->text('whseID');

		if ($validator_item->lookup_itm($itemID) && $validator_warehouses->lookup_warehouse($whseID)) {
			$record = $this->get_create_itemwarehouse($input);

			/**
			 * Create lock for ITM code if not already locked.
			 */
			if (!$recordlocker->function_locked('itm-whse', $this->get_warehouseitem_lockkey($record))) {
				$recordlocker->create_lock('itm-whse', $this->get_warehouseitem_lockkey($record));
			}

			if ($recordlocker->function_locked_by_user('itm-whse', $this->get_warehouseitem_lockkey($record))) {
				if ($values->text('action') == 'update-itm-whse') {
					$warehouse = $this->get_warehouse($record->warehouseid);

					if ($warehouse->validate_bin($values->text('bin_default')) || $values->text('bin_default') == $this->configs->inventory->default_bin) {
						$record->setBin_default($values->text('bin_default'));
						$record->setCyclecode(strtoupper($values->text('cyclecode')));
						$record->setOrderpoint($values->text('orderpoint'));
						$record->setOrderqty($values->text('orderqty'));
						$record->setMaxqty($values->text('maxqty'));
						$record->setMaxorderqty($values->text('maxorderqty'));
						$record->setFreightin($values->text('freightin'));
						$this->set_validated_fields($record, $input);
						$response = $this->save_and_process_response($record);
					} else {
						$message = $values->text('bin_default') . " is not a valid bin, can't save Warehouse Item";
						$response = $this->create_error_response($whseID, $itemID, $message);
					}
				} elseif ($values->text('action') == 'remove-itm-whse') {
					$record->delete();
					$response = $this->save_and_process_response($record);
				}
			} else {
				$message = self::DESCRIPTION_RECORD . " ($itemID)  was not saved, it is locked by " . $recordlocker->get_locked_user('itm', $itemID);
				$response = $this->create_error_response($itemID, $message, ItmResponse::CRUD_UPDATE);
			}


		} elseif (!$validator_item->lookup_itm($itemID)) {
			$message = "Item $itemID does not exist";
			$response = $this->create_error_response($record->warehouseid, $warehouse->itemid, $message);
		}  elseif (!$validator_warehouses->lookup_warehouse($whseID)) {
			$message = "Warehouse $whseID does not exist";
			$response = $this->create_error_response($record->warehouseid, $warehouse->itemid, $message);
		}

		$this->wire('session')->response_itm = $response;
	}

	/**
	 * Validate Inputs for ABC Code, Status, Special Order, Supply Warehouse then set them as needed
	 * @param WarehouseInventory $record Item Warehouse Record
	 * @param WireInput          $input  Input from Form
	 */
	protected function set_validated_fields(WarehouseInventory $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$validator_warehouses = $this->wire('modules')->get('LookupWarehouse');

		if (preg_match(self::REGEX_CODEABC, $values->text('codeabc'))) {
			$record->setCodeabc(strtoupper($values->text('codeabc')));
		}

		if (array_key_exists($values->text('status'), WarehouseInventory::STATUS_DESCRIPTIONS)) {
			$record->setStatus($values->text('status'));
		}

		if (array_key_exists($values->text('specialorder'), WarehouseInventory::SPECIALORDER_DESCRIPTIONS)) {
			$record->setSpecialorder($values->text('specialorder'));
		}

		if ($validator_warehouses->lookup_warehouse($values->text('whsesupply'))) {
			$record->setWhsesupply($values->text('whsesupply'));
		} else {
			$record->setWhsesupply($record->warehouseid);
		}
	}

	/**
	 * Return Error Response for Whse Item
	 * @param  string $whseID  Warehouse ID
	 * @param  string $itemID  Item ID
	 * @param  string $message Error Message
	 * @return ItmResponse
	 */
	protected function create_error_response($whseID, $itemID, $message) {
		$response = new ItmResponse();
		$response->set_itemID($itemID);
		$response->set_whseID($whseID);
		$response->set_error(true);
		$response->set_message($message);
		$response->set_action(ItmResponse::CRUD_UPDATE);
		return $response;
	}

	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  WarehouseInventory $record Record to record response of database save
	 * @return ItmResponse
	 */
	protected function save_and_process_response(WarehouseInventory $record) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new ItmResponse();
		$response->set_itemID($record->itemid);
		$response->set_whseID($record->warehouseid);
		$message = str_replace('{0}', $record->itemid, self::DESCRIPTION_RECORD);
		$message = str_replace('{1}', $record->whseid, $message);
		$message .= " was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(ItmResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(ItmResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(ItmResponse::CRUD_UPDATE);
		}

		$response->set_message($message);
		$response->set_saved_itm_whse($response->has_success());

		if ($response->has_success()) {
			$this->request_whse_update($record->itemid, $record->whseid);
		}
		return $response;
	}

	/**
	 * Writes File for Dplus to update the ITM Warehouse file for this Warehouse Item
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return void
	 */
	public function request_whse_update($itemID, $whseID) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusConnectDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEITMWHSE', "ITEMID=$itemID", "WHSE=$whseID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return WarehouseInventory Item Status Options
	 * @return array
	 */
	public function get_itemstatus_options() {
		return WarehouseInventory::STATUS_DESCRIPTIONS;
	}

	/**
	 * Return WarehouseInventory Special Order Options
	 * @return array
	 */
	public function get_specialorder_options() {
		return WarehouseInventory::SPECIALORDER_DESCRIPTIONS;
	}

	/**
	 * Returns IN config
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return ConfigInQuery::create()->findOne();
	}

	/**
	 * Returns IN config
	 * @return ConfigSalesOrder
	 */
	public function get_config_so() {
		return ConfigSalesOrderQuery::create()->findOne();
	}
	/**
	 * Return Warehouses
	 * NOTE: Returns all warehouses, not item ones
	 * @return Warehouses[]|ObjectCollection
	 */
	public function get_warehouses() {
		$q = WarehouseQuery::create();
		return $q->find();
	}

	/**
	 * Return Warehouse IDs
	 * NOTE: Returns all warehouses for this company
	 * @return array
	 */
	public function get_warehouses_ids() {
		$q = WarehouseQuery::create();
		$q->select(Warehouse::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Return Warehouse by ID
	 * @return Warehouse
	 */
	public function get_warehouse($id) {
		$q = WarehouseQuery::create();
		return $q->findOneById($id);
	}

	/**
	 * Return array of whseIDs for Item ID
	 * @param  string $itemID Item ID
	 * @return array
	 */
	public function get_itemwarehouseIDs($itemID) {
		$q = $this->get_query();
		$q->select(WarehouseInventory::get_aliasproperty('warehouseid'));
		$q->filterByItemid($itemID);
		return $q->find()->toArray();
	}

	/**
	 * Return array of Warehouses with Warehouse ID as a Key for validation of bins
	 * @param  string $itemID Item ID
	 * @return array
	 */
	public function get_itemwarehouses_js($itemID) {
		$js = array();
		$whseIDs = $this->get_itemwarehouseIDs($itemID);
		$warehouses = WarehouseQuery::create()->findById($whseIDs);

		foreach ($warehouses as $warehouse) {
			$js[$warehouse->id] = array(
				'id'             => $warehouse->id,
				'binarrangement' => $warehouse->get_binarrangementdescription(),
				'bins'           => WarehouseBinQuery::create()->get_warehousebins($warehouse->id)->toArray()
			);
		}
		return $js;
	}

	public function get_warehouseitem_lockkey(WarehouseInventory $warehouse) {
		return "$warehouse->itemid-$warehouse->warehouseid";
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM Warehouse CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Warehouse',
			'singular' => true,
			'autoload' => true,
		);
	}
}
