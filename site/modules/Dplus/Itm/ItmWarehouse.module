<?php namespace ProcessWire;

include_once(__DIR__.'/ItmResponse.php');

// Purl URI
use Purl\Url;
// Dplus Models
use WarehouseInventoryQuery, WarehouseInventory;
use WarehouseQuery, Warehouse;
use WarehouseBinQuery, WarehouseBin;
use ConfigInQuery, ConfigIn;
use ConfigSalesOrderQuery, ConfigSalesOrder;
// Dplus Record Locker
use Dplus\RecordLocker\UserFunction as FunctionLocker;
// Dplus Code Validators
use Dplus\CodeValidators\Itm\Warehouse as ItmwValidator;
// Dplus Configs
use Dplus\Configs;

/**
 * Module that handles the editing of the Itm Warehouse Items
 */
class ItmWarehouse extends WireData implements Module {
	const MODEL                 = 'WarehouseInventory';
	const MODEL_KEY             = 'itemid, whseid';
	const DESCRIPTION           = 'ITM Item Warehouse';
	const RESPONSE_TEMPLATE     = 'ITM Item {itemid} Warehouse {whseid} was {not} {crud}';
	const RECORDLOCKER_FUNCTION = 'itm-whse';

	const REGEX_CODEABC = '/^[A-J]+$/i';

	public function __construct() {
		$this->description = self::DESCRIPTION;
		$this->configs = new WireData();
		$this->configs->inventory  = false;
		$this->configs->salesorder = false;
	}

	/**
	 * Initializes the configs needed for this Module
	 * @return void
	 */
	public function init_configs() {
		$this->configs->inventory  = $this->get_config_in();
		$this->configs->salesorder = $this->get_config_so();
	}

	/**
	 * Returns WarehouseInventoryQuery
	 * @return WarehouseInventoryQuery
	 */
	public function query() {
		return WarehouseInventoryQuery::create();
	}

/* =============================================================
	CRUD Functions Read, Validation
============================================================= */
	/**
	 * Return if Item Exists
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return bool
	 */
	public function itemwarehouse_exists($itemID, $whseID) {
		return $this->exists($itemID, $whseID);
	}

	/**
	 * Return if Item Warehouse Exists
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return bool
	 */
	public function exists($itemID, $whseID) {
		$q = $this->query();
		$q->filterByWhseid($whseID);
		$q->filterByItemid($itemID);
		return boolval($q->count());
	}

	/**
	 * Return WarehouseInventory
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return WarehouseInventory
	 */
	public function get_itemwarehouse($itemID, $whseID) {
		return $this->itemWarehouse($itemID, $whseID);
	}

	/**
	 * Return WarehouseInventory
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return WarehouseInventory
	 */
	public function itemWarehouse($itemID, $whseID) {
		$q = $this->query();
		$q->filterByWhseid($whseID);
		$q->filterByItemid($itemID);
		return $q->findOne();
	}

	/**
	 * Return WarehouseInventory[]
	 * @param  string $itemID Item ID
	 * @return WarehouseInventory[]|ObjectCollection
	 */
	public function get_itemwarehouses($itemID) {
		$q = $this->query();
		$q->filterByItemid($itemID);
		return $q->find();
	}

	public function delete_itemwarehouse($itemID, $whseID) {
		$q = $this->query();
		$q->filterByWhseid($whseID);
		$q->filterByItemid($itemID);

		if ($q->count()) {
			return $q->delete();
		}
		return true;
	}

/* =============================================================
	CRUD Functions
============================================================= */
	/**
	 * Returns WarehouseInventory after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return WarehouseInventory
	 */
	public function get_create_itemwarehouse($itemID, $whseID = '') {
		return $this->getOrCreate($itemID, $whseID);
	}

	/**
	 * Returns WarehouseInventory after retreiving or creating it
	 * @param  WireInput $input Input Data
	 * @return WarehouseInventory
	 */
	public function getOrCreate($itemID, $whseID = '') {
		if ($this->itemwarehouse_exists($itemID, $whseID)) {
			$record = $this->itemWarehouse($itemID, $whseID);
		} else {
			$record = $this->new();
			$record->setItemid($itemID);
			if ($whseID != 'new') {
				$record->setWhseid($whseID);
			}
		}
		return $record;
	}

	/**
	 * Return WarehouseInventory
	 * @return WarehouseInventory
	 */
	public function new_itemwarehouse() {
		return $this->new();
	}

	/**
	 * Return WarehouseInventory
	 * @return WarehouseInventory
	 */
	public function new() {
		$configIn = Configs\In::config();

		$whse = new WarehouseInventory();
		$whse->setBin_default($configIn->default_bin);
		$whse->setStatus($configIn->default_status);
		$whse->setSpecialorder($configIn->default_specialorder);
		$whse->setCyclecode($configIn->default_cycle);
		$whse->setWhsesupply($configIn->default_whseid);
		$whse->setCodeabc($configIn->default_abccode);
		$whse->setOrderqty($configIn->default_orderqty);
		$whse->setMaxqty($configIn->default_maxqty);
		$whse->setOrderpoint($configIn->default_orderpoint);
		$whse->setFreightin(0);
		return $whse;
	}

	/**
	 * Takes Input, calls the function / module that will handle the action
	 *
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'delete-notes':
			case 'update-notes':
				$this->wire('modules')->get('QnotesItemWhseOrder')->process_input($input);
				break;
			case 'delete-whse':
				$this->input_delete($input);
				break;
			case 'update-whse':
				$this->input_update($input);
				break;
		}
	}

	/**
	 * Delete Warehouse from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	public function input_delete(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');
		$whseID = $values->text('whseID');

		if ($this->itemwarehouse_exists($itemID, $whseID)) {
			$record = $this->get_itemwarehouse($itemID, $whseID);
		} else {
			$record = new WarehouseInventory();
		}

		if (!$this->lockrecord($record) && !$record->isNew()) {
			$message = self::DESCRIPTION_RECORD . " ($itemID-$whseID)  was not saved, it is locked by " . $this->recordlocker->getLockingUser($this->lockerkey($record));
			$response = ItmResponse::response_error($itemID, $message);
			$response->set_whseID($whseID);
			$this->wire('session')->setFor('response', 'itm', $response);
			return false;
		}

		$this->request_whse_delete($itemID, $whseID);
		$response = $this->verify_delete($itemID, $whseID);
		if ($response->has_success()) {
			$record->delete();
		}
		$this->wire('session')->setFor('response', 'itm', $response);
		return $response->has_success();
	}

	/**
	 * Update Warehouse from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	public function input_update(WireInput $input) {
		$validate = new ItmwValidator();
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');
		$whseID = $values->text('whseID');
		$record = $this->getOrCreate($itemID, $whseID);

		if (!$this->lockrecord($record) && !$record->isNew()) {
			$message = self::DESCRIPTION_RECORD . " ($itemID-$whseID)  was not saved, it is locked by " . $this->recordlocker->getLockingUser($this->lockerkey($record));
			$session->response_itm = ItmResponse::response_error($itemID, $message);
			$session->response_itm->set_whseID($whseID);
			return false;
		}

		$invalid = $this->set_fields($record, $input);
		$response = $this->save_and_respond($record, $invalid);
		$this->wire('session')->setFor('response', 'itm', $response);
		return $response->has_success();
	}

	/**
	 * Set Record Fields
	 * @param WarehouseInventory $record Warehouse Item
	 * @param WireInput          $input  Input Data
	 */
	protected function set_fields(WarehouseInventory $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$invalidfields = array();
		$invalidfields = $this->set_validated_fields($record, $input);
		$record->setCyclecode(strtoupper($values->text('cyclecode')));
		$record->setOrderpoint($values->text('orderpoint'));
		$record->setOrderqty($values->text('orderqty'));
		$record->setMaxqty($values->text('maxqty'));
		$record->setMaxorderqty($values->text('maxorderqty'));
		$record->setFreightin($values->text('freightin'));
		$record->setDateupdtd(date('Ymd'));
		$record->setTimeupdtd(date('His'));
		return $invalidfields;
	}

	/**
	 * Updates the fields that need to be validated against a table
	 * @param  WarehouseInventory $record Item Warehouse
	 * @param  WireInput          $input  Input Values
	 * @return array              Invalid Input fields, empty if none
	 */
	protected function set_validated_fields(WarehouseInventory $record, WireInput $input) {
		$invalid = array();
		$fields = array(
			'itemid' => array(
				'description' => 'Item ID',
				'input'       => 'itemID',
				'allow_blank' => false
			),
			'whseid' => array(
				'description' => 'Default Warehouse',
				'input'       => 'whseID',
				'allow_blank' => false
			),
			'codeabc' => array(
				'description' => 'Code ABC',
				'allow_blank' => true
			),
			'status' => array(
				'description' => 'Status',
				'allow_blank' => false
			),
			'specialorder' => array(
				'description' => 'Special Order',
				'allow_blank' => false
			),
			'whsesupply' => array(
				'description' => 'Supply warehouse',
				'function'    => 'whseid',
				'allow_blank' => false
			),
		);
		$validate = new ItmwValidator();
		$validator = $this->wire('modules')->get('InputValidator');
		$validator->set_validator($validate)->set_input($input)->set_record($record)->set_validatefields($fields);
		$invalid = $validator->validate();
		$validator->set_valid_properties();

		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		if (!$validate->whsebin($values->text('whseID'), $values->text('bin_default'))) {
			$invalid['bin_default'] = "Default Bin";
		} else {
			$record->setBin_default($values->text('bin_default'));
		}
		$record->setCodeabc(strtoupper($record->codeabc));
		return $invalid;
	}


	/**
	 * Returns XrefResponse based on the outcome of the database save
	 * @param  WarehouseInventory $record Record to record response of database save
	 * @return ItmResponse
	 */
	protected function save_and_respond(WarehouseInventory $record, array $invalidfields = null) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new ItmResponse();
		$response->set_itemID($record->itemid);
		$response->set_whseID($record->warehouseid);

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
		}

		if ($is_new) {
			$response->set_action(ItmResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$response->set_action(ItmResponse::CRUD_DELETE);
		} else {
			$response->set_action(ItmResponse::CRUD_UPDATE);
		}
		$response->build_message(self::RESPONSE_TEMPLATE);
		$response->set_saved_itm_whse($response->has_success());

		if ($response->has_success() && empty($invalidfields)) {
			$this->request_whse_update($record->itemid, $record->whseid);
		}
		$response->set_fields($invalidfields);
		return $response;
	}

	/**
	 * Writes File for Dplus to update the ITM Warehouse file for this Warehouse Item
	 * @param  string $itemID Item ID
	 * @param  string $whseID Warehouse ID
	 * @return void
	 */
	public function request_whse_update($itemID, $whseID) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'UPDATEITMWHSE', "ITEMID=$itemID", "WHSE=$whseID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

	public function request_whse_delete($itemID, $whseID) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'DELETEITMWHSE', "ITEMID=$itemID", "WHSE=$whseID");

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}

	/**
	 * Return if Item was able to be deleted
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	private function verify_delete($itemID, $whseID) {
		$m_json = $this->wire('modules')->get('JsonDataFiles');
		$json = $m_json->get_file(session_id(), 'itm-whse-delete');
		$response = new ItmResponse();
		$response->set_itemID($itemID);
		$response->set_action(ItmResponse::CRUD_DELETE);
		$message = self::DESCRIPTION . " ($itemID-$whseID) was ";

		if ($m_json->had_succeeded()) {
			if ($json['itemid'] != $itemID) {
				$response->set_error(true);
				$message .= "not deleted";
			} elseif ($json['error'] === true) {
				$response->set_error(true);
				$message .= "not deleted";
			} else {
				$response->set_success(true);
				$message .= "deleted";
			}
		} else {
			$response->set_error(true);
			$message .= "not deleted";
		}

		if ($json['error']) {
			$message .= " Error: " . $json['errormsg'];
		}
		$response->set_message($message);
		return $response;
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Lock Record, validate User is locking Record
	 * @param  WarehouseInvetory $record
	 * @return bool
	 */
	public function lockrecord(WarehouseInventory $record) {
		if (!$this->recordlocker->isLocked($this->lockerkey($record))) {
			$this->recordlocker->lock($this->lockerkey($record));
		}
		return $this->recordlocker->userHasLocked($this->lockerkey($record));
	}

	/**
	 * Return WarehouseInventory Item Status Options
	 * @return array
	 */
	public function get_itemstatus_options() {
		return WarehouseInventory::STATUS_DESCRIPTIONS;
	}

	/**
	 * Return WarehouseInventory Special Order Options
	 * @return array
	 */
	public function get_specialorder_options() {
		return WarehouseInventory::SPECIALORDER_DESCRIPTIONS;
	}

	/**
	 * Returns IN config
	 * @return ConfigIn
	 */
	public function get_config_in() {
		return Configs\In::config();
	}

	/**
	 * Returns IN config
	 * @return ConfigSalesOrder
	 */
	public function get_config_so() {
		return Configs\So::config();
	}

	/**
	 * Return Warehouses
	 * NOTE: Returns all warehouses, not item ones
	 * @return Warehouses[]|ObjectCollection
	 */
	public function get_warehouses() {
		$q = WarehouseQuery::create();
		return $q->find();
	}

	/**
	 * Return Warehouse IDs
	 * NOTE: Returns all warehouses for this company
	 * @return array
	 */
	public function get_warehouses_ids() {
		$q = WarehouseQuery::create();
		$q->select(Warehouse::get_aliasproperty('id'));
		return $q->find()->toArray();
	}

	/**
	 * Return Warehouse by ID
	 * @return Warehouse
	 */
	public function get_warehouse($id) {
		$q = WarehouseQuery::create();
		return $q->findOneById($id);
	}

	/**
	 * Return array of whseIDs for Item ID
	 * @param  string $itemID Item ID
	 * @return array
	 */
	public function get_itemwarehouseIDs($itemID) {
		$q = $this->query();
		$q->select(WarehouseInventory::get_aliasproperty('warehouseid'));
		$q->filterByItemid($itemID);
		return $q->find()->toArray();
	}

	/**
	 * Return array of Warehouses with Warehouse ID as a Key for validation of bins
	 * @param  string $itemID Item ID
	 * @return array
	 */
	public function get_itemwarehouses_js($itemID) {
		$js = array();
		$whseIDs = $this->get_itemwarehouseIDs($itemID);
		$warehouses = WarehouseQuery::create()->findById($whseIDs);

		foreach ($warehouses as $warehouse) {
			$js[$warehouse->id] = array(
				'id'             => $warehouse->id,
				'binarrangement' => $warehouse->get_binarrangementdescription(),
				'bins'           => WarehouseBinQuery::create()->get_warehousebins($warehouse->id)->toArray()
			);
		}
		return $js;
	}

	public function get_warehouseitem_lockkey(WarehouseInventory $warehouse) {
		return $this->lockerkey($warehouse);
	}

	public function lockerkey(WarehouseInventory $warehouse) {
		return implode(FunctionLocker::glue(), [$warehouse->itemid, $warehouse->warehouseid]);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITM Warehouse CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITM Warehouse',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {
		$this->recordlocker = new FunctionLocker();
		$this->recordlocker->setFunction(self::RECORDLOCKER_FUNCTION);
		$this->recordlocker->setUser($this->wire('user'));
	}
}
