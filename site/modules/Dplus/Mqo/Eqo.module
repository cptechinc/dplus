<?php namespace ProcessWire;
// Purl URI manipulation Library
use Purl\Url;
// Dplus Models
use QuoteQuery, Quote;
use CustomerShiptoQuery, CustomerShipto;
use WarehouseQuery, Warehouse;
use ShipviaQuery, Shipvia;
// Dpluso Models
use QuothedQuery, Quothed;
use StatesQuery, States;
use LogpermQuery;
// Dplus Configs
use Dplus\Configs;
// Dplus Eqo
use Dplus\Mqo\Eqo\Header as QtHeader;
use Dplus\Mqo\Eqo\Items  as QtItems;

class Eqo extends WireData implements Module {
	protected $qnbr;

	/**
	 * Returns if Quote Number has been defined
	 * @return bool
	 */
	public function hasQnbr() {
		return boolval($this->qnbr);
	}

	/**
	 * Returns Editable Quote
	 * @return Quothed
	 */
	public function getEditableQuote() {
		$m = new QtHeader();
		return $m->quote($this->qnbr);
	}

	/**
	 * Return if Editable Quote Header exists
	 * @return bool
	 */
	public function hasEditableQuote() {
		$m = new QtHeader();
		return $m->exists($this->qnbr);
	}

	/**
	 * Sets Quote Number
	 * @return string
	 */
	public function setQnbr($qnbr) {
		$this->qnbr = $qnbr;
	}

	public function requestEditableQuote() {
		$m = new QtHeader();
		$m->requestEditableQuote($this->qnbr);
	}

	/**
	 * Return US States
	 * @return States|ObjectCollection
	 */
	public function getStates() {
		return StatesQuery::create()->select(['name', 'abbreviation'])->find();
	}

	/**
	 * Return Shipvias
	 * @return Shipvia[]|ObjectCollection
	 */
	public function getShipvias() {
		return ShipviaQuery::create()->find();
	}

	/**
	 * Return Warehouses
	 * @return Warehouse[]|ObjectCollection
	 */
	public function getWarehouses() {
		return WarehouseQuery::create()->find();
	}

	public function getConfigSo() {
		return Configs\So::config();
	}

	/**
	 * Sends HTTP GET request to send Dplus Item Search Request
	 * @param  string $q Query or Item ID
	 * @return void
	 */
	public function request_itemsearch($q) {
		$http = new WireHttp();
		$url = new Url('127.0.0.1');
		$url->path = $this->wire('pages')->get('template=redir,redir_file=ii')->url;
		$url->query->set('action', 'item-search');
		$url->query->set('q', $q);
		$url->query->set('custID', $this->get_custid());
		$url->query->set('sessionID', session_id());
		$http->get($url->getUrl());
	}

	/**
	 * Return if User is editing Quote
	 * @param  User              $user  User
	 * @param  SalesOrder|string $quote Sales Order
	 * @return bool                     IS User is editing Quote?
	 */
	public function isUserEditingQuote(User $user, $qnbr) {
		$q = LogpermQuery::create();
		$logperm = $q->findOneBySessionid($user->sessionID);
		return $qnbr == $logperm->ordernbr;
	}

	/**
	 * Process Input Data and perform CRUD operations
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	public function processInput(WireInput $input) {
		$values = $input->values();

		switch ($values->text('action')) {
			case 'update-quote':
			case 'create-order':
				$m = new QtHeader();
				$m->processInput($input);
				break;
			case 'add-item':
			case 'update-item-quick':
			case 'delete-item':
				$m = new QtItems();
				$m->processInput($input);
				break;
		}
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->addHook('User::isEditingQuote', function($event) {
			$user = $event->object;
			$qnbr = $event->arguments(0);
			$event->return = $this->isUserEditingQuote($user, $qnbr);
		});
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus EQO Module',
			'version' => 101,
			'summary' => 'Handles Dpluso Quote Edit',
			'singular' => true,
			'autoload' => true,
		);
	}
}
