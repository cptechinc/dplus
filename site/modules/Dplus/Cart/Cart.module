<?php namespace ProcessWire;

include_once(__DIR__ . '/vendor/autoload.php');

use Purl\Url;
use Propel\Runtime\ActiveQuery\Criteria;

use CarthedQuery, Carthed;
use CartdetQuery, Cartdet;

use ItemMasterItemQuery, ItemMasterItem;
use ConfigSalesOrderQuery, ConfigSalesOrder;
use CustomerShiptoQuery, CustomerShipto;
use CustomerQuery, Customer;

use LogpermQuery, Logperm;

class Cart extends WireData implements Module {
	public function query_header($sessionID = '') {
		$q = CarthedQuery::create();
		if ($sessionID) {
			$q->filterBySessionid($sessionID);
		}
		return $q;
	}

/* =============================================================
	Cart Header Functions
============================================================= */
	/**
	 * Returns if Cart Customer has been defined
	 * @return bool
	 */
	public function has_custid() {
		$q = $this->query_header($this->sessionID);
		$q->select('custid');
		$q->filterByCustid('', Criteria::NOT_EQUAL);
		return boolval($q->count());
	}

	/**
	 * Returns Customer ID
	 * @return string
	 */
	public function get_custid() {
		$q = $this->query_header($this->sessionID);
		$q->select('custid');
		return $q->findOne();
	}

	/**
	 * Returns if Cart  Customer Shipto ID has been defined
	 * @return bool
	 */
	public function has_shiptoid() {
		$q = $this->query_header($this->sessionID);
		$q->select('shiptoid');
		$q->filterByShiptoid('', Criteria::NOT_EQUAL);
		return boolval($q->count());
	}

	/**
	 * Returns  Customer Shipto ID
	 * @return string
	 */
	public function get_shiptoid() {
		$q = $this->query_header($this->sessionID);
		$q->select('shiptoid');
		return $q->findOne();
	}

	/**
	 * Sets Cart Customer ID
	 * @return string
	 */
	public function set_custid($custID) {
		$q = $this->query_header($this->sessionID);
		if ($q->count()) {
			$cart = CarthedQuery::create()->findOneBySessionid(session_id());
		} else {
			$cart = new Carthed();
			$cart->setSessionid(session_id());
		}

		if ($this->validate_custid($custID)) {
			$cart->setCustid($custID);
		}
		$cart->save();
	}

	/**
	 * Sets Cart Customer Shipto ID
	 * @return string
	 */
	public function set_shiptoid($shiptoID) {
		if (CarthedQuery::create()->filterBySessionid(session_id())->count()) {
			$cart = CarthedQuery::create()->findOneBySessionid(session_id());
		} else {
			$cart = new Carthed();
			$cart->setSessionid(session_id());
		}
		$cart->setShiptoid($shiptoID);
		$cart->save();
	}

/* =============================================================
	Cart Items Functions
============================================================= */
	/**
	 * Returns if Session has items in the cart
	 *
	 * @return bool Does the User's cart have items?
	 */
	public function has_items() {
		return boolval(CartdetQuery::create()->filterBySessionid(session_id())->count());
	}

	/**
	 * Return Items that are in the cart
	 * @return Cartdet[]|ObjectCollection
	 */
	public function get_items() {
		return CartdetQuery::create()->filterBySessionid(session_id())->find();
	}

	/**
	 * Return Cartdet
	 * @param  int      $linenbr Line Number
	 * @return Cartdet
	 */
	public function get_cart_lineitem($linenbr = 1) {
		return CartdetQuery::create()->filterBySessionidLinenbr($this->sessionID, $linenbr)->findOne();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Process Input Data and act on upon action
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'set-customer':
				$this->input_set_customer($input);
				break;
			case 'set-shiptoid':
				$this->input_set_shipto($input);
				break;
			case 'add-item':
				$this->input_item_add($input);
				break;
			case 'add-popular-items':
				$this->input_item_add_multiple($input);
				break;
			case 'update-item-quick':
				$this->input_item_update_quick($input);
				break;
			case 'delete-item':
				$this->input_item_delete($input);
				break;
			case 'empty-cart':
				$this->request_emptycart();
				break;
			case 'create-order':
				$this->request_create_order();
				break;
			case 'create-quote':
				$this->request_create_quote();
				break;
			case 'create-blank-order':
				if ($this->input_set_customer($input)) {
					$this->request_create_order();
				}
				break;
		}
	}

	/**
	 * Set Customer
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_set_customer(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$custID = $values->text('custID');
		$this->set_custid($custID);

		if ($values->shiptoID) {
			$this->set_shiptoid($values->text('shiptoID'));
			return true;
		}

		$q = CustomerShiptoQuery::create()->filterByCustid($custID);

		if ($q->count() == 1) {
			$shipto = $q->findOne();
			$this->set_shiptoid($shipto->shiptoid);
			return true;
		}

		$q->filterByPrimary(CustomerShipto::YN_TRUE);
		if ($q->count()) {
			$shipto = $q->findOne();
			$this->set_shiptoid($shipto->shiptoid);
		}
		return true;
	}

	/**
	 * Set Customer
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_set_shipto(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$shiptoID = $values->text('shiptoID');
		$this->set_shiptoid($shiptoID);
		$q = CustomerShiptoQuery::create()->filterByCustid($custID)->filterByShiptoid($shiptoID);

		if ($q->count()) {
			$this->set_shiptoid($shiptoID);
		}
		return true;
	}

	/**
	 * Add Item
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_item_add(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$itemID = $values->text('itemID');
		$qty    = $values->int('qty');
		$this->request_item_add($itemID, $qty);
		return true;
	}

	/**
	 * Add Item
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_item_add_multiple(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$qty = $values->array('qty');
		$itemID = $values->array('itemID');
		$this->request_item_add_multiple($itemID, $qty);
		return true;
	}

	/**
	 * Update Item using Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_item_update_quick(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$linenbr = $values->int('linenbr');
		$lineitem = $this->get_cart_lineitem($linenbr);
		$this->update_lineitem_input($lineitem, $input);
		$saved = $lineitem->save();
		if ($saved) {
			$this->request_item_update($linenbr);
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Update Cart Detail from Input Data
	 * @param  Cartdet   $item  Line Item
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	private function update_lineitem_input(Cartdet $item, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$item->setQty($values->int('qty'));
		$item->setPrice($values->text('price'));
		$item->setRshipdate($values->text('rqstdate'));
	}

	/**
	 * Delete Item using Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	private function input_item_delete(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$linenbr = $values->int('linenbr');
		$lineitem = $this->get_cart_lineitem($linenbr);
		$lineitem->setQty(0);
		$saved = $lineitem->save();

		if ($saved) {
			$this->request_item_delete($linenbr);
			return true;
		} else {
			return false;
		}
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return ItemMasterItem
	 * @param  string $itemID Item ID
	 * @return ItemMasterItem
	 */
	public function get_im_item($itemID) {
		return ItemMasterItemQuery::create()->findOneByItemid($itemID);
	}

	/**
	 * Return the number of decimal places for qty values
	 * @return int
	 */
	public function decimal_places_qty() {
		$config = $this->config('so');
		return $config->decimal_places_qty;
	}

	/**
	 * Return the number of decimal places for price values
	 * @return int
	 */
	public function decimal_places_price() {
		$config = $this->config('so');
		return $config->decimal_places_price;
	}

	/**
	 * Return a Config Class
	 * @param  string $code Config Code
	 * @return Config(x)
	 */
	public function config($code) {
		switch ($code) {
			case 'so':
			default:
				return ConfigSalesOrderQuery::create()->findOne();
				break;
		}
	}

	public function validate_custid($custID) {
		$q = CustomerQuery::create();
		$q->filterByCustid($custID);
		return boolval($q->count());
	}

	public function get_customer($custID) {
		$q = CustomerQuery::create();
		$q->filterByCustid($custID);
		return $q->findOne();
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	private function request_dplus(array $data, $addcustID = true) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusOnlineDatabase')->db_name;
		$data = array_merge(["DBNAME=$dplusdb"], $data);

		if ($addcustID) {
			$custID = $this->get_custid();
			$custID = !empty($custID) ? $custID : $config->default_webcustomer;
			$data[] = "CUSTID=$custID";
		}
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, $this->sessionID);
		$requestor->cgi_request($config->cgis['default'], $this->sessionID);
	}

	/**
	 * Sends HTTP GET request to send Dplus Item Search Request
	 * @param  string $q Query or Item ID
	 * @return void
	 */
	public function request_itemsearch($q) {
		$data = array("ITNOSRCH=$q");
		$this->request_dplus($data);
	}

	/**
	 * Request Item Add to cart for CustID
	 * @param string $itemID Item ID
	 * @param string $qty    Qty to be added
	 */
	private function request_item_add($itemID, $qty) {
		$data = array('CARTDET', "ITEMID=$itemID", "QTY=$qty");
		$this->request_dplus($data);
	}

	/**
	 * Request Item Add to cart for CustID
	 * @param string $itemID Item ID
	 * @param string $qty    Qty to be added
	 */
	private function request_item_add_multiple(array $itemIDs, array $qtys) {
		$custID = $this->get_custid();
		$custID = !empty($custID) ? $custID : $config->default_webcustomer;
		$data = array('CARTADDMULTIPLE', "CUSTID=$custID");
		for ($i = 0; $i < sizeof($qtys); $i++) {
			if (!empty($qtys[$i])) {
				$itemID = str_pad($itemIDs[$i], 30, ' ');
				$qty = $qtys[$i];
				$data[] = "ITEMID={$itemID}QTY=$qty";
			}
		}
		$this->request_dplus($data, $addcustID = false);
	}

	/**
	 * Request Item Update
	 * @param string $itemID   Item ID
	 * @param int    $linenbr  Line Number
	 * @param string $custID   Customer ID
	 */
	private function request_item_update($linenbr) {
		$data = array('CARTDET', "LINENO=$linenbr");
		$this->request_dplus($data);
	}

	/**
	 * Request Item Delete
	 * @param int    $linenbr  Line Number
	 */
	private function request_item_delete($linenbr = 1) {
		$data = array('CARTDET', "LINENO=$linenbr", 'QTY=0');
		$this->request_dplus($data);
	}

	/**
	 * Request cart to be emptied
	 * @return void
	 */
	private function request_emptycart() {
		$data = array("EMPTYCART");
		$this->request_dplus($data);
	}

	/**
	 * Request Sales Order to be created from Cart
	 * @return void
	 */
	private function request_create_order() {
		$data = array("CREATESO");
		$this->request_dplus($data, $addcustID = false);
	}

	/**
	 * Request Quote to be created from Cart
	 * @return void
	 */
	private function request_create_quote() {
		$data = array("CREATEQT");
		$this->request_dplus($data, $addcustID = false);
	}

/* =============================================================
	URL Functions
============================================================= */
	/**
	 * Return URL to Cart
	 * @return string
	 */
	public function cartURL() {
		return $this->wire('pages')->get('pw_template=cart')->url;
	}

	/**
	 * Return Purl
	 * @return Url
	 */
	public function cartPURL() {
		return new Url($this->wire('pages')->get('pw_template=cart')->url);
	}

	/**
	 * Return URL to delete Line Item
	 * @param  int    $linenbr Line Number
	 * @return string
	 */
	public function delete_itemURL($linenbr = 0) {
		$url = $this->cartPURL();
		$url->query->set('action', 'delete-item');
		$url->query->set('linenbr', $linenbr);
		return $url->getUrl();
	}

	/**
	 * Return URL to Empty Cart
	 * @return string
	 */
	public function empty_cartURL() {
		$url = $this->cartPURL();
		$url->query->set('action', 'empty-cart');
		return $url->getUrl();
	}

	/**
	 * Return URL to Create Order
	 * @return string
	 */
	public function create_orderURL() {
		$url = $this->cartPURL();
		$url->query->set('action', 'create-order');
		return $url->getUrl();
	}

	/**
	 * Return URL to Create Quote
	 * @return string
	 */
	public function create_quoteURL() {
		$url = $this->cartPURL();
		$url->query->set('action', 'create-quote');
		return $url->getUrl();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->sessionID = session_id();
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Cart Module',
			'version' => 101,
			'summary' => 'Handles Dpluso Cart',
			'singular' => true,
			'autoload' => true,
		);
	}
}
