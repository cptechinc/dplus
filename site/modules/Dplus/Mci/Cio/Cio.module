<?php namespace ProcessWire;

use Purl\Url;

use Dplus\CodeValidators\Msa as MsaValidator;
use OptionsCiQuery, OptionsCi;

/**
 * Module that handles the editing of the Cio User Permissions
 */
class Cio extends WireData implements Module {
	const MODEL              = 'OptionsCi';
	const MODEL_KEY          = 'userid';
	const RESPONSE_TEMPLATE  = 'User {key} permissions were {not} {crud}';
	const RECORDLOCKER_FUNCTION  = 'cio';

/* =============================================================
	Const, Config Functions
============================================================= */
	const USER_DEFAULT = 'system';

	const CI_SCREENS = [
		'notes',
		'contacts',
		'payments',
		'corebank',
		'credit',
		'stock',
		'pricing',
		'standingorders',
		'salesorders',
		'quotes',
		'openinvoices',
		'customerpo',
		'saleshistory',
	];

	const PERMISSIONS_DEFAULT = [
		'notes'          => 'N',
		'contacts'       => 'N',
		'payments'       => 'N',
		'corebank'       => 'N',
		'credit'         => 'N',
		'stock'          => 'N',
		'pricing'        => 'N',
		'standingorders' => 'N',
		'salesorders'    => 'N',
		'quotes'         => 'N',
		'openinvoices'   => 'N',
		'customerpo'     => 'N',
		'saleshistory'   => 'N',
	];

	public function Ciscreens() {
		return self::CI_SCREENS;
	}

	const OPTION_ATTRIBUTES = [
		'notes'          => ['default' => 'N', 'label' => 'Notes', 'date'=> false],
		'contacts'       => ['default' => 'N', 'label' => 'Contact / Notes', 'date'=> false],
		'payments'       => ['default' => 'N', 'label' => 'Payment', 'date'=> false],
		'corebank'       => ['default' => 'N', 'label' => 'Core Bank', 'date'=> false],
		'credit'         => ['default' => 'N', 'label' => 'Credit', 'date'=> false],
		'stock'          => ['default' => 'N', 'label' => 'Customer Stock', 'date'=> false],
		'pricing'        => ['default' => 'N', 'label' => 'Pricing', 'date'=> false],
		'standingorders' => ['default' => 'N', 'label' => 'Standing Order', 'date'=> false],
		'salesorders'    => ['default' => 'N', 'label' => 'Sales Order', 'date'=> false],
		'quotes'         => ['default' => 'N', 'label' => 'Quote', 'date'=> false],
		'openinvoices'   => ['default' => 'N', 'label' => 'Open Invoices', 'date'=> false],
		'customerpo'     => ['default' => 'N', 'label' => 'Customer PO', 'date'=> true],
		'saleshistory'   => ['default' => 'N', 'label' => 'Sales History', 'date'=> true],

		'dayscustomerpo'    => ['max' => 9999],
		'dayssaleshistory'  => ['max' => 9999],
	];

	/**
	 * Return Screens that have $x === true
	 * @param  string $x property e.g detail|date|whse
	 * @return array
	 */
	public function screens_with_x($x) {
		$screens = [];

		foreach (self::CI_SCREENS as $screen) {
			if (self::OPTION_ATTRIBUTES[$screen][$x] === true) {
				$screens[] = $screen;
			}
		}
		return $screens;
	}


	/**
	 * Return Field Attribute value
	 * @param  string $field Field Name
	 * @param  string $attr  Attribute Name
	 * @return mixed|bool
	 */
	public function field_attribute($field = '', $attr = '') {
		if (empty($field) || empty($attr)) {
			return false;
		}
		if (array_key_exists($field, self::OPTION_ATTRIBUTES) === false) {
			return false;
		}
		if (array_key_exists($attr, self::OPTION_ATTRIBUTES[$field]) === false) {
			return false;
		}
		return self::OPTION_ATTRIBUTES[$field][$attr];
	}

	/**
	 * Returns OptionsCiQuery
	 * @return OptionsCiQuery
	 */
	public function query() {
		return OptionsCiQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return OptionsCi[]
	 * @return OptionsCi[]|ObjectCollection
	 */
	public function users() {
		$q = $this->query();
		return $q->find();
	}

	/**
	 * Return if User Permissions Exists
	 * @param  string $loginID Login ID
	 * @return bool
	 */
	public function exists($loginID) {
		$q = $this->query();
		$q->filterByUserid($loginID);
		return boolval($q->count());
	}

	/**
	 * Return OptionsCi
	 * @param  string $loginID Login ID
	 * @return OptionsCi
	 */
	public function user($loginID) {
		$q = $this->query();
		$q->filterByUserid($loginID);
		return $q->findOne();
	}

	/**
	 * Return OptionsCi
	 * @param  string $loginID Login ID
	 * @return OptionsCi
	 */
	public function usercio($loginID) {
		if ($this->exists($loginID)) {
			return $this->user($loginID);
		}

		if ($this->exists(self::USER_DEFAULT)) {
			return $this->user(self::USER_DEFAULT);
		}

		return OptionsCi::new();
	}

	/**
	 * Return new OptionsCi
	 * @param  string $loginID
	 * @return OptionsCi
	 */
	public function new($loginID = '') {
		$user = OptionsCi::new();
		if (strlen($loginID) && $loginID != 'new') {
			$user->setUserid($loginID);
		}

		if ($loginID != self::USER_DEFAULT) {
			$this->copyoptions(self::USER_DEFAULT, $user);
		}
		return $user;
	}

	/**
	 * Copies Options from User to another
	 * @param  string    $from User ID to copy from
	 * @param  OptionsCi $to   Record to copy to
	 * @return OptionsCi
	 */
	public function copyoptions($from = '', OptionsCi $to) {
		if ($this->exists($from) == false) {
			return $to;
		}
		$template = $this->user($from);
		foreach(array_keys(self::OPTION_ATTRIBUTES) as $option) {
			$to->set($option, $template->$option);
		}
		return $to;
	}

	/**
	 * Return New or Existing User
	 * @param  string $loginID
	 * @return OptionsCi
	 */
	public function get_create($loginID) {
		if ($this->exists($loginID)) {
			return $this->user($loginID);
		}
		return $this->new($loginID);
	}


/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, processses the action, calls the input_{$crud} to execute
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'update-cio':
				$this->input_update($input);
			case 'delete-cio':
				$this->input_delete($input);
			default:
				// TODO;
				break;
		}
	}

	/**
	 * Delete CIO from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_delete(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$userID = $values->text('userID');

		if ($this->exists($userID) == false) {
			return true;
		}

		$record = $this->user($userID);

		if (!$this->lockrecord($record->userid)) {
			$message = self::DESCRIPTION_RECORD . " ($record->userid) could not deleted, it is locked by " . $this->recordlocker->get_locked_user($record->userid);
			$this->wire('session')->response_cio = MsaResponse::response_error($record->userid, $message);
			return false;
		}

		$record->delete();
		$this->wire('session')->response_cio = $this->save_and_respond($record, []);
		return $this->wire('session')->response_cio->has_success();
	}

	/**
	 * Update CIO record from Input Data
	 * @param  WireInput $input Input Data
	 * @return bool
	 */
	protected function input_update(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$userID = $values->text('userID');
		$invalidfields = [];
		$record = $this->get_create($userID);

		if (!$record->isNew()) {
			if (!$this->lockrecord($record->userid)) {
				$message = self::DESCRIPTION_RECORD . " ($record->userid)  was not saved, it is locked by " . $this->recordlocker->get_locked_user($record->userid);
				$this->wire('session')->response_cio = MsaResponse::response_error($record->userid, $message);
				return false;
			}
		}
		$invalidfields = $this->update_record_input($record, $input);
		$this->wire('session')->response_cio = $this->save_and_respond($record, $invalidfields);
		return $this->wire('session')->response_cio->has_success();
	}

	/**
	 * Updates CXM Item Record
	 * @param  OptionsCi $record CXM Item Record
	 * @param  WireInput        $input  Input Data
	 * @return MsaResponse
	 */
	public function update_record_input(OptionsCi $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		$this->update_record_input_screenoptions($record, $input);
		$this->update_record_input_dates($record, $input);
		$invalidfields = array();
		$invalidfields = $this->update_record_input_validated($record, $input);

		$record->setDate(date('Ymd'));
		$record->setTime(date('His'));
		return $invalidfields;
	}

	/**
	 * Update Screen options Permissions for record
	 * @param  OptionsCi $record User Record
	 * @param  WireInput $input  Input Data
	 * @return bool
	 */
	private function update_record_input_screenoptions(OptionsCi $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		foreach (self::CI_SCREENS as $screen) {
			$setFunction = "set".ucfirst($screen);
			$record->$setFunction($values->yn($screen));
		}
		return true;
	}

	/**
	 * Update Screen options Date Values for record
	 * @param  OptionsCi $record User Record
	 * @param  WireInput $input  Input Data
	 * @return bool
	 */
	private function update_record_input_dates(OptionsCi $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		foreach ($this->screens_with_x('date') as $screen) {
			$datefield = "date$screen";
			$dayfield = "days$screen";
			$date = '';
			$days = '';

			if ($values->int($dayfield) > 0) {
				$days = $values->int($dayfield, ['max' => $this->field_attribute($dayfield, 'max')]);
			}

			if (strlen($values->text($datefield))) {
				$date = date('Ymd', strtotime($values->text($datefield)));
			}

			$record->set($dayfield, $days);
			$record->set($datefield, $date);
		}
	}

	/**
	 * Updates Cio Record's userID
	 * Validates Each property is valid, returns invalid inputs, descriptions
	 * @param  OptionsCi  $record   User Record
	 * @param  WireInput  $input    Input Data
	 * @return array
	 */
	protected function update_record_input_validated(OptionsCi $record, WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$modules = $this->wire('modules');
		$validate = new MsaValidator();

		$invalid = array();

		$fields = array(
			'userID' => array(
				'description' => 'User ID',
				'input'       => 'userID',
				'property'    => 'userid',
				'allow_blank' => false,
				'function'    => 'userid'
			),
		);

		$validator = $modules->get('InputValidator');
		$validator->set_validator($validate)->set_input($input)->set_record($record)->set_validatefields($fields);
		$invalid = $validator->validate();
		$validator->set_valid_properties();
		return $invalid;
	}

/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns MsaResponse based on the outcome of the database save
	 * @param  OptionsCi $record        Record to record response of database save
	 * @param  array          $invalidfields Input fields that require attention
	 * @return MsaResponse
	 */
	protected function save_and_respond(OptionsCi $record, array $invalidfields) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new MsaResponse();
		$response->set_key($record->userid);

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
		}

		if ($is_new) {
			$response->set_action(MsaResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$response->set_action(MsaResponse::CRUD_DELETE);
		} else {
			$response->set_action(MsaResponse::CRUD_UPDATE);
		}
		$response->build_message(self::RESPONSE_TEMPLATE);

		if ($response->has_success() && empty($invalidfields)) {
			$this->request_update($record->userid);
		}
		$response->set_fields($invalidfields);
		return $response;
	}

	public function has_response() {
		return boolval($this->wire('session')->response_cio);
	}

	public function response() {
		return $this->wire('session')->response_cio;
	}

	/**
	 * Return if Field has Error
	 * NOTE: Uses $session->response_itm->fields to derive this
	 * @param  string $inputname Input name e.g. commissiongroup
	 * @return bool
	 */
	public function field_has_error($inputname) {
		$response = $this->response();
		return ($response) ? array_key_exists($inputname, $response->fields) : false;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Writes File for Dplus to update the ITM Perm File for this login ID
	 * @param  string $userID Login ID
	 * @return void
	 */
	public function request_update($userID) {
		$this->wire('modules')->get('CodeTables')->update_dplus_cobol('CIO', $userID);
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return Itm Subfunctions that the user has permissions to
	 * @param  User   $user
	 * @return PageArray
	 */
	public function ci_subfunctions(User $user) {
		$permitted = $user->permitted_ci();
		if (empty($permitted)) {
			return new PageArray();
		}
		$p = $this->wire('pages')->get('pw_template=ci');
		$templates = implode('|', $this->permissions_to_templates($permitted));
		return $p->children("pw_template=$templates");
	}

	/**
	 * Return if User is allowed to CI subfunction
	 * @param  User   $user
	 * @param  string $option CI subfunction
	 * @return bool
	 */
	public function allowUser(User $user, $option = '') {
		$userID = $this->exists($user->loginid) ? $user->loginid : self::USER_DEFAULT;
		$permissions = $this->user($userID);
		$exists = array_key_exists($option, self::PERMISSIONS_DEFAULT);
		return $exists ? $permissions->is_true($option) : true;
	}

	/**
	 * Lock Record, validate User is locking Record
	 * @param  string $userID
	 * @return bool
	 */
	public function lockrecord($userID) {
		if (!$this->recordlocker->function_locked($userID)) {
			$this->recordlocker->create_lock($userID);
		}
		return $this->recordlocker->function_locked_by_user($userID);
	}

/* =============================================================
	URL Functions
============================================================= */
	public function cioURL($userID = '', $focus = '') {
		$url = new Url($this->wire('pages')->get('pw_template=cio')->url);
		$url->query->set('userID', $userID);
		$url->query->set('focus', $focus);
		return $url->getUrl();
	}

	public function cio_deleteURL($userID = '') {
		$url = new Url($this->wire('pages')->get('pw_template=cio')->url);
		$url->query->set('action', 'delete-cio');
		$url->query->set('userID', $userID);
		return $url->getUrl();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus CIO CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for CIO',
			'singular' => true,
			'autoload' => true,
		);
	}

	/**
	 * Set up Functions / Properties for pw_templated pages
	 * @return void
	 */
	public function init() {
		$this->recordlocker = $this->wire('modules')->get('RecordLockerUserFunction');
		$this->recordlocker->set_function(self::RECORDLOCKER_FUNCTION);

		$this->addHook("User::permitted_ci", function($event) {
			$user = $event->object;
			$options = $this->usercio($user->loginid);
			$event->return = $options->permitted();
		});

		$this->addHook("Page(pw_template=ci)::subfunctions", function($event) {
			$user = $this->wire('user');
			$event->return = $this->ci_subfunctions($user);
		});

		$this->addHook("Page(pw_template=cio)::cioURL", function($event) {
			$userID = $event->arguments(0);
			$focus = $event->arguments(1);
			$event->return = $this->cioURL($userID, $focus);
		});

		$this->addHook("Page(pw_template=cio)::cio_deleteURL", function($event) {
			$userID = $event->arguments(0);
			$event->return = $this->cio_deleteURL($userID);
		});
	}
}
