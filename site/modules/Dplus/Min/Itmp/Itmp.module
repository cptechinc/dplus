<?php namespace ProcessWire;

use Purl\Url;

use UserPermissionsItmQuery, UserPermissionsItm;

/**
 * Module that handles the editing of the UPC item Itm
 */
class Itmp extends WireData implements Module {
	const MODEL              = 'UserPermissionsItm';
	const MODEL_KEY          = 'code';
	const RESPONSE_TEMPLATE  = 'User {userid} permissions were {not} {crud}';
	const RECORDLOCKER_FUNCTION  = 'itmp';

	const TEMPLATES_ITM = array(
		'itm',
		'itm-pricing',
		'itm-whse',
		'itm-costing',
		'itm-xrefs',
		'itm-xrefs-upcx',
		'itm-xrefs-vxm',
		'itm-xrefs-cxm',
		'itm-misc',
		'itm-components',
		'itm-kit',
	);

	const TEMPLATES_PERMISSIONS = array(
		'itm-pricing'    => 'pricing',
		'itm-whse'       => 'whse',
		'itm-costing'    => 'costing',
		'itm-xrefs'      => 'xrefs',
		'itm-xrefs-upcx' => 'xrefs',
		'itm-xrefs-vxm'  => 'xrefs',
		'itm-xrefs-cxm'  => 'xrefs',
		'itm-misc'       => 'misc',
		'itm-kit'        => 'xrefs',
	);

	/**
	 * Returns UserPermissionsItmQuery
	 * @return UserPermissionsItmQuery
	 */
	public function query() {
		return UserPermissionsItmQuery::create();
	}

/* =============================================================
	CRUD Read, Validate Functions
============================================================= */
	/**
	 * Return UserPermissionsItm[]
	 * @return UserPermissionsItm[]|ObjectCollection
	 */
	public function get_permissions() {
		$q = $this->query();
		return $q->find();
	}

	/**
	 * Return if User Permissions Exists
	 * @param  string $userID User ID
	 * @return bool
	 */
	public function permission_exists($userID) {
		$q = $this->query();
		$q->filterByUserid($userID);
		return boolval($q->count());
	}

	/**
	 * Return UserPermissionsItm
	 * @param  string $userID User ID
	 * @return UserPermissionsItm
	 */
	public function get_permission($userID) {
		$q = $this->query();
		$q->filterByUserid($userID);
		return $q->findOne();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Takes Input, processses the action, calls the input_{$crud} to execute
	 * @param  WireInput $input Input
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'create-itmp':
				$this->input_create($input);
			case 'update-itmp':
				$this->input_update($input);
			default:

				break;
		}
	}


/* =============================================================
	CRUD Response Functions
============================================================= */
	/**
	 * Returns ItmResponse based on the outcome of the database save
	 * @param  UserPermissionsItm $record        Record to record response of database save
	 * @param  array          $invalidfields Input fields that require attention
	 * @return ItmResponse
	 */
	protected function save_and_respond(UserPermissionsItm $record, array $invalidfields) {
		$is_new = $record->isDeleted() ? false : $record->isNew();
		$saved  = $record->isDeleted() ? $record->isDeleted() : $record->save();

		$response = new ItmResponse();
		$response->set_itemID($record->itemid);
		$message = self::DESCRIPTION_RECORD . " ($record->itemid) was ";

		if ($saved) {
			$response->set_success(true);
		} else {
			$response->set_error(true);
			$message .= "not ";
		}

		if ($is_new) {
			$message .= 'added';
			$response->set_action(ItmResponse::CRUD_CREATE);
		} elseif ($record->isDeleted()) {
			$message .= 'deleted';
			$response->set_action(ItmResponse::CRUD_DELETE);
		} else {
			$message .= 'updated';
			$response->set_action(ItmResponse::CRUD_UPDATE);
		}

		$response->set_message($message);

		if ($response->has_success() && empty($invalidfields)) {
			if ($record->isDeleted()) {
				$this->request_item_delete($record->itemid);
			} else {
				$this->request_item_update($record->itemid);
			}
		}
		$response->set_fields($invalidfields);
		return $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	private function request_dplus(array $data) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusDatabase')->db_name;
		$data = array_merge(["DBNAME=$dplusdb"], $data);
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['database'], session_id());
	}
	/**
	 * Writes File for Dplus to update the ITM file for this ITEM
	 * @param  string $userID User ID
	 * @return void
	 */
	public function request_item_update($userID) {
		$data = array('UPDATEITM', "ITEMID=$userID");
		$this->request_dplus($data);
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return if Field has Error
	 * NOTE: Uses $session->response_itm->fields to derive this
	 * @param  string $inputname Input name e.g. commissiongroup
	 * @return bool
	 */
	public function field_has_error($inputname) {
		$response = $this->wire('session')->response_itmp;
		return ($response) ? array_key_exists($inputname, $response->fields) : false;
	}

/* =============================================================
	URL Functions
============================================================= */

/* =============================================================
	Supplemental Module Functions
============================================================= */
	/**
	 * Return Itm Subfunctions that the user has permissions to
	 * @param  User   $user
	 * @return PageArray
	 */
	public function itm_subfunctions(User $user) {
		$permitted = $user->permitted_itm();
		if (empty($permitted)) {
			return new PageArray();
		}
		$p = $this->wire('pages')->get('pw_template=itm');
		$templates = implode('|', $this->permissions_to_templates($permitted));
		return $p->children("pw_template=$templates");
	}

	/**
	 * Return Templates that the user has permissions to
	 * @param  array  $permitted e.g ['pricing', 'xrefs']
	 * @return array
	 */
	public function permissions_to_templates(array $permitted) {
		$templates = [];
		foreach (self::TEMPLATES_PERMISSIONS as $template => $permission) {
			if (in_array($permission, $permitted)) {
				$templates[] = $template;
			}
		}
		return $templates;
	}
	/**
	 * Return if User is allowed to view Template
	 * @param  User   $user     Dplus User
	 * @param  string $template Template name
	 * @return bool
	 */
	public function is_user_allowed_template(User $user, $template) {
		$permissions = $this->get_permission($user->loginid);
		$needed = self::TEMPLATES_PERMISSIONS[$template];
		return $permissions->is_true($needed);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus ITMP CRUD Manager',
			'version' => 101,
			'summary' => 'Module for CRUD Methods for ITMP',
			'singular' => true,
			'autoload' => true,
		);
	}

	/**
	 * Set up Functions / Properties for pw_templated pages
	 * @return void
	 */
	public function init() {
		$this->recordlocker = $this->wire('modules')->get('RecordLockerUserFunction');
		$this->recordlocker->set_function(self::RECORDLOCKER_FUNCTION);

		$this->addHook("User::permitted_itm", function($event) {
			$user = $event->object;
			$permission = $this->get_permission($user->loginid);
			$event->return = $permission->permitted();
		});

		$this->addHook("User::permitted_template", function($event) {
			$user = $event->object;
			$template = $event->arguments(0);
			$event->return = $this->is_user_allowed_template($user, $template);
		});

		$this->addHook("Page(pw_template=itm)::subfunctions", function($event) {
			$user = $this->wire('user');
			$event->return = $this->itm_subfunctions($user);
		});

	}
}
