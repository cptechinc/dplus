<?php namespace ProcessWire;

use Purl\Url;

use Propel\Runtime\ActiveQuery\Criteria;
use Propel\Runtime\Collection\ObjectCollection;

class FilterBookings extends Process implements ConfigurableModule {

	protected $name = 'FilterBookings';

	const CONFIG_FIELDS = array(
		'option_bookings_dashboard' => array(
			'type'        => 'checkbox',  // TRUE OR FALSE
			'label'       => 'Show Bookings on the Dashboard?',
			'description' => 'Show Bookings on the Dashboard',
			'notes'       => ""
		),
		'option_bookings_customer' => array(
			'type'        => 'checkbox',  // TRUE OR FALSE
			'label'       => 'Show Bookings on the CI Customer Page?',
			'description' => 'Show Bookings on the CI Customer Page',
			'notes'       => ""
		)
	);

	const DEFAULT_CONFIG = array(
		'option_bookings_dashboard' => false,
		'option_bookings_customer' => false
	);

	/**
	 * User
	 * @var string
	 */
	protected $user;

	/**
	 * Customer Bookings
	 * @var FilterBookingsCustomer
	 */
	protected $bookings_customer;

	/**
	 * User Bookings
	 * @var FilterBookingsUser
	 */
	protected $bookings_user;

	/**
	 * Day Bookings
	 * @var FilterBookingsDay
	 */
	protected $bookings_day;


	/**
	 * Module Initilization
	 * Sets the bookings_customer, bookings_user, bookings_day properties
	 * @return void
	 */
	public function init() {
		parent::init();

		foreach(self::DEFAULT_CONFIG as $key => $value) {
			if (isset($this->data[$key])) {
				$this->data[$key] = $this->data[$key];
			} else {
				$this->data[$key] = $value;
			}
		}

		$this->user = $this->wire('user');
		$this->bookings_user = $this->wire('modules')->get('FilterBookingsUser');
		$this->bookings_customer = $this->wire('modules')->get('FilterBookingsCustomer');
		$this->bookings_day = $this->wire('modules')->get('FilterBookingsDay');

		$this->addHook('Page::clear_filterURL', function($event) {
			$page = $event->object;
			$url = new Url($page->fullURL->getUrl());
			$url->query = '';

			if ($page->has('custID')) {
				$url->query->set('custID', $page->custID);

				if ($page->has('shiptoID')) {
					$url->query->set('shiptoID', $page->shiptoID);
				}
			}
			$event->return = $url->getUrl();
		});
	}

	/**
	 * Sets the User Property
	 * @param User $user Used for Filtering Bookings
	 */
	public function set_user(User $user) {
		$this->user = $user;
		$this->bookings_user->set_user($user);
		$this->bookings_customer->set_user($user);
		$this->bookings_day->set_user($user);
	}

	/**
	 * Creates an array for the bookings to be easily converted into JSON
	 *
	 * @param  ObjectCollection $bookings Bookings Data
	 * @return array
	 */
	public function convert_bookings_for_js(ObjectCollection $bookings) {
		$data = array();

		foreach ($bookings as $booking) {
			$bookdata = array(
				'bookdate' => date('Y-m-d', strtotime($booking->bookdate)),
				'amount' => floatval($booking->amount)
			);

			if ($this->bookings_user->interval == 'day') {
				$page = $this->wire('page');
				$url = new Url($this->wire('modules')->get('DpagesBookings')->get_bookings_dayURL($booking->bookdate));

				if ($page->pw_template == 'bookings-customer') {
					$url->query->set('custID', $page->custID);
					if ($page->shiptoID) {
						$url->query->set('shiptoID', $page->shiptoID);
					}
				}
				$bookdata['dayurl'] = $url->getUrl();
			}
			$data[] = $bookdata;
		}
		return $data;
	}

	/**
	 * Properties are protected from modification without function, but
	 * We want to allow the property values to be accessed
	 *
	 * @param  string $property  The $property trying to be accessed
	 * @return mixed		     property value or Error
	 */
	 public function __get($property) {
		$method = "get_".ucfirst($property);

		if (method_exists($this, $method)) {
			return $this->$method();
		} elseif (property_exists($this, $property)) {
			return $this->$property;
		}  else {
			$this->error("This property ($property) does not exist");
			return false;
		}
	}


	/* =============================================================
		ProcessWire Module Functions
	============================================================= */
		/**
		 * ProcessWire Module Info
		 *
		 * @return void
		 */
		public static function getModuleInfo() {
			return array(
				'title' => 'Dpluso Bookings Module',
				'version' => 101,
				'summary' => 'Handles Bookings Filtering',
				'singular' => true,
				'autoload' => true,
				'installs' => array(
					'FilterBookingsUser', 'FilterBookingsCustomer', 'FilterBookingsDay'
				),
			);
		}

		static public function getModuleConfigInputfields(array $data) {
			$modules = wire('modules');
			$fields = new InputfieldWrapper();
			$data = array_merge(self::DEFAULT_CONFIG, $data);

			$traits = self::CONFIG_FIELDS['option_bookings_dashboard'];
			$f = $modules->get('InputfieldCheckbox');
			$f->attr('name', 'option_bookings_dashboard');
			$f->attr('checked', $data['option_bookings_dashboard'] ? 'checked' : '' );
			$f->label = __($traits['label']);
			$f->description = __($traits['description']);
			$f->notes = _($traits['notes']);
			$fields->add($f);

			$traits = self::CONFIG_FIELDS['option_bookings_customer'];
			$f = $modules->get('InputfieldCheckbox');
			$f->attr('name', 'option_bookings_customer');
			$f->attr('checked', $data['option_bookings_customer'] ? 'checked' : '' );
			$f->label = __($traits['label']);
			$f->description = __($traits['description']);
			$f->notes = _($traits['notes']);
			$fields->add($f);

			return $fields;
		}
}
