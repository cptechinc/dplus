<?php namespace ProcessWire;

use Picqer\Barcode\BarcodeGeneratorPNG;
use Picqer\Barcode\BarcodeGeneratorSVG;
use Picqer\Barcode\BarcodeGeneratorHTML;
use Picqer\Barcode\BarcodeGeneratorJPG;

/**
 * @property string $imageType   Barcode Display Format
 * @property string $barcodeType Barcode Format Type
 * @property BarcodeGeneratorPNG|BarcodeGeneratorSVG|BarcodeGeneratorHTML|BarcodeGeneratorJPG Barcode Generator Class
 */
class BarcodeMaker extends WireData implements Module {
	const BASE_CLASSNAME = 'Picqer\Barcode\BarcodeGenerator';
	const IMAGE_TYPES = ['SVG', 'PNG', 'JPG', 'HTML'];
	const BARCODE_TYPES = ['TYPE_CODE_128'];

	protected $imageType = 'PNG';
	protected $barcodeType = 'TYPE_CODE_128';

	/**
	 * Barcode Generator
	 * @var BarcodeGeneratorPNG|BarcodeGeneratorSVG|BarcodeGeneratorHTML|BarcodeGeneratorJPG
	 */
	protected $generator;

	/**
	 * Constructs Barcode Generator
	 * @return void
	 */
	public function init() {
		$type = self::BASE_CLASSNAME."$this->imageType";
		$this->generator = new $type();
	}

	/**
	 * Sets Image Type
	 * @uses   self::init()
	 * @param  string $type e.g. PNG
	 * @return void
	 */
	public function setImageType($type) {
		$this->imageType = $type;
		$this->init();
	}

	/**
	 * Sets Barcode Type
	 * @param string $type
	 */
	public function setBarcodeType($type) {
		$this->barcodeType = $type;
	}

	/**
	 * Return image representation of barcode (requires GD or Imagick library).
	 * @param  string $code e.g. TYPE_CODE_128
	 * @return string            image data or false in case of error
	 */
	public function barcode($code) {
		$class = get_class($this->generator);
		return $this->generator->getBarcode($code, constant("$class::$this->barcodeType"));
	}
}
