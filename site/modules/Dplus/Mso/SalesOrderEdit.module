<?php namespace ProcessWire;

use Purl\Url;

use Dplus\CodeValidators\Mso as MsoValidator;

// Dplus Data Database
use SalesOrderQuery, SalesOrder;
use CustomerQuery, Customer;
use CustomerShiptoQuery, CustomerShipto;
use WarehouseQuery, Warehouse;
use ItemMasterItemQuery, ItemMasterItem;
use ArTermsCodeQuery, ArTermsCode;
use ConfigSalesOrderQuery, ConfigSalesOrder;

use OrdrhedQuery, Ordrhed;
use OrdrdetQuery, Ordrdet;
use StatesQuery, States;
use ShipviaQuery, Shipvia;
use LogpermQuery, Logperm;

class SalesOrderEdit extends WireData implements Module {
	const PERMISSION_DPLUS = 'eso';

	protected $ordn;

	const HOOK_FUNCTIONS_LOOKUPS = array(
		// Hook     =>  PW Template
		'itm_json'    => 'itm-json',
		'itm_lookup'  => 'itm-lookup',
		'search_items'     => 'itm-search',
		'search_customers'   => 'ci-search',
	);

	/**
	 * Returns if Sales Order Customer has been defined
	 * @return bool
	 */
	public function has_ordn() {
		return boolval($this->ordn);
	}

	/**
	 * Sets Order Number
	 * @return string
	 */
	public function set_ordn($ordn) {
		$this->ordn = $ordn;
	}

	/**
	 * Returns Query for Sales Order Header Edit
	 * @param  string $ordn Sales Order Number
	 * @return OrdrhedQuery
	 */
	public function get_query_header($ordn) {
		$q = OrdrhedQuery::create();
		$q->filterBySessionid($this->sessionID);
		$q->filterByOrderno($ordn);
		return $q;
	}

	/**
	 * Returns Query for Sales Order Details Edit
	 * @param  string $ordn Sales Order Number
	 * @return OrdrdetQuery
	 */
	public function get_query_details($ordn) {
		$q = OrdrdetQuery::create();
		$q->filterBySessionid($this->sessionID);
		$q->filterByOrderno($ordn);
		return $q;
	}

	/**
	 * Return if Header and Details are available to Edit
	 * @param  string $ordn Sales Order Number
	 * @return bool
	 */
	public function exists_editable($ordn) {
		return $this->exists_editable_header($ordn);
	}

	/**
	 * Return if PO header is available for editing
	 * @param  string $ordn Sales Order Number
	 * @return bool
	 */
	public function exists_editable_header($ordn) {
		$q = $this->get_query_header($ordn);
		return boolval($q->count());
	}

	/**
	 * Return if PO items are available for editing
	 * @param  string $ordn Sales Order Number
	 * @return bool
	 */
	public function exists_editable_details($ordn) {
		$q = $this->get_query_details($ordn);
		return boolval($q->count());
	}

	/**
	 * Returns Editable Sales Order
	 * @return Ordrhed
	 */
	public function get_editable_header($ordn) {
		return OrdrhedQuery::create()->findOneBySessionidOrder(session_id(), $ordn);
	}

	/**
	 * Return Order Items
	 * @return Ordrdet[]
	 */
	public function get_editable_details($ordn) {
		return OrdrdetQuery::create()->filterBySessionidOrder(session_id(), $ordn)->find();
	}

	/**
	 * Return Sales Order Custid
	 * @param  string $ordn Sales Order Number
	 * @return string
	 */
	public function getOrderCustid($ordn) {
		$q = SalesOrderQuery::create();
		$q->select(SalesOrder::aliasproperty('custid'));
		$q->filterByOrdernumber($ordn);
		return $q->findOne();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Process Input Data and act on upon action
	 * @param  WireInput $input Input Data
	 * @return void
	 */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'update-header':
				$this->input_update_header($input);
				break;
			case 'update-item-quick':
				$this->input_update_item_quick($input);
				break;
			case 'update-item':
				$this->input_update_item($input);
				break;
			case 'delete-item':
				$this->input_delete_item($input);
				break;
			case 'unlock-order':
				$ordn = $values->text('ordn');
				$this->request_so_unlock($ordn);
				if ($this->exists_editable_header($ordn)) {
					$order = $this->get_editable_header($ordn);
					$order->delete();
				}
				break;
			case 'edit-order-new':
				$q = LogpermQuery::create();
				$logperm = $q->findOneBySessionid(session_id());
				$this->wire('session')->redirect($this->edit_salesorderURL($logperm->ordernbr), $http301 = false);
			case 'exit':
				break;
		}
	}

	/**
	 * Update Sales Order Header
	 * @param WireInput $input Input data
	 * @return void
	 */
	public function input_update_header(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$config = $this->config('so');
		$ordn = SalesOrder::get_paddedordernumber($values->text('ordn'));
		$editorder = $this->get_editable_header($ordn);
		$editorder->setShipname($values->text('shipto_name'));
		$editorder->setShipaddress($values->text('shipto_address'));
		$editorder->setShipaddress2($values->text('shipto_address2'));
		$editorder->setShipcity($values->text('shipto_city'));
		$editorder->setShipstate($values->text('shipto_state'));
		$editorder->setShipzip($values->text('shipto_zip'));
		$editorder->setContact($values->text('contact'));
		$editorder->setPhone($values->text('phone'));
		$editorder->setExtension($values->text('phone_ext'));
		$editorder->setFax($values->text('fax'));
		$editorder->setEmail($values->text('email'));
		$editorder->setCustpo($values->text('custpo'));
		$editorder->setReleasenbr($values->text('releasenumber'));
		$editorder->setShipviacd($values->text('shipvia'));
		if ($config->request_date_header() && strlen($values->text('date_requested'))) {
			$editorder->setRqstDate($values->text('date_requested'));
		}

		$editorder->setShipcom($values->text('shipcomplete'));
		$editorder->setTermcode($values->text('termscode'));
		$saved  = $editorder->save();
		$unlock = $values->exit ? true : false;
		$this->request_so_update_header($ordn, $unlock);
	}

	/**
	 * Update Sales Order Item
	 * @param WireInput $input Input data
	 * @return void
	 */
	public function input_update_item_quick(WireInput $input) {
		$config = $this->config();
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$ordn = SalesOrder::get_paddedordernumber($values->text('ordn'));
		$linenbr = $values->int('linenbr');
		$qty     = $values->float('qty', ['precision' => $config->decimal_places_qty]);
		$price   = $values->float('price', ['precision' => $config->decimal_places_price]);

		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$editline = OrdrdetQuery::create()->findOneBySessionidOrder(session_id(), $ordn, $linenbr);
		$editline->setQty($qty);
		$editline->setPrice($price);
		$editline->save();
		$this->request_so_update_detail($ordn, $linenbr);
	}

	/**
	 * Update Sales Order Item
	 * @param WireInput $input Input data
	 * @return void
	 */
	public function input_update_item(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$ordn = $values->ordn('ordn');
		$linenbr = $values->int('linenbr');

		$q = OrdrdetQuery::create();
		$q->filterbySessionid(session_id())->filterByOrderno($ordn)->filterByLinenbr($linenbr);

		if ($q->count() || $linenbr == 0) {
			$line = $q->findOneOrCreate();
			if ($line->isNew()) {
				$line->setSessionid(session_id());
				$line->setOrderno($ordn);
				$line->setLinenbr(0);
				$line->setItemid($values->text('itemID'));
			}
			$this->input_update_item_record($input, $line);
			$success = $line->save();
			$this->request_so_update_detail($ordn, $linenbr);
		}
	}

	private function input_update_item_record(WireInput $input, Ordrdet $line) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$config = $this->config();

		$line->setQty($values->float('qty', ['precision' => $config->decimal_places_qty]));
		$line->setPrice($values->float('price', ['precision' => $config->decimal_places_price]));
		if ($values->rshipdate) {
			$line->setRshipdate(date('m/d/Y', strtotime($values->text('rshipdate'))));
		}
		$line->setWhse($values->text('whseid'));
		$line->setSpcord($values->text('specialorder'));

		$line->setKititemflag($values->yn('kit'));

		if ($line->spcord != 'N' || $line->itemid == ItemMasterItem::ITEMID_NONSTOCK) {
			$line->setNsvendorid($values->text('nsvendorid'));
			$line->setNsvendoritemid($values->text('nsvendoritemid'));
			$line->setNsitemgroupid($values->text('nsitemgroupid'));
			$line->setPonbr($values->text('ponbr'));
			$line->setPoref($values->text('poref'));
		}
	}

	/**
	 * Delete Sales Order Item
	 * @param WireInput $input Input data
	 * @return void
	 */
	public function input_delete_item(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$ordn = SalesOrder::get_paddedordernumber($values->text('ordn'));
		$linenbr = $values->int('linenbr');

		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$editline = OrdrdetQuery::create()->findOneBySessionidOrder(session_id(), $ordn, $linenbr);
		$editline->setQty(0);
		$editline->save();
		$this->request_so_delete_detail($ordn, $linenbr);
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Returns Static Sales Order
	 * @return SalesOrder
	 */
	public function get_order_static($ordn) {
		return SalesOrderQuery::create()->filterByOrdernumber($ordn)->findOne();
	}

	/**
	 * Return US States
	 * @return States[]|ObjectCollection
	 */
	public function get_states() {
		return StatesQuery::create()->select(['name', 'abbreviation'])->find();
	}

	/**
	 * Return Shipvias
	 * @return Shipvia[]|ObjectCollection
	 */
	public function get_shipvias() {
		return ShipviaQuery::create()->find();
	}

	/**
	 * Return Warehouses
	 * @return Warehouse[]|ObjectCollection
	 */
	public function get_warehouses() {
		return WarehouseQuery::create()->find();
	}

	/**
	 * Return ArTermsCodes
	 * @return ArTermsCode[]|ObjectCollection
	 */
	public function get_termscodes() {
		return ArTermsCodeQuery::create()->find();
	}

	/**
	 * Return the number of decimal places for qty values
	 * @return int
	 */
	public function decimal_places_qty() {
		$config = $this->config('so');
		return $config->decimal_places_qty;
	}

	/**
	 * Return the number of decimal places for cost values
	 * @return int
	 */
	public function decimal_places_price() {
		$config = $this->config('so');
		return $config->decimal_places_price;
	}

	/**
	 * Return a Config Class
	 * @param  string $code Config Code
	 * @return Config(x)
	 */
	public function config($code = '') {
		$modules = $this->wire('modules');
		switch ($code) {
			case 'inv':
			case 'in':
			case 'min':
				return $modules->get('ConfigureIn')->config();
				break;
			default:
				return $modules->get('ConfigureSo')->config();
				break;
		}
	}

	/**
	 * Return Customer ID from Sales Order
	 * @return string Customer ID
	 */
	public function get_custid() {
		return SalesOrderQuery::create()->select(SalesOrder::get_aliasproperty('custid'))->findOneByOrdernumber($this->ordn);
	}

	/**
	 * Return temMasterItem
	 * @param  string $itemID Item ID
	 * @return ItemMasterItem
	 */
	public function itm_item($itemID) {
		return ItemMasterItemQuery::create()->findOneByItemid($itemID);
	}

	/**
	 * Gets the Shipto address in an array format to be easily converted to JSON
	 * NOTE: used for JS
	 * @return array
	 */
	public function get_shiptos_json_array() {
		$custID = $this->get_custid();
		$columns = array('id', 'name', 'address', 'address2', 'city', 'state', 'zip');

		$query = CustomerShiptoQuery::create();

		foreach ($columns as $column) {
			$query->addAsColumn($column, CustomerShipto::get_aliasproperty($column));
		}
		$query->select($columns);
		$query->filterByCustid($custID);
		$shiptos = $query->find();
		return $shiptos->toArray('id');
	}

	/**
	 * Return if User can edit Sales Order
	 * @param  User              $user  User
	 * @param  string $order Sales Order Number
	 * @return bool                     Can User Edit Sales Order?
	 */
	public function can_user_editorder(User $user, $ordn) {
		$canedit = false;
		$lookup_order = new MsoValidator();

		if ($lookup_order->invoice($ordn)) {
			return false;
			// VALIDATE if ORDER is not being locked
		} elseif (!$this->is_order_locked($ordn) || $this->is_user_editingorder($user, $ordn)) {
			$config_orders = $this->wire('modules')->get('ConfigsSalesOrders');

			if ($config_orders->allow_salesorderedit) {
				$canedit = $this->validate_user_order_permissions($user, $ordn);
			}
		}
		return $canedit;
	}
	/**
	 * Validates User Permissions based on Dplus Permission and SOCP permission
	 * @param  User   $user User
	 * @param  string $ordn Sales Order Number, used to get status
	 * @return bool
	 */
	public function validate_user_order_permissions(User $user, $ordn) {
		$permitted = false;

		if ($user->has_function(self::PERMISSION_DPLUS)) {
			$order = $this->get_order_static($ordn);
			$status = $order->status(); // new | picked | verified | invoiced
			$socp = $this->wire('modules')->get('SoControlsSocp'); // SALES ORDER Permissions
			$permissions = $socp->permissions_user_default($user->loginid);
			$permitted = $permissions->allow($status);
		}

		return $permitted;
	}

	/**
	 * Return true if Sales Order does not have someone locking it.
	 * @param  string $ordn Sales Order Number
	 * @return bool
	 */
	public function can_order_be_edited($ordn) {
		$order = $this->get_order_static($ordn);
		return $order->is_editable();
	}

	/**
	 * Return true if Sales Order does not have someone locking it.
	 * @param  string $ordn Sales Order Number
	 * @return bool
	 */
	public function is_order_locked($ordn) {
		$order = $this->get_order_static($ordn);
		return $order->is_locked();
	}

	/**
	 * Return if User is editing Sales Order
	 * @param  User   $user  User
	 * @param  string $order Sales Order
	 * @return bool              IS User is editing Sales Order?
	 */
	public function is_user_editingorder(User $user, $ordn) {
		return $this->get_so_edit_user($ordn) == $user->loginid;
	}

	/**
	 * Return Userid of Sales Order Current User
	 * @param  string $ordn Sales Order Number
	 * @return string
	 */
	public function get_so_edit_user($ordn) {
		$q = SalesOrderQuery::create();
		$q->select(SalesOrder::get_aliasproperty('heldby'));
		$q->filterByOrdernumber($ordn);
		return $q->findOne();
	}

	/**
	 * Return Sales Order Customer
	 * @param  string $ordn Sales Order Number
	 * @return Customer
	 */
	public function customer($ordn) {
		$q = SalesOrderQuery::create();
		$q->select(SalesOrder::get_aliasproperty('custid'));
		$q->filterByOrdernumber($ordn);
		$custID = $q->findOne();
		return CustomerQuery::create()->findOneByCustid($custID);
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	private function request_dplus(array $data) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusOnlineDatabase')->db_name;
		$data = array_merge(["DBNAME=$dplusdb"], $data);
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, $this->sessionID);
		$requestor->cgi_request($config->cgis['default'], $this->sessionID);
	}

	/**
	 * Send SO edit request
	 * @param  string $ordn Sales Order Number
	 * @return void
	 */
	public function request_so_edit($ordn) {
		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$data = array("ORDRDET=$ordn", "CUSTID=$custID", "LOCK");
		$this->request_dplus($data);
	}

	/**
	 * Send SO Header Update Request
	 * @param  string $ordn Sales Order Number
	 * @return void
	 */
	public function request_so_update_header($ordn, bool $unlock = false) {
		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$data = array('SALESHEAD', "ORDERNO=$ordn", "CUSTID=$custID");
		if ($unlock) {
			$data[] = "UNLOCK";
		}
		$this->request_dplus($data);
	}

	/**
	 * Send SO Detail Update Request
	 * @param  string $ordn Sales Order Number
	 * @return void
	 */
	public function request_so_update_detail($ordn, int $linenbr) {
		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$data = array('SALEDET', "ORDERNO=$ordn", "LINENO=$linenbr", "CUSTID=$custID");
		$this->request_dplus($data);
	}

	/**
	 * Send SO Detail Delete Request
	 * @param  string $ordn Sales Order Number
	 * @return void
	 */
	public function request_so_delete_detail($ordn, int $linenbr) {
		$custID = SalesOrderQuery::create()->get_custid($ordn);
		$data = array('SALEDET', "ORDERNO=$ordn", "LINENO=$linenbr", "QTY=0", "CUSTID=$custID");
		$this->request_dplus($data);
	}

	/**
	 * Send Unlock Sales Order
	 * @param  string $ordn Sales Order Number
	 * @return void
	 */
	public function request_so_unlock($ordn) {
		$data = array('UNLOCK', "ORDERNO=$ordn");
		$this->request_dplus($data);
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	public function edit_salesorderURL($ordn) {
		$url = new Url($this->wire('pages')->get('pw_template=sales-order-edit')->url);
		$url->query->set('ordn', $ordn);
		return $url->getUrl();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->ordn = '';
		$this->sessionID = session_id();

		$this->addHook('Page::so_editURL', function($event) {
			$ordn = $event->arguments(0);
			$event->return = $this->edit_salesorderURL($ordn);
		});

		$this->addHook('Page::so_viewURL', function($event) {
			$ordn = $event->arguments(0);
			$url = new Url($this->wire('pages')->get('pw_template=sales-order-view')->url);
			$url->query->set('ordn', $ordn);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page::unlock_orderURL', function($event) {
			$ordn = $event->arguments(0);
			$url = new Url($this->wire('pages')->get('pw_template=sales-order-edit')->url);
			$url->query->set('action', 'unlock-order');
			$url->query->set('ordn', $ordn);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page::remove_itemURL', function($event) {
			$p = $event->object;
			$ordn = $event->arguments(0);
			$linenbr = $event->arguments(1);
			$url = new Url($this->wire('pages')->get('pw_template=sales-order-edit')->url);
			$url->query->set('action', 'delete-item');
			$url->query->set('ordn', $ordn);
			$url->query->set('linenbr', $linenbr);
			$event->return = $url->getUrl();
		});

		foreach (self::HOOK_FUNCTIONS_LOOKUPS as $hook => $pwtemplate) {
			$this->addHook("Page(pw_template=sales-order-edit)::{$hook}URL", function($event) {
				$hook = rtrim($event->method, 'URL');
				$pwtemplate = self::HOOK_FUNCTIONS_LOOKUPS[$hook];
				$event->return = $this->wire('pages')->get("pw_template=$pwtemplate")->url;
			});
		}

		$this->addHook('User::can_editorder', function($event) {
			$user = $event->object;
			$ordn = $event->arguments(0);
			$event->return = $this->can_user_editorder($user, $ordn);
		});

		$this->addHook('User::is_editingorder', function($event) {
			$user = $event->object;
			$ordn = $event->arguments(0);
			$event->return = $this->is_user_editingorder($user, $ordn);
		});
	}

	public static function getModuleInfo() {
		return array(
			'title' => 'Sales Order Edit Module',
			'version' => 101,
			'summary' => 'Handles Sales Order Editing',
			'singular' => true,
			'autoload' => true,
		);
	}
}
