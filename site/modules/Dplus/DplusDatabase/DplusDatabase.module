<?php namespace ProcessWire;
// PHP
use PDOException;
// Propel ORM Library
use Propel\Runtime\Connection\ConnectionManagerSingle;
use Propel\Runtime\Propel;
use Propel\Runtime\ServiceContainer\ServiceContainerInterface;
use Propel\Runtime\Connection\ConnectionInterface;

/**
 * DplusDatabase
 *
 * Class for Creating Connection to the data(x) databases for Dplus
 * NOTE these are the DPLUS main files, not pertaining to a session
 */
class DplusDatabase extends WireData implements Module {
	const CONNECTION_NAME_PROPEL = 'default';
	const CONNECTION_NAME_PW     = 'dplus';

/* =============================================================
	DB Credentials
============================================================= */
	/**
	 * Returns Config to connect to Database
	 * @return Config
	 */
	public function dbconfig() {
		$config = $this->wire('config');

		if ($config->has('databases') === false) {
			$this->error("Credentials Not Found");
			return false;
		}

		if ($config->databases->has('dplus') === false) {
			$this->error("Credentials Not Found");
			return false;
		}
		return $config->databases->dplus;
	}

/* =============================================================
	DB Connect
============================================================= */
	/**
	 * Attempt Database Connection via PDO
	 * @return bool
	 */
	public function connect() {
		$pdo = $this->getWireDatabasePDO();

		try {
			$pdo->pdo();
		} catch (PDOException $e) {
			$this->logError($e->getMessage());
			return false;
		}
		return true;
	}

	/**
	 * Return Wire PDO object
	 * @return WireDatabasePDO
	 */
	public function getWireDatabasePDO() {
		$dbconfig = $this->dbconfig();
		$pdo = false;

		try {
			$pdo = WireDatabasePDO::getInstance($dbconfig);
		} catch (PDOException $e) {
			$this->logError($e->getMessage());
			return false;
		}
		return $pdo;
	}

	/**
	 * Creates a PDO object and attaches it to wire to connect
	 * @return void
	 */
	public function connectDatabase() {
		$session = $this->wire('session');

		$pdo = $this->getWireDatabasePDO();
		if ($pdo === false) {
			$session->remove($this::CONNECTION_NAME_PW);
			return false;
		}

		$this->wire($this::CONNECTION_NAME_PW, $pdo, true);
		$session->set($this::CONNECTION_NAME_PW, true);
		return true;
	}

	/**
	 * Return WirePDO
	 * @return WirePDO
	 */
	public function getWirePdo() {
		return $this->wire(static::CONNECTION_NAME_PW);
	}

	/**
	 * Writes Error Message to Database Error Log
	 * @param  string $message Error Message
	 * @return void
	 */
	public function logError($message) {
		$date = date("Y-m-d h:m:s");
		$class = get_class($this);
		$message = "[{$date}] [{$class}] $message";
		$this->wire('log')->save('db-errors', $message);
	}

/* =============================================================
	Propel Functions
============================================================= */
	/**
	 * Makes Propel Connection to database
	 * @return void
	 */
	public function connectPropel() {
		$manager = $this->propelConnectionManager();
		$serviceContainer = Propel::getServiceContainer();
		$serviceContainer->checkVersion('2.0.0-dev');
		$serviceContainer->setAdapterClass($this::CONNECTION_NAME_PROPEL, 'mysql');
		$serviceContainer->setConnectionManager($this::CONNECTION_NAME_PROPEL, $manager);
		$this->setPropelDefaultService($serviceContainer);
	}

	/**
	 * Sets the Default datasource
	 * @param ServiceContainerInterface $serviceContainer
	 */
	protected function setPropelDefaultService(ServiceContainerInterface $serviceContainer) {
		$serviceContainer->setDefaultDatasource($this::CONNECTION_NAME_PROPEL);
	}

	/**
	 * Return ConnectionManager
	 * @return ConnectionManagerSingle
	 */
	public function propelConnectionManager() {
		$manager = new ConnectionManagerSingle();
		$manager->setConfiguration($this->propelConfiguration());
		return $manager;
	}

	/**
	 * Returns Propel connection Configuration
	 * @return array
	 */
	public function propelConfiguration() {
		$db = $this->dbconfig();

		return [
			'classname' => 'Propel\\Runtime\\Connection\\ConnectionWrapper',
			'dsn' => "mysql:host=$db->dbHost;dbname=$db->dbName",
			'user' => $db->dbUser,
			'password' => $db->dbPass,
			'attributes' => [
				'ATTR_EMULATE_PREPARES' => false,
				'ATTR_TIMEOUT' => 30,
			],
			'model_paths' => [
				0 => 'src',
				1 => 'vendor',
			],
		];
	}

	/**
	 * Return Connection Interface for this Connection Name
	 * @return ConnectionInterface
	 */
	public function propelWriteConnection() {
		return Propel::getWriteConnection($this::CONNECTION_NAME_PROPEL);
	}

	/**
	 * Return Connection Interface for debug
	 * @return ConnectionInterface
	 */
	public function getDebugConnection() {
		$conn = $this->propelWriteConnection();
		$conn->useDebug(true);
		return $conn;
	}

	public function getLastExecutedQuery() {
		return $this->getDebugConnection()->getLastExecutedQuery();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->connectDatabase();
		$config = $this->dbconfig();
		if ($config) {
			$this->db_name = $config->dbName;
		}
	}

	public static function getModuleInfo() {
		$infoArray = array(
			'title' => __('Dplus Database Connection'),
			'version' => 115,
			'summary' => __("Creates Connection to Dplus Database"),
			'autoload' => true,
			'singular' => true,
			'author' => 'pauldro',
			'icon' => 'database'
		);
		return $infoArray;
	}
}
