<?php namespace ProcessWire;

use Purl\Url;
use DocumentFolderQuery, DocumentFolder;
use DocumentQuery, Document;
use SalesOrderQuery, SalesOrder;
use SalesOrderDetailQuery, SalesOrderDetail;
use SalesHistoryQuery, SalesHistory;
use SalesHistoryDetailQuery, SalesHistoryDetail;

/**
 * Document Management AR
 *
 * Handles AR Documents Retrieval for Dplus
 */
class DocumentManagementAr extends DocumentManagement implements Module {
	/**
	 * Return Documents objects filtered by the tag1, reference1 fields for an AR Invoice
	 * @param  string $invnbr               AR Invoice Number
	 * @return Documents[]|ObjectCollection
	 */
	public function get_documents_invoice($invnbr) {
		$invnbr = SalesOrder::get_paddedordernumber($invnbr);
		$docs_query = DocumentQuery::create();
		$docs_query->filterByTag(self::TAG_ARINVOICE);
		$docs_query->filterByReference1($invnbr);
		return $docs_query->find();
	}

	/**
	 * Return the number of Documents found filtered by the tag1, reference1 fields for an AR Invoice
	 * @param  string $invnbr AR Invoice Number
	 * @return int            Number of Sales Order Documents found
	 */
	public function count_documents_invoice($invnbr) {
		$invnbr = SalesOrder::get_paddedordernumber($invnbr);
		$docs_query = DocumentQuery::create();
		$docs_query->filterByTag(self::TAG_ARINVOICE);
		$docs_query->filterByReference1($invnbr);
		return $docs_query->count();
	}

	/**
	 * Return Documents objects filtered by the tag1, reference1 fields for an AR Payment
	 * @param  string $invnbr               AR Invoice Number
	 * @param  string $checknbr             Customer Check Number
	 * @return Documents[]|ObjectCollection
	 */
	public function get_documents_payment($invnbr, $checknbr = '') {
		$invnbr = SalesOrder::get_paddedordernumber($invnbr);
		$docs_query = DocumentQuery::create();
		$this->filter_conditions_payment($docs_query, $invnbr, $checknbr);
		return $docs_query->find();
	}

	/**
	 * Return the number of Documents found filtered by the tag1, reference1 fields for an AR Payment
	 * @param  string $invnbr    AR Invoice Number
	 * @param  string $checknbr  Customer Check Number
	 * @return int               Number of Sales Order Documents found
	 */
	public function count_documents_payment($invnbr, $checknbr = '') {
		$invnbr = SalesOrder::get_paddedordernumber($invnbr);
		$docs_query = DocumentQuery::create();
		$this->filter_conditions_payment($docs_query, $invnbr, $checknbr);
		return $docs_query->count();
	}

	/**
	 * Adds Filters to the Query for AR Payment
	 * @param  DocumentQuery $docs_query Query to apply filters to
	 * @param  string         $invnbr           AP Invoice Number
	 * @param  string         $checknbr         Check Number if provided
	 * @return string
	 */
	public function filter_conditions_payment(DocumentQuery $docs_query, $invnbr, $checknbr = '') {
		$this->columns = new WireData();
		$this->columns->tag = Document::get_aliasproperty('tag');
		$this->columns->reference1 = Document::get_aliasproperty('reference1');
		$this->columns->reference2 = Document::get_aliasproperty('reference2');
		$conditions = array();

		if ($checknbr) {
			// Create Invoice Filter
			$conditions[] = $this->conditions_payment_invoices($docs_query, $invnbr);

			// Create Vendor PO Filter
			if ($this->order_has_ponbrs($invnbr)) {
				$conditions[] = $this->conditions_payment_vendorpo($docs_query, $invnbr);
			}

			if ($this->invoice_has_custid($invnbr)) {
				// Create Customer Filter
				$conditions[] = $this->conditions_payment_customer($docs_query, $invnbr);
				// Create Customer Checks Filter
				$conditions[] = $this->conditions_payment_check($docs_query, $invnbr, $checknbr);
			}

			// Combine and Apply Filters
			$docs_query->where($conditions, 'or');
		} else {
			$docs_query->filterByTag(self::TAG_ARINVOICE);
			$docs_query->filterByReference1($invnbr);
		}
	}

	/**
	 * Add Invoice Condition to Document Query
	 * @param  DocumentQuery $docs_query
	 * @param  string         $invnbr     Invoice Number
	 * @return string
	 */
	protected function conditions_payment_invoices(DocumentQuery $docs_query, $invnbr) {
		$name = 'cond_invoices';
		$docs_query->condition('tag_invoices', "Document.{$this->columns->tag} = ?", self::TAG_ARINVOICE);
		$docs_query->condition('reference1_invoices', "Document.{$this->columns->reference1} = ?", $invnbr);
		$docs_query->combine(array('tag_invoices', 'reference1_invoices'), 'and', $name);
		return $name;
	}

	/**
	 * Add Vendor Condition to Document Query
	 * @param  DocumentQuery $docs_query
	 * @param  string         $invnbr     Invoice Number
	 * @return string
	 */
	protected function conditions_payment_vendorpo(DocumentQuery $docs_query, $invnbr) {
		$name = 'cond_vendorpo';
		$q = $this->get_details_po_query($invnbr);
		$ponbrs = $q->find()->toArray();
		$docs_query->condition('tag_vendorpo', "Document.{$this->columns->tag} = ?", self::TAG_VENDORPO);
		$docs_query->condition('reference1_vendorpo', "Document.{$this->columns->reference1} IN ?", $ponbrs);
		$docs_query->combine(array('tag_vendorpo', 'reference1_vendorpo'), 'and', $name);
		return $name;
	}

	/**
	 * Add Customer Condition to Document Query
	 * @param  DocumentQuery $docs_query
	 * @param  string         $invnbr     Invoice Number
	 * @return string
	 */
	protected function conditions_payment_customer(DocumentQuery $docs_query, $invnbr) {
		$name = 'cond_customer';
		$custID = $this->get_invoice_custid($invnbr);
		$docs_query->condition('tag_customer', "Document.{$this->columns->tag} = ?", self::TAG_CUSTOMER);
		$docs_query->condition('reference1_customer', "Document.{$this->columns->reference1} = ?", $custID);
		$docs_query->combine(array('tag_customer', 'reference1_customer'), 'and', $name);
		return $name;
	}

	/**
	 * Add Vendor Condition to Document Query
	 * @param  DocumentQuery $docs_query
	 * @param  string         $invnbr     Invoice Number
	 * @param  string         $checknbr   Check Number
	 * @return string
	 */
	protected function conditions_payment_check(DocumentQuery $docs_query, $invnbr, $checknbr) {
		$name = 'cond_checks';
		$custID = $this->get_invoice_custid($invnbr);
		$docs_query->condition('tag_customer_check', "Document.{$this->columns->tag} = ?", self::TAG_CUSTOMER);
		$docs_query->condition('reference1_customer_check', "Document.{$this->columns->reference1} = ?", $custID);
		$docs_query->condition('tag_checks', "Document.{$this->columns->tag} = ?", self::TAG_AR_CHECKS);
		$docs_query->condition('reference2_checks', "Document.{$this->columns->reference2} = ?", $checknbr);
		$docs_query->combine(array('tag_customer_check', 'reference1_customer_check', 'tag_checks', 'reference2_checks'), 'and', $name);
		return $name;
	}

	/**
	 * Returns if Sales Order has Purchase Orders related to it
	 * @param  string $ordn Sales Order #
	 * @return bool
	 */
	protected function order_has_ponbrs($ordn) {
		$q = $this->get_details_po_query($ordn);
		return boolval($q->count());
	}

	/**
	 * Return Detail Query
	 * @param  string $ordn Sales Order #
	 * @return SalesOrderDetailQuery|SalesHistoryDetailQuery
	 */
	protected function get_details_po_query($ordn) {
		$q = SalesHistoryDetailQuery::create();
		$q->select(SalesHistoryDetail::get_aliasproperty('vendorpo'));
		$q->filterByOrdernumber($ordn);
		return $q;
	}

	/**
	 * Return Cust ID for Invoice #
	 * @var string
	 */
	protected function get_invoice_custid($ordn) {
		$ordn = SalesOrder::get_paddedordernumber($ordn);
		$q = SalesHistoryQuery::create();
		$q->select(SalesHistory::get_aliasproperty('custid'));
		$q->filterByOrdernumber($ordn);
		return $q->findOne();
	}

	public function invoice_has_custid($ordn) {
		$ordn = SalesOrder::get_paddedordernumber($ordn);
		$q = SalesHistoryQuery::create();
		$q->select(SalesHistory::get_aliasproperty('custid'));
		$q->filterByOrdernumber($ordn);
		return boolval($q->findOne());
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Document Management AR',
			'version' => 101,
			'summary' => 'Module for getting AR Documents / Document Info out of Dplus',
			'singular' => true,
			'autoload' => true,
			'requires' => 'DocumentManagement'
		);
	}

	public function init() {

	}
}
