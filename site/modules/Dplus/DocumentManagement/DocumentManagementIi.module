<?php namespace ProcessWire;

use Purl\Url;

use DocumentFolderQuery, DocumentFolder;
use DocumentQuery, Documents;
use SalesOrderQuery, SalesOrder;
use SalesHistoryQuery, SalesHistory;
use PurchaseOrderQuery, PurchaseOrder;

/**
 * Document Management II
 *
 * Handles II Documents Hook Functions
 */
class DocumentManagementIi extends DocumentManagement implements Module {
	const PREFIX_REF_SO = 'so no.';
	const ACTIVITY_TYPES_SO = array(
		'sale',
		'ds sale',
		'k use',
		'rga'
	);

	const PREFIX_REF_PO = 'po no.';
	const ACTIVITY_TYPES_PO = array(
		'receipt',
		'ds rcpt',
		'fabrcpt',
		'fab use',
		'fabship'
	);

	const ACTIVITY_TYPES_WIP = array(
		'fin item',
		'prd fin',
		'fabrcpt',
		'prd use'
	);

	/* =============================================================
		Get Functions
	============================================================= */
		/**
		 * Return Documents
		 * filtered by the tag1, reference1 fields for an Item ID
		 * @param  string $itemID                      Item ID
		 * @return Documents[]|ObjectCollection
		 */
		public function get_documents_item($itemID) {
			$docs_query = DocumentQuery::create();
			$docs_query->filterByTag(self::TAG_ITEM);
			$docs_query->filterByReference1($itemID);
			return $docs_query->find();
		}

		/**
		 * Return the number of Documents
		 * filtered by the tag1, reference1 fields for an Item ID
		 * @param  string $itemID                      Item ID
		 * @return int
		 */
		public function count_documents_item($itemID) {
			$docs_query = DocumentQuery::create();
			$docs_query->filterByTag(self::TAG_ITEM);
			$docs_query->filterByReference1($itemID);
			return $docs_query->count();
		}

		/**
		 * Return Documents
		 * filtered by the tag1, reference1 fields for an Item Activity
		 * @param  string $type                  Activity Type
		 * @param  string $reference             Activity Reference (e.g. Po No. 1072)
		 * @return Documents[]|ObjectCollection
		 */
		public function get_documents_activity($type, $reference) {
			$docs_query = DocumentQuery::create();
			$this->filter_documents_activity($docs_query, $type, $reference);
			return $docs_query->find();
		}

		/**
		 * Return the number of Documents
		 * filtered by the tag1, reference1 fields for an Item Activity
		 * @param  string $type                  Activity Type (e.g. receipt)
		 * @param  string $reference             Activity Reference (e.g. Po No. 1072)
		 * @return string
		 */
		public function count_documents_activity($type, $reference) {
			$docs_query = DocumentQuery::create();
			$this->filter_documents_activity($docs_query, $type, $reference);
			return $docs_query->count();
		}

		/**
		 * Add Filter Conditions for Item Activity
		 * @param  DocumentQuery $docs_query Query to apply filters to
		 * @param  string         $type             Activity Type (e.g. receipt)
		 * @param  string         $reference        Activity Reference (e.g. Po No. 1072)
		 * @return void
		 */
		protected function filter_documents_activity(DocumentQuery $docs_query, $type, $reference) {
			$type = strtolower($type);

			if (in_array($type, self::ACTIVITY_TYPES_SO)) {
				$ref = $this->determine_reference($reference, self::PREFIX_REF_SO);
				$ref = SalesOrder::get_paddedordernumber($ref);
				$docm = $this->wire('modules')->get('DocumentManagementSo');
				$docm->filter_sales($docs_query, $ref);
			} elseif (in_array($type, self::ACTIVITY_TYPES_PO)) {
				$ref = $this->determine_reference($reference, self::PREFIX_REF_PO);
				$docs_query->filterByTag(self::TAG_VENDORPO);
				$ref = PurchaseOrder::get_paddedponumber($ref);
				$docs_query->filterByReference1($ref);
			} elseif (in_array($type, self::ACTIVITY_TYPES_WIP)) {
				$ref = $reference;
				$docs_query->filterByTag(self::TAG_WIP);
				$docs_query->filterByReference1($ref);
			} else {
				$docs_query->filterByTag($type);
			}
		}

		/**
		 * Returns Reference with Prefix Removed
		 * @param  string $reference Activity Reference (e.g. Po No. 1072)
		 * @param  string $strip     Prefix to Remove (e.g. Po No.)
		 * @return string
		 */
		protected function determine_reference($reference, $strip) {
			$ref = str_replace($strip, '', strtolower($reference));
			return trim($ref);
		}

		/**
		 * Returns Documents Query
		 * filtered for Item Images
		 * @param  string $itemID Item ID
		 * @return DocumentQuery
		 */
		public function get_filter_query_itemimage($itemID) {
			$wildcards = array();
			$like = array();

			foreach (self::EXTENSIONS_IMAGES as $ext) {
				$like[] = 'Document.Docifilename LIKE ?';
				$wildcards[] = "%.$ext";

			}
			$docs_query = DocumentQuery::create();
			$docs_query->filterByTag(self::TAG_ITEM);
			$docs_query->filterByReference1($itemID);
			$docs_query->where(implode(' OR ', $like), $wildcards);
			return $docs_query;
		}

		/**
		 * Return if there is an image associated with an Item
		 * @param  string $itemID  Item ID
		 * @return bool
		 */
		public function item_hasimages($itemID) {
			$docs_query = $this->get_filter_query_itemimage($itemID);
			return $docs_query->count();
		}

		/**
		 * Return Item Image Name
		 * @param  string $itemID  Item ID
		 * @return bool
		 */
		public function get_itemimage($itemID) {
			$docs_query = $this->get_filter_query_itemimage($itemID);
			$docs_query->select('Docifilename');
			return $docs_query->findOne();
		}

		/**
		 * Returns if Item Image Exists in the directory or if tehre's one listed
		 * @param  string $itemID  Item ID
		 * @return bool
		 */
		public function item_image_exists($itemID) {
			if ($this->item_hasimages($itemID)) {
				$img = $this->get_itemimage($itemID);
				$file = $this->wire('config')->directory_images.$img;
				return file_exists($file);
			} else {
				return false;
			}
		}

/* =============================================================
	URL Functions
============================================================= */
	/**
	 * Returns URL to the II documents Page
	 * @param  string $itemID Item ID
	 * @param  string $folder Document Management Folder Code
	 * @return string
	 */
	public function get_ii_docs_folderURL($itemID, $folder) {
		$url = new Url($this->wire('pages')->get('pw_template=ii-item')->url);
		$url->path->add('documents');
		$url->query->set('itemID', $itemID);
		$url->query->set('folder', $folder);
		return $url->getUrl();
	}

	/**
	 * Returns URL to the II documents Page
	 * @param  string $itemID   Item ID
	 * @param  string $folder   Document Management Folder Code
	 * @param  string $document Document Name
	 * @return string
	 */
	public function get_ii_documentURL($itemID, $folder, $document) {
		$url = new Url($this->wire('pages')->get('pw_template=ii-documents')->url);
		$url->query->set('itemID', $itemID);
		$url->query->set('folder', $folder);
		$url->query->set('document', $document);
		return $url->getUrl();
	}

	/**
	 * Returns URL to Item Image
	 * @param  string $itemID  Item ID
	 * @return string
	 */
	public function item_imageURL($itemID) {
		$img = $this->get_itemimage($itemID);
		$url = $this->wire('config')->url_images.$img;
		return $url;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Document Management II',
			'version' => 101,
			'summary' => 'Module for getting II Documents / Document Info out of Dplus',
			'singular' => true,
			'autoload' => true,
			'requires' => 'DocumentManagement'
		);
	}

	public function init() {
		$this->addHook('Page(pw_template=ii-purchase-history)::documentsUrlApInvoice', function($event) {
			$page      = $event->object;
			$itemID    = $event->arguments(0);
			$invnbr    = $event->arguments(1);
			$url = new Url($this->get_ii_docs_folderURL($itemID, self::TAG_APINVOICE));
			$url->query->set('invnbr', $invnbr);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=ii-purchase-orders)::documentsview_purchaseorder', function($event) {
			$page      = $event->object;
			$itemID    = $event->arguments(0);
			$ponbr     = $event->arguments(1);
			$url = new Url($this->get_ii_docs_folderURL($itemID, self::TAG_VENDORPO));
			$url->query->set('ponbr', $ponbr);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=ii-item)::item_image_exists', function($event) {
			$page     = $event->object;
			$itemID   = $event->arguments(0);
			$event->return = $this->item_image_exists($itemID);
		});

		$this->addHook('Page(pw_template=ii-item)::item_imageURL', function($event) {
			$page     = $event->object;
			$itemID   = $event->arguments(0);
			$event->return = $this->item_imageURL($itemID);
		});
	}
}
