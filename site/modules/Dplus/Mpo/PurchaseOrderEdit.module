<?php namespace ProcessWire;

use Propel\Runtime\ActiveQuery\Criteria;
use Purl\Url;

use PurchaseOrderQuery, PurchaseOrder;
use PurchaseOrderDetailReceivingQuery, PurchaseOrderDetailReceiving;
use ApInvoiceDetailQuery, ApInvoiceDetail;
use WarehouseQuery, Warehouse;

use EditPoHeadQuery, EditPoHead;
use EditPoDetailQuery, EditPoDetail;

include(__DIR__.'/MpoResponse.php');


/**
 * PurchaseOrderEdit
 *
 * Handles Editing of PO
 * @property string sessionID Session ID
 */
class PurchaseOrderEdit extends WireData implements Module {
	const PERMISSION_DPLUS = 'epo';

	public function get_query_header($ponbr) {
		$q = EditPoHeadQuery::create();
		$q->filterBySessionid($this->sessionID);
		$q->filterByPonbr($ponbr);
		return $q;
	}

	public function get_query_details($ponbr) {
		$q = EditPoDetailQuery::create();
		$q->filterBySessionid($this->sessionID);
		$q->filterByPonbr($ponbr);
		return $q;
	}

	public function exists_editable($ponbr) {
		return $this->exists_editable_header($ponbr) && $this->exists_editable_details($ponbr);
	}

	public function exists_editable_header($ponbr) {
		$q = $this->get_query_header($ponbr);
		return boolval($q->count());
	}

	public function exists_editable_details($ponbr) {
		$q = $this->get_query_details($ponbr);
		return boolval($q->count());
	}

	public function get_editable_header($ponbr) {
		$q = $this->get_query_header($ponbr);
		return $q->findOne();
	}

/* =============================================================
	CRUD Processing Functions
============================================================= */
	public function process_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		switch ($values->text('action')) {
			case 'add-item':
				$this->process_input_add_item($input);
				break;
		}
	}

	public function process_input_add_item($input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$q = $this->get_query_details($values->text('ponbr'));
		$count_before = $q->count();
		$this->request_add_item($values->text('ponbr'), $values->text('itemID'), $values->int('qty'));
		$count_after = $q->count();

		if ($count_after > $count_before) {
			$response = MpoResponse::response_success($values->text('ponbr'), $values->text('itemID') . ' was added to PO');
		} else {
			$response = MpoResponse::response_error($values->text('ponbr'), $values->text('itemID') . ' was not added to PO');
		}
		$this->wire('session')->response_epo = $response;
	}

/* =============================================================
	Dplus Request Functions
============================================================= */
	public function request_po_edit($ponbr) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusOnlineDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'EDITPURCHASEORDER', "PONBR=$ponbr");
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['default'], $this->sessionID);
	}

	public function request_add_item($ponbr, $itemID, $qty) {
		$config = $this->wire('config');
		$dplusdb = $this->wire('modules')->get('DplusOnlineDatabase')->db_name;
		$data = array("DBNAME=$dplusdb", 'ADDPURCHASEORDERLINE', "PONBR=$ponbr", "ITEMID=$itemID", "QTY=$qty");
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($config->cgis['default'], $this->sessionID);
	}

	/**
	 * Sends HTTP GET request to send Dplus Item Search Request
	 * @param  string $q Query or Item ID
	 * @return void
	 */
	public function request_itemsearch($q) {
		$requestor = $this->wire('modules')->get('DplusRequest');
		$url = new Url($this->wire('pages')->get('template=redir,redir_file=ii')->url);
		$url->query->set('action', 'item-search');
		$url->query->set('q', $q);
		$url->query->set('custID', '');
		$url->query->set('sessionID', $this->sessionID);
		$requestor->self_request($url->getUrl());
	}

/* =============================================================
	URL Functions
============================================================= */
	public function get_po_editURL($ponbr) {
		$url = new Url($this->wire('pages')->get('pw_template=purchase-order-edit')->url);
		$url->query->set('ponbr', $ponbr);
		return $url->getUrl();
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return if User has Purchase Order Editing Permission
	 * @param  User $user User
	 * @return bool
	 */
	public function user_has_permission(User $user) {
		return $user->has_function(self::PERMISSION_DPLUS);
	}

	/**
	 * Returns if Purchase Order can be Edited
	 * @param  string $ponbr Purchase Order Number
	 * @return bool
	 */
	public function is_po_editable($ponbr) {
		$q = PurchaseOrderQuery::create();
		$q->filterByPonbr($ponbr);
		$q->filterByStatus(PurchaseOrder::STATUS_CLOSED, Criteria::ALT_NOT_EQUAL);
		return boolval($q->count());
	}

	/**
	 * Returns if Purchase Order Exists
	 * @param  string $ponbr Purchase Order Number
	 * @return bool
	 */
	public function exists($ponbr) {
		$validator = $this->wire('modules')->get('ValidatePurchaseOrderNbr');
		return $validator->validate($ponbr);
	}

	public function get_details_array($ponbr) {
		$array = array();
		$items = $this->get_query_details($ponbr);

		foreach ($items as $item) {
			$array[$item->linenbr] = array(
				'linenbr' => $item->linenbr,
				'itemid'  => $item->itemid,
				'description'  => $item->description,
				'vendoritemid'  => $item->vendoritemid,
				'whseid'  => $item->whse,
				'specialorder'  => $item->specialorder,
				'uom'  => $item->uom,
				'qty' => array(
					'ordered' => $item->qty_ordered,
					'received' => $this->get_qty_received($ponbr, $item->linenbr),
					'invoiced' => $this->get_qty_invoiced($ponbr, $item->linenbr),
				),
				'cost' => $item->cost,
				'cost_total' => $item->cost_total
			);
		}
		return $array;
	}

	public function get_qty_received($ponbr, $linenbr) {
		$q = PurchaseOrderDetailReceivingQuery::create();
		$col = PurchaseOrderDetailReceiving::get_aliasproperty('qty_received');
		$q->withColumn("SUM($col)", 'qty');
		$q->select('qty');
		$q->filterByPonbr($ponbr);
		$q->filterByLinenbr($linenbr);
		return intval($q->findOne());
	}

	public function get_qty_invoiced($ponbr, $linenbr) {
		$q = ApInvoiceDetailQuery::create();
		$col = ApInvoiceDetail::get_aliasproperty('qty_received');
		$q->withColumn("SUM($col)", 'qty');
		$q->select('qty');
		$q->filterByPonbr($ponbr);
		$q->filterByLinenbr($linenbr);
		return intval($q->findOne());
	}

	public function get_warehouses() {
		return WarehouseQuery::create()->find();
	}
/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->sessionID = session_id();

		$this->addHook('Page(pw_template=purchase-order-edit)::ii_lookupURL', function($event) {
			$url = new Url($this->wire('pages')->get('pw_template=ii-item-lookup')->httpUrl);
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=purchase-order-edit)::itm_jsonURL', function($event) {
			$url = new Url($this->wire('pages')->get('pw_template=itm-json')->httpUrl);
			$url->query->set('json', 'true');
			$event->return = $url->getUrl();
		});

		$this->addHook('Page(pw_template=purchase-order-edit)::po_editURL', function($event) {
			$ponbr = $event->arguments(0);
			$event->return = $this->get_po_editURL($ponbr);
		});
	}

	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'PurchaseOrderEdit',
			'version' => 101,
			'summary' => 'Handles Purchase Order Editing',
			'singular' => true,
			'autoload' => true,
			'installs' => array()
		);
	}
}
