{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	qnotes                 module QnotesPredefined
#}
$(function() {
	var modal_notes = $('#notes-modal');
	var form_notes = modal_notes.find('form');
	var input_id   = form_notes.find('input[name=id]');
	var ids = {{ qnotes.get_notes_ids()|json_encode()|raw }};

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("id", function(value, element) {
		return this.optional(element) || validate_id();
	}, "Code already exists");

	var validator = form_notes.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			id: {
				required: true,
				id: true,
				maxlength: {{ qnotes.get_max_length_code() }},
			 },
			note: { required: true },
		},
		messages: { note: "Please Enter a Note",},
		submitHandler: function(form) {
			var action = $(this.submitButton).attr("value");
			var jform = $(form);
			var code = input_id.val();

			if (action == 'delete-notes') {
				swal2.fire({
					title: 'Confirm Deletion',
					text: 'Delete '+ code +'?',
					icon: 'question',
					showCancelButton: true,
					confirmButtonText: 'Yes',
					cancelButtonText: 'No',
				}).then((result) => {
					if (result.value) {
						var url = URI(jform.attr('action'));
						url.addQuery('action', 'delete-notes');
						url.addQuery('id', code);
						window.location.href = url.toString();
					} else if (result.dismiss === Swal.DismissReason.cancel) {

					}
				});
			} else {
				if (validate_id()) {
					form.submit();
				} else {
					var id = input_id.val();
					alert_id(function(submit) {});
				}
			}
		}
	});

	function validate_id() {
		var id_input = input_id.val();
		var id_edit  = input_id.attr('data-id');

		if (ids.contains(id_input)) {
			if (id_input != id_edit) {
				return false;
			}
		}
		return true;
	}

/* =============================================================
	Event Functions
============================================================= */
	{% if page.focus %}
		if ($('.code[data-id="{{ page.focus }}"]').length) {
			$('.code[data-id="{{ page.focus }}"]').addClass('highlight');
			$('html, body').animate({scrollTop: $('.code[data-id="{{ page.focus }}"]').offset().top,},700,'linear');
		}
	{% endif %}

	$('.hidden-note').on('hidden.bs.collapse', function () {
		var textarea = $(this);
		var id = textarea.data('id');
		$('span.summary[data-id="'+id+'"]').removeClass('collapse');
	});

	$('.hidden-note').on('show.bs.collapse', function () {
		var textarea = $(this);
		var id = textarea.data('id');
		$('span.summary[data-id="'+id+'"]').addClass('collapse');
	});

	modal_notes.on('change', 'input[name=id]', function(e) {
		if (validate_id()) {
			return true;
		} else {
			alert_id(function(value) {
				if (value === false) {
					modal_notes.modal('hide');
				}
			});
		}
	});

	modal_notes.on('show.bs.modal', function (event) {
		var modal = $(this);
		var button = $(event.relatedTarget);
		var id = button.data('id');
		populate_form(modal, id);
	});

	modal_notes.on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget) // Button that triggered the modal
		var modal = $(this);
		var id = button.data('id');

		$('#notes-form').clearValidation();

		if (id.toString().length) {
			modal.find('textarea[name=note]').focus();
		} else {
			modal.find('input[name=id]').focus();
		}
	});

	modal_notes.on('hidden.bs.modal', function (event) {
		var modal = $(this);
		var button = $(event.relatedTarget); // Button that triggered the modal
		var code = modal.find('input[name=id]').val().toString();

		$('.bg-success').removeClass('bg-success text-white');
		$('.highlight').removeClass('highlight');
		$('.code[data-id="'+code+'"]').addClass('highlight');
	});

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("id", function(value, element) {
		return this.optional(element) || validate_id();
	}, "ID already exists");

	modal_notes.on('hidden.bs.modal', function (event) {
		var modal = $(this);
		var button = $(event.relatedTarget); // Button that triggered the modal
		var code = modal.find('input[name=id]').val().toString();

		$('#code-table-alert').remove();
		$('.bg-success').removeClass('bg-success text-white');
		$('.highlight').removeClass('highlight');
		$('.code[data-id="'+code+'"]').addClass('highlight');
	});

/* =============================================================
	Form Functions
============================================================= */
	function populate_form(modal, id) {
		var note = '';

		if (id.toString().length) {
			var ele_notes = $('textarea[data-id="'+id+'"]');
			modal.find('.desc-action').text('Editing');
			note = ele_notes.text();
		} else {
			modal.find('.desc-action').text('Adding');
			note = '';
		}
		modal.find('span.id').text(id);
		modal.find('textarea[name=note]').val(note);
		modal.find('input[name=id]').attr('data-id', id).val(id);

		if (ids.contains(id)) {
			modal.find('input[name=id]').attr('readonly', 'true');
		} else {
			modal.find('input[name=id]').removeAttr('readonly');
		}
	}

	function alert_id(callback) {
		var id = input_id.val();

		swal2.fire({
			title: 'This note ('+ id +') exists!',
			text: 'Do you want to View / Edit that note?',
			icon: 'question',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				populate_form($('#notes-modal'), id);
				$('#notes-form').clearValidation();
				callback(true);
			} else if (result.dismiss === Swal.DismissReason.cancel) {
				callback(false);
			}
		});
	}
});
