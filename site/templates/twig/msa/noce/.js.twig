{% include 'msa/noce/js/classes.js.twig' %}

$(function() {
	var server   = NoceRequests.getInstance();
	var alert    = NoceAlerts.getInstance();
	var formNote = NoceForm.getInstance();

/* =============================================================
	Event Functions
============================================================= */
	$('#notes-modal').on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal  = $(this);
		var id     = button.data('code');
		var json   = button.data('json');

		formNote.setupFormAdd();

		if (json) {
			formNote.updateFormFromJson(json);

			server.lockCode(json.code, function(hasLocked) {
				if (hasLocked === false) {
					alert.recordIsLocked(function() {
						formNote.serializeForm(false);
						formNote.setupFormAdd();
						formNote.inputs.fields.code.focus();
					});
				}
			});
		}
	});

	$('#notes-modal').on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var id     = button.data('code');

		formNote.inputs.code.focus();

		if (id) {
			formNote.inputs.note.focus();
		}
	});

	$("#notes-modal").on('hide.bs.modal', function (e) {
		var modal = $(this);
		var form = modal.find('form');
		var originalValues = form.attr('data-serialized');

		if (originalValues) {
			if (originalValues != form.serialize()) {
				e.preventDefault();

				alert.unsavedChanges(function(confirmSave) {
					if (confirmSave) {
						form.find('button[value=update]').click();
						// form.submit();
						return true;
					}
					form.attr('data-serialized', '');
					modal.modal('hide');
				});
			}
		}
	});

	$('#notes-modal').on('hidden.bs.modal', function (event) {
		var modal = $(this);
		var form = modal.find('form');
		var button = $(event.relatedTarget); // Button that triggered the modal
		var id     = modal.find('input[name=code]').val().toString();

		var validator = form.validate();

		if (validator) {
			validator.resetForm();
		}

		$('.bg-success').removeClass('bg-success text-white');
		$('.highlight').removeClass('highlight');
		$('.note[data-code="'+id+'"]').addClass('highlight');
		$('.code-table-alert').remove();


		if (form.attr('data-code')) {
			if ($('.note[data-code="'+form.attr('data-code')+'"]').length == 0) {
				var url = URI();
				url.setQuery('action', 'focus');
				url.setQuery('code', form.attr('data-code'));
				window.location.href = url.toString();
			}

			server.unlockCode(form.attr('data-code'), function(isUnlocked) {});
		}
	});

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var id = input.val();

		server.getNote(id, function(json) {
			if (json) {
				alert.noteExists(id, function(editCode) {
					if (editCode) {
						formNote.updateFormFromJson(json);

						server.lockCode(id, function(hasLocked) {
							if (hasLocked === false) {
								alert.recordIsLocked(function() {
									formNote.serializeForm(false);
									formNote.setupFormAdd();
									formNote.inputs.fields.code.focus();
								});
							}
						});
						return true;
					}
					formNote.serializeForm(false);
					formNote.setupFormAdd();
					var validator = formNote.form.validate();

					if (validator) {
						validator.resetForm();
					}
				});
			}
		});
	});

	$("body").on("focusin", "#notes-form input:not(input[name=code]), textarea:not(input[name=code])", function(e) {
		if (formNote.inputs.code.val().trim() == '') {
			formNote.inputs.code.val(formNote.inputs.code.val().trim());
			formNote.inputs.code.focus();
		}
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = formNote.form.validate({
		onkeyup: false,
		errorClass: "is-invalid",
		validClass: "",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formNote.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('msa/validate/noce/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formNote.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
		},
		submitHandler: function(form) {
			form.submit();
		}
	});
})
