{% include 'msa/noce/js/classes.js.twig' %}

$(function() {
	var server   = NoceRequests.getInstance();
	var alert    = NoceAlerts.getInstance();
	var formNote = NoceForm.getInstance();

/* =============================================================
	Event Functions
============================================================= */
	$('#notes-modal').on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal  = $(this);
		var id     = button.data('code');

		formNote.setupFormAdd();

		if (id) {
			formNote.setupFormEdit(id);
		}
	});

	$('#notes-modal').on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal  = $(this);
		var id   = button.data('code');

		formNote.inputs.code.focus();

		if (id) {
			formNote.inputs.note.focus();
		}
	});

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var id = input.val();

		server.validateId(id, function(exists) {
			if (exists === true) {
				alert.notesExist(id, function(editNote) {
					if (editNote) {
						var modal = input.closest('.modal');

						if (editNote) {
							formNote.setupFormEdit(id);
						} else {
							modal.modal('hide');
						}
					}
				});
			}
		});
	});

	$("body").on("focusin", "#notes-form input:not(input[name=code]), textarea:not(input[name=code])", function(e) {
		if (formNote.inputs.code.val() == '') {
			formNote.inputs.code.focus();
		}
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = formNote.form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formNote.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('msa/validate/noce/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							console.log(formNote.inputs.form.attr('data-code'));
							return formNote.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
		},
		submitHandler: function(form) {
			var formNote = NoceForm.getInstance();
			var server   = NoceRequests.getInstance();
			var code     = formNote.inputs.code.val();

			// if (formNote.inputs.form.attr('data-code') == code) {
			// 	form.submit();
			// } else {
			// 	server.validateCode(code, function(exists) {
			// 		var alert = NoceAlerts.getInstance();
			// 		if (exists === false) {
			// 			form.submit();
			// 			return true;
			// 		}
			//
			// 		alert.codeExists(code, function(editCode) {
			// 			if (editCode) {
			// 				var modal = formNote.form.closest('.modal');
			//
			// 				if (editCode) {
			// 					server.getCode(code, function(response) {
			// 						if (response) {
			// 							modal.find('.modal-title').text('Edit Code ' + code);
			// 							formNote.updateInputsFromJson(response);
			// 						}
			// 					});
			// 				} else {
			// 					modal.modal('hide');
			// 				}
			// 			} else {
			// 				form.submit();
			// 			}
			// 		});
			// 	});
			// }
		}
	});
//
// /* =============================================================
// 	Form Functions
// ============================================================= */
// 	$("#notes-modal").on('hidden.bs.modal', function (e) {
// 		var form = formNote.inputs.form;
// 		form.validate().resetForm();
// 		form.find('.is-invalid').removeClass("is-invalid");
// 		form.find('.is-valid').removeClass("is-valid");
// 		form.find('.invalid-feedback').remove();
// 		form.find('.valid-feedback').remove();
//
// 		if (form.attr('data-code')) {
// 			$('#code-table-alert').remove();
// 			$('.bg-success').removeClass('bg-success text-white');
// 			$('.highlight').removeClass('highlight');
// 			$('.code[data-code="'+form.attr('data-code')+'"]').addClass('highlight');
// 			$('html, body').animate({scrollTop: $('.code[data-code="'+form.attr('data-code')+'"]').offset().top,},700,'linear');
// 		}
// 	});
})
