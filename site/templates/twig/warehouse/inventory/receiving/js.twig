{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	config                 ProcessWire\Config
	config.inventory       module ConfigsWarehouseInventory
#}
$(function() {
	var modal_itemedit = $('#item-edit-modal');
	var form_receive = $('#po-item-receive-form');
	var input_qty    = form_receive.find('input[name=qty]');
	var input_itemID    = form_receive.find('input[name=itemID]');
	var input_lotref = form_receive.find('input[name=lotserialref]');

	var form_itemsearch = $('#item-search-form');

	$("body").on("click", "#bins-modal .choose-bin", function(e) {
		e.preventDefault();
		var button = $(this);
		var binID = button.data('bin');
		var input_bin = $('input[name=binID]');
		input_bin.val(binID);
		button.closest('.modal').modal('hide');
	});

	modal_itemedit.on('show.bs.modal', function (event) {
		var modal = $(this);
		var button = $(event.relatedTarget); // Button that triggered the modal
		var linenbr = button.data('linenbr');
		modal.find('.modal-title .linenbr').text(linenbr);

		var url = URI('{{ page.jsonapiURL('wm/receiving/items/lotserial/') }}');
		url.addQuery('ponbr', modal.find('input[name=ponbr]').val());
		url.addQuery('linenbr', linenbr);
		url.addQuery('lotserial', button.data('lotserial'));
		url.addQuery('binID', button.data('binid'));

		console.log(url.toString());
		$.getJSON(url.toString(), function(data) {
			modal.find('input[name=linenbr]').val(data.linenbr);
			modal.find('input[name=itemID]').val(data.itemid);
			modal.find('input[name=qty]').val(data.qty.received);
			modal.find('input[name=uom]').val(data.uom.code);
			modal.find('input[name=binID]').val(data.binid);
			modal.find('input[name=productiondate]').val(data.lotdate);
			modal.find('input[name=lotserialref]').val(data.lotref);
			modal.find('input[name=lotserial]').val(data.lotserial);
		});
	});

	modal_itemedit.on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		modal.find('input[name=qty]').focus();
	});

/* =============================================================
	Valdation Methods
============================================================= */
	form_receive.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			itemID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('wm/receiving/validate/allow-itemid/') }}',
					type: "get",
					data: {
						jqv: 'true',
						ponbr: function() {
							return $('#po-item-receive-form').find('input[name=ponbr]').val();
						}
					}
				}
			},
			binID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/warehouse/bins/') }}',
					type: "get",
					data: {
						jqv: 'true',
						whseID: warehouse.id
					}
				}
			},
			lotserial: {
				required: false,
				remote: {
					url: '{{ page.jsonapiURL('wm/receiving/validate/require-lotserial/') }}',
					type: "get",
					data: {
						jqv: 'true',
						itemID: $('#itemID').val(),
						lotserial: $('#lotserial').val()
					}
				}
			},
			qty: {
				required: true,
				number: true,
				min: 0.01,
				remote: {
					url: '{{ page.jsonapiURL('wm/receiving/validate/require-lotserial/') }}',
					type: "get",
					data: {
						jqv: 'true',
						itemID: $('#itemID').val(),
						lotserial: $('#lotserial').val()
					}
				}
			},

		},
		submitHandler : function(form) {
			var valid_form = new SwalError(false, '', '', false);
			var valid_qty_exceeds  = validate_qty_exceeds();

			if (valid_itemid.error) {
				valid_form = valid_itemid;
			}

			if (valid_form.error) {
				swal2.fire({
					icon: 'error',
					title: valid_form.title,
					text: valid_form.msg,
					html: valid_form.html
				});
			} else if (valid_qty_exceeds.error) {
				swal2.fire({
					icon: 'warning',
					title: valid_qty_exceeds.title,
					text: valid_qty_exceeds.msg,
					html: valid_qty_exceeds.html
				});
			} else {
				form.submit();
			}
		}
	});

	form_itemsearch.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			scan: {
				required: true
			},
			binID: {
				required: function() {
					return $('#item-search-form').data('forcebin') == true;
				},
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/warehouse/bins/') }}',
					type: "get",
					data: {
						jqv: 'true',
						whseID: warehouse.id
					}
				}
			}
		},
		messages: {
			scan: "Please scan an itemID, Lot/Serial #, etc.",
		},
		submitHandler : function(form) {
			form.submit();
		}
	});

	function validate_qty_exceeds() {
		var error = false;
		var title = '';
		var msg = '';
		var html = false;
		var itemID = form_receive.find('input[name=itemID]').val();
		var item = items[itemID];
		var qty = 0;
		var company = "{{ config.company }}";

		if (company != 'ugm') {
			if (config_receive['receive_lotserial_as_single']) {
				qty = item.lotserialcount;
				qty += 1;
			} else {
				qty = parseFloat(item.qty_received);
				qty += parseFloat(input_qty.val());
			}

			if (qty > item.qty_ordered && input_qty.attr('data-validated') != 'true') {
				error = true;
				title = 'Warning';
				msg   = 'Quantity Received will exceed Quantity Ordered';

				input_qty.attr('data-validated', 'true');
			}
		}
		return new SwalError(error, title, msg, html);
	}
});
