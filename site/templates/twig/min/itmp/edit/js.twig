{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	itmp                   module Itmp
#}
$(function() {
	var modal_ajax = $('#ajax-modal');
	var modal_edit = $('#edit-modal');
	var form =       $('#itmp-form');
	var input_loginID = form.find('input[name=loginID]');

	var fields_permissions = {{ itmp.permissions_labels()|keys|json_encode()|raw }};
	var default_permissions = {{ itmp.default_permissions()|json_encode()|raw }};

	{% if itmp.has_response() %}
		{% set response = itmp.response() %}
		$('.user-row[data-loginid="{{ response.key }}"]').addClass('highlight');
		$('html, body').animate({scrollTop: $('.user-row[data-loginid="{{ response.key }}"]').offset().top,},700,'linear');
	{% endif %}

/* =============================================================
	Edit Module Functions
============================================================= */
	modal_edit.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);

		if (button.closest('.user-row').length) {
			var row = button.closest('.user-row');
			populate_form_userrow(row);
		} else {
			populate_form_default();
		}
		modal.resizeModal('lg');
	});

	function populate_form_default() {
		var title = "Add User Permissions";
		form.attr('data-crud', 'create');
		input_loginID.attr('data-loginid', '');
		input_loginID.removeAttr('readonly');
		input_loginID.closest('.input-group').find('button').removeAttr('disabled');

		fields_permissions.forEach((field, i) => {
			var val = default_permissions[field];
			form.find('select[name='+field+']').val(val);
		});
		modal_edit.find('.modal-title').text(title);
	}

	function populate_form_userrow(row) {
		var loginID = row.find('[data-loginid]').data('loginid');
		title = "Editing Permissions for " + loginID;
		input_loginID.val(loginID).attr('data-loginid', loginID);
		input_loginID.attr('readonly', 'true');
		input_loginID.closest('.input-group').find('button').attr('disabled', 'true');

		fields_permissions.forEach((field, i) => {
			var val = row.find('[data-'+field+']').data(field);
			form.attr('data-crud', 'update');
			form.find('select[name='+field+']').val(val);
		});
		modal_edit.find('.modal-title').text(title);
	}

/* =============================================================
	Validation Functions
============================================================= */
	var validator = form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			loginID: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('msa/validate/loginid/') }}',
					type: "get",
					data: {
						jqv: 'true',
						loginID: function() {
							return $('#loginID').val();
						},
					}
				}
			},
		},
		messages: {

		},
		submitHandler: function(form) {
			form.submit();
		}
	});

/* =============================================================
	Event Functions
============================================================= */
	// $("body").on('change', 'input.ajax-lookup', function(e) {
	// 	var input = $(this);
	// 	if (validator.element('#'+input.attr('id'))) {
	// 	// 	fetch_jsonapi_code(input.data('api'), input.data('validate'), $(this).val(), function(obj) {
	// 	// 		if (obj) {
	// 	// 			var ajaxfields_str = input.data('ajaxfields');
	// 	// 			var ajaxfields = ajaxfields_str.split(',');
	// 	// 			ajaxfields.forEach((field , i) => {
	// 	// 				$('.'+input.attr('name')+'-'+field).text(obj[field]);
	// 	// 			});
	// 	// 		}
	// 	// 	});
	// 	}
	// });

	$("body").on('change', 'input[name=loginID]', function(e) {
		var input = $(this);
		if (validator.element('#'+input.attr('id'))) {
			if (form.attr('data-crud') == 'create') {

				var url = new URI('{{ page.jsonApiUrl('inv/validate/itmp/exists') }}').addQuery('loginID', input.val());

				$.getJSON(url.toString(), function(exists) {
					if (exists === true) {
						swal_loginid_exists(input.val())
					}
				});
			}
		}
	});

	function swal_loginid_exists(loginID) {
		swal2.fire({
			title: loginID + " exists",
			text: 'Would you like to go edit this user?',
			icon: 'error',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				var row = $('.user-row[data-loginid='+loginID+']');
				populate_form_userrow(row)
			}
		});
	}
/* =============================================================
	AJAX Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		var url = button.data('lookupurl');
		modal.attr('data-input', button.data('input'));

		modal.find('.modal-title').text(button.attr('title'));
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '.user-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var userID = button.data('userid');
		var modal = button.closest('.modal');
		$(modal.attr('data-input')).val(userID).change();
		modal.modal('hide');
	});

	$("body").on('submit', '#ajax-modal form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '#ajax-modal .paginator-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	AJAX Request Functions
============================================================= */
	function fetch_jsonapi_code(api, fetching, code, callback) {
		var url = new URI('{{ page.jsonapiURL() }}');
		url.path(url.path() + api + "/" + fetching + "/");
		url.addQuery('code', code);
		$.getJSON(url.toString(), function( obj ) {
			callback(obj);
		});
	}

});
