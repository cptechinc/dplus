{% include 'min/inmain/addm/xref/form/js/classes.js.twig' %}

$(function() {
	var modalAjax = $('#ajax-modal');

	var alert    = AddmAlerts.getInstance();
	var server   = AddmRequests.getInstance();
	var formAddm = AddmForm.getInstance();

/* =============================================================
	Events
============================================================= */
	$("body").on("change", "input[name=itemID], input[name=addonID]", function(e) {
		var input = $(this);

		formAddm.updateItmDescription(input, function() {
			if (formAddm.inputs.itemid.val() != '' && formAddm.inputs.addonid.val() != '') {
				var validator = formAddm.inputs.form.validate();

				if (validator.element('#' + formAddm.inputs.addonid.attr('id'))) {
					server.validateXref(formAddm.inputs.itemid.val(), formAddm.inputs.addonid.val(), function(exists) {
						if (exists === true) {
							alert.xrefExists(formAddm.inputs.itemid.val(), formAddm.inputs.addonid.val(), function(goEdit) {
								AddmForm.getInstance().redirectExisting(goEdit);
							});
						}
					});
				}
			}
		});
	});

/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = formAddm.inputs.form.serialize();

	$("body").on("click", "a:not(#xref-form.form_button, #ajax-modal a)", function(e) {
		if (formAddm.inputs.form.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			alert.unsavedChanges(function(save) {
				if (save === true) {
					formAddm.inputs.form.find('button[type=submit]').click();
				} else {
					$.get('{{ page.url }}', function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	AJAX Lookup Modal Functions
============================================================= */

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("addonid", function(value, element) {
		return this.optional(element) || value != $('#itemID').val();
	}, "Add-On Item must be different from Item ID");

	formAddm.inputs.form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		rules: {
			itemID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/itemid/') }}',
					type: "get",
					data: {
						jqv: 'true',
						itemID: function() {
							return $('#itemID').val();
						}
					}
				}
			},
			addonID: {
				required: true,
				addonid: true,
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/itemid/') }}',
					type: "get",
					data: {
						jqv: 'true',
						itemID: function() {
							return $('#addonID').val();
						}
					}
				}
			},
		},
		messages: {},
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		submitHandler: function(form) {
			$('#loading-modal').modal('show');

			if ($(form).data('new') === false) {
				form.submit();
				return true;
			}

			var data = $(form).serializeArray().reduce(function(obj, item) {
				obj[item.name] = item.value;
				return obj;
			}, {});

			var server = AddmRequests.getInstance();
			server.validateXref(data['itemID'], data['addonID'], function(exists) {
				if (exists === true) {
					var alert = AddmAlerts.getInstance();
					alert.xrefExists(data['itemID'], data['addonID'], function(goEdit) {
						AddmForm.getInstance().redirectExisting(goEdit);
					});
				}
				if (exists === false) {
					form.submit();
				}
			});
		}
	});
});
