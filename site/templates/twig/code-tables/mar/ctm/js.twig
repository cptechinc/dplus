$(function () {
	$("#code-edit-form").validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: {{ typecode.get_max_length_code() }}
			},
			mail_list: 'required'
		},
		messages: {
			code: "Please review your code (Max Length: {{ typecode.get_max_length_code() }})",
		},
		submitHandler: function(form) {
			form.submit();
		}
	});

	$("body").on("click", "a:not(.form_button, .back-to-list)", function(e) {
		e.preventDefault();
		var a = $(this);

		swal({
			title: 'Code not saved!',
			text: "Please close this Customer Type before leaving.",
			type: 'warning',
			showCancelButton: true,
			showConfirmButton: false,
			cancelButtonClass: 'btn btn-info',
			buttonsStyling: false,
			cancelButtonText: 'OK'
		});
	});

	var form_notes = $('#notes-modal').find('form');

	$('#notes-modal').on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget) // Button that triggered the modal
		var notetype = button.data('type'); // Extract info from data-* attributes
		var description = button.data('description');
		var ele_notes = $('#notes-' + notetype);
		// If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
		// Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
		var modal = $(this);
		modal.find('.desc').text(description.capitalize());
		modal.find('textarea[name=note]').text(ele_notes.text()).attr('cols', ele_notes.attr('cols') - 1);
		modal.find('input[name=notes-type]').val(notetype);
	});

	$('#notes-modal').on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget) // Button that triggered the modal
		var modal = $(this);
		modal.find('textarea[name=note]').focus()
	});

	form_notes.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		ignore: ".validate-ignore",
		submitHandler: function(form) {
			var submittedform = $(form);
			var values = {};
			$.each(submittedform.serializeArray(), function() {
				values[this.name] = this.value;
			});

			if (values.action == 'delete-notes') {
				swal({
					title: 'Confirm Deletion',
					text: "Are you sure you want to delete?",
					type: 'warning',
					showCancelButton: true,
					confirmButtonClass: 'btn btn-success',
					cancelButtonClass: 'btn btn-danger',
					buttonsStyling: false,
					confirmButtonText: 'confirm'
				}).then(function (result) {
					if (result) {
						// form.submit() does not work in this instance because the value for
						// input[name=action] would be lost, so we use URL method to delete the values
						// using the values array from above
						var url = URI(submittedform.attr('action'));
						url.setQuery(values);
						window.location.href = url.toString();
					}
				}).catch(swal.noop);
			} else {
				form.submit();
			}
		}
	});

});
