{% include 'code-tables/mar/tm/js/classes.js.twig' %}

$(function() {
	var ajaxModal = $('#ajax-modal');
	var server   = TmRequests.getInstance();
	var alert    = CodeAlerts.getInstance();
	var formCode = CodeForm.getInstance();

/* =============================================================
	Event Functions
	hide, unsaved changes events is handled by scripts/code-tables/modal-events.js
============================================================= */
	{% include 'code-tables/js/events/show-shown.js.twig' %}
	{% include 'code-tables/js/events/input-code-change.js.twig' %}
	{% include 'code-tables/js/events/input-code-force-focus.js.twig' %}

	$("body").on("change", "input.taxcode", function(e) {
		var input = $(this);
		var code  = input.val();
		var index = parseInt(input.data('index'));
		var formgroup = input.closest('.form-group');
		var descriptionSpan = formgroup.find('.description');

		descriptionSpan.text('');

		if (code == '') {
			formCode.shiftTaxCodesUp(index);
			formCode.revalidateUpToIndex(index);
			return true;
		}

		var previousTaxCode = formCode.inputs.taxcode(index - 1);
		
		if (previousTaxCode.length && (previousTaxCode.val() == '' || previousTaxCode.val() == input.val())) {
			formCode.shiftTaxCodesUp(index - 1);
			return true;
		}

		if (input.hasClass('is-invalid')) {
			input.focus();
		}

		server.getArTaxCode(code, function(code) {
			if (code) {
				if (input.val() == code.code) {
					descriptionSpan.text(code.description);
				}
				return true;
			}
			input.focus();
		});
	});

	$("body").on("focus", "input.taxcode", function(e) {
		var input = $(this);
		var inputTabIndex = parseInt(input.attr('tabindex'));

		if (inputTabIndex == 1 || input.hasClass('is-invalid')) {
			return true;
		}

		var prevInput = $('input.taxcode[tabindex=' + (inputTabIndex - 1) +']');
		if (prevInput.hasClass('is-invalid')) {
			prevInput.focus();
		}
	});

/* =============================================================
	Lookup Modal Functions
	ajax modal events is handled by scripts/code-tables/ajax-modal.js
============================================================= */

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("unique", function(value, element, params) {
		var prefix = params;
		var selector = jQuery.validator.format("[name!='{0}'][unique='{1}']", element.name, prefix);
		var matches = new Array();

		$(selector).each(function(index, item) {
			if (value != '' && value == $(item).val()) {
				matches.push(item);
			}
		});

		return matches.length == 0;
	}, "Value Already Used");

	jQuery.validator.classRuleSettings.unique = {
		unique: true
	};

	var validator = formCode.form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/tm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			description: {
				maxlength: formCode.config.fields.description.maxlength,
			}
		},
		submitHandler: function(form) {
			var formCode = CodeForm.getInstance();
			var server   = TmRequests.getInstance();
			var code = formCode.inputs.code.val();

			if (formCode.inputs.form.attr('data-code') == code) {
				form.submit();
			} else {
				server.validateCode(code, function(exists) {
					var alert = CodeAlerts.getInstance();
					if (exists === false) {
						form.submit();
						return true;
					}

					alert.codeExists(code, function(editCode) {
						var modal = formCode.form.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code');
									formCode.updateInputsFromJson(response);
								} else {
									modal.modal('hide');
								}
							});
						} else {
							modal.modal('hide');
						}
					});
				});
			}
		}
	});

	$(".taxcode").each(function () {
		var input = $(this);

		input.rules('add', {
			required: false,
			normalizer: function(value) {
				if (value.trim() == '') {
					input.val('');
					return '';
				}
				return value;
			},
			remote: {
				url: '{{ page.jsonApiUrl('mar/validate/mtm/code/') }}',
				type: "get",
				data: {
					jqv: 'true',
					code: function() {
						return input.val();
					},
				}
			}
		});
	});

});
