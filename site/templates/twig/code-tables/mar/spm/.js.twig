{% include 'code-tables/mar/spm/js/classes.js.twig' %}

$(function() {
	var ajaxModal = $('#ajax-modal');
	var server	 = SpmRequests.getInstance();
	var alert	 = CodeAlerts.getInstance();
	var formCode = CodeForm.getInstance();
	var dateRegexes = DateRegexes.getInstance();

	let momentJsFormats = {
		'mmdd': 'MMDD',
		'mm/dd': 'MM/DD',
		'm/dd': 'M/DD',
		'mmddyyyy': 'MMDDYYYY',
		'mmddyy': 'MMDDYY',
		'mm/dd/yyyy': 'MM/DD/YYYY',
		'timestamp': 'X'
	}

/* =============================================================
	Event Functions
	hide, unsaved changes events is handled by scripts/code-tables/modal-events.js
============================================================= */
	{% include 'code-tables/js/events/show-shown.js.twig' %}
	{% include 'code-tables/js/events/input-code-change.js.twig' %}
	{% include 'code-tables/js/events/input-code-force-focus.js.twig' %}


	$("body").on("change", "input[name=vendorid]", function(e) {
		var input = $(this);
		var inputParent = input.closest('.input-parent');
		var descriptionField = inputParent.find('.vendor-name');
		descriptionField.text('');
		if (input.val() == '') {
			return true;
		}
		server.getVendor(input.val(), function(vendor) {
			if (vendor) {
				descriptionField.text(vendor.name);
			}
		});
	});


	$("body").on("change", "input[name=groupid]", function(e) {
		var input = $(this);
		var inputParent = input.closest('.input-parent');
		var descriptionField = inputParent.find('.group-description');
		descriptionField.text('');
		if (input.val() == '') {
			input.val('');
			input.closest('form').validate().element('#' + input.attr('id'));
			return true;
		}
		server.getSalesGroup(input.val(), function(group) {
			if (group) {
				descriptionField.text(group.description);
			}
		});
	});

	$("body").on("change", "input[name=userid]", function(e) {
		var input = $(this);
		var inputParent = input.closest('.input-parent');
		var descriptionField = inputParent.find('.user-name');
		descriptionField.text('');
		if (input.val() == '') {
			return true;
		}
		server.getUser(input.val(), function(user) {
			if (user) {
				descriptionField.text(user.name);
			}
		});
	});

	$("body").on("change", "input.to-date", function(e) {
		var input = $(this);
		var value = parseFloat(input.val());
		input.val(value.toFixed(formCode.config.fields[input.attr('name')].precision));
	});

	$("body").on("change", "#code-form input[name=lastsaledate]", function(e) {
		let input = $(this);

		let date = new DateFormatter(input.val(), 'mm/dd/yyyy');
		date.updateCentury();

		if (date.isValid()) {
			console.log(input.val());
			input.val(date.format('mm/dd/yyyy'));
		}
	});

/* =============================================================
	Lookup Modal Functions
	ajax modal events is handled by scripts/code-tables/ajax-modal.js
============================================================= */

	$("body").on('click', '#ajax-modal .vendor-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var modal  = button.closest('.modal');
		var input  = $(modal.attr('data-input'));
		input.val(button.data('vendorid'));
		if (input.data('jqv')) {
			input.change();
		}
		modal.modal('hide');
	});

/* =============================================================
	Validation Functions
============================================================= */
	function validateDate(value) {
		let date = moment(value, momentJsFormats['mm/dd/yyyy']);
		if (date.isValid() === false) {
			return false;
		}
		return date.year() > 1970 ? true : false;
	}

	jQuery.validator.addMethod("dateF", function(value, element) {
		var isFocused = element == document.activeElement;
		return this.optional(element) || (value.length < 8 && isFocused) || validateDate(value);
	}, "Invalid Date (MM/DD/YYYY)");

	var validator = formCode.form.validate({
		onkeyup: false,
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.addClass('invalid-feedback');
			if (element.closest('.input-parent').length == 0) {
				error.insertAfter(element);
				return true;
			}
			error.appendTo(element.closest('.input-parent'));
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/spm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			name: {
				maxlength: formCode.config.fields.name.maxlength,
			},
			vendorid: {
				required: false,
				normalizer: function(value) {
					if (value.trim() == '') {
						$('input[name=vendorid]').val('');
						return '';
					}
					return value;
				},
				remote: {
					url: '{{ page.jsonApiUrl('map/validate/vendorid/') }}',
					type: "get",
					data: {
						jqv: 'true',
						vendorID: function( ) {
							return $('input[name=vendorid]').val();
						}
					}
				}
			},
			groupid: {
				required: false,
				normalizer: function(value) {
					if (value.trim() == '') {
						$('input[name=groupid]').val('');
						return '';
					}
					return value;
				},
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/spgpm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function( ) {
							return $('input[name=groupid]').val();
						}
					}
				}
			},
			userid: {
				required: false,
				normalizer: function(value) {
					if (value.trim() == '') {
						$('input[name=userid]').val('');
						return '';
					}
					return value;
				},
				remote: {
					url: '{{ page.jsonApiUrl('msa/validate/logm/id/') }}',
					type: "get",
					data: {
						jqv: 'true',
						userID: function( ) {
							return $('input[name=userid]').val();
						}
					}
				}
			},
			lastsaledate: {
				required: false,
				dateF: true,
			}
		},
		submitHandler: function(form) {
			var formCode = CodeForm.getInstance();
			var server	 = SpmRequests.getInstance();
			var code = formCode.inputs.code.val();

			if (formCode.inputs.form.attr('data-code') == code) {
				form.submit();
			} else {
				server.validateCode(code, function(exists) {
					var alert = CodeAlerts.getInstance();
					if (exists === false) {
						form.submit();
						return true;
					}

					alert.codeExists(code, function(editCode) {
						var modal = formCode.form.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code');
									formCode.updateInputsFromJson(response);
								} else {
									modal.modal('hide');
								}
							});
						} else {
							modal.modal('hide');
						}
					});
				});
			}
		}
	});
})
