{% include 'code-tables/mar/mtm/js/classes.js.twig' %}

$(function() {
	var ajaxModal = $('#ajax-modal');
	var server   = MtmRequests.getInstance();
	var alert    = CodeAlerts.getInstance();
	var formCode = CodeForm.getInstance();

/* =============================================================
	Event Functions
	hide, unsaved changes events is handled by scripts/code-tables/modal-events.js
============================================================= */
	{% include 'code-tables/js/events/show-shown.js.twig' %}
	{% include 'code-tables/js/events/input-code-change.js.twig' %}
	{% include 'code-tables/js/events/input-code-force-focus.js.twig' %}

	$("body").on("change", "input[name=percent]", function(e) {
		var input = $(this);
		if (input.val() == '') {
			input.val(0)
		}
		var percent = parseFloat(input.val());
		input.val(percent.toFixed(formCode.config.fields.percent.precision));
	});

	$("body").on("change", "input.gl-account", function(e) {
		var input = $(this);
		var inputParent = input.closest('.form-group');
		var descriptionField = inputParent.find('.gl-acct-name');
		descriptionField.text('');
		
		server.getGlCode(input.val(), function(code) {
			console.log(code);
			if (code) {
				descriptionField.text(code.description);
			}
		});
	});

	$("body").on("change", "input[name=freight_tax_code]", function(e) {
		$('.freight-tax.description').text('');
		var input = $(this);
		if (input.val() == '') {
			return false;
		}
		server.getCode(input.val(), function(code) {
			if (code) {
				$('.freight-tax.description').text(code.description);
			}
		});
	});

/* =============================================================
	Lookup Modal Functions
	ajax modal events is handled by scripts/code-tables/ajax-modal.js
============================================================= */


/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("freight_taxcode_distinct", function(value, element, params) {
		return this.optional(element) || value != $('input[name=code]').val();
	}, jQuery.validator.format("Freight Tax Code cannot be the same as Master Code"));
  
	var validator = formCode.form.validate({
		onkeyup: false,
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/mtm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			gl_account: {
				required: false,
				normalizer: function(value) {
					if (value.trim() == '') {
						$('input[name=gl_account]').val('');
						return '';
					}
					return value;
				},
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/mhm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function( ) {
							return $('input[name=gl_account]').val();
						}
					}
				}
			},
			freight_tax_code: {
				required: false, 
				freight_taxcode_distinct: true,
				normalizer: function(value) {
					if (value.trim() == '') {
						$('input[name=freight_tax_code]').val('');
						return '';
					}
					return value;
				},
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/mtm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return $('input[name=freight_tax_code]').val();
						},
					}
				}
			},
			description: {
				maxlength: formCode.config.fields.description.maxlength,
			}
		},
		submitHandler: function(form) {
			var formCode = CodeForm.getInstance();
			var server   = MtmRequests.getInstance();
			var code = formCode.inputs.code.val();

			if (formCode.inputs.form.attr('data-code') == code) {
				form.submit();
			} else {
				server.validateCode(code, function(exists) {
					var alert = CodeAlerts.getInstance();
					if (exists === false) {
						form.submit();
						return true;
					}

					alert.codeExists(code, function(editCode) {
						var modal = formCode.form.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code');
									formCode.updateInputsFromJson(response);
								} else {
									modal.modal('hide');
								}
							});
						} else {
							modal.modal('hide');
						}
					});
				});
			}
		}
	});
})
