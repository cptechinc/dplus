{% include 'code-tables/mar/worm/js/classes.js.twig' %}

$(function() {
	var server   = WormRequests.getInstance();
	var alert    = CodeAlerts.getInstance();
	var formCode = CodeForm.getInstance();

/* =============================================================
	Event Functions
	hide, unsaved changes events is handled by scripts/code-tables/modal-events.js
============================================================= */
	{% include 'code-tables/js/events/show-shown.js.twig' %}

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var code = input.val();

		server.validateCode(code, function(exists) {
			if (exists === true) {
				alert.codeExists(code, function(editCode) {
					if (editCode) {
						var modal = input.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code ' + code);
									formCode.updateInputsFromJson(response);
								}
							});
						} else {
							modal.modal('hide');
						}
					}
				});
			}
		});
	});

	$("body").on("focusin", "#code-form input:not(input[name=code])", function(e) {
		if (formCode.inputs.code.val() == '') {
			formCode.inputs.code.focus();
		}
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = formCode.form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('mar/validate/worm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			description: {
				maxlength: formCode.config.fields.description.maxlength,
			}
		},
		submitHandler: function(form) {
			var formCode = CodeForm.getInstance();
			var server   = WormRequests.getInstance();
			var code = formCode.inputs.code.val();

			if (formCode.inputs.form.attr('data-code') == code) {
				form.submit();
			} else {
				server.validateCode(code, function(exists) {
					var alert = CodeAlerts.getInstance();
					if (exists === false) {
						form.submit();
						return true;
					}

					alert.codeExists(code, function(editCode) {
						var modal = formCode.form.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code ' + code);
									formCode.updateInputsFromJson(response);
								} else {
									modal.modal('hide');
								}
							});
						} else {
							modal.modal('hide');
						}
					});
				});
			}
		}
	});
})
