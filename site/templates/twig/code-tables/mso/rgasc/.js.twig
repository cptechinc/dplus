{% include 'code-tables/mso/rgasc/js/classes.js.twig' %}

$(function() {
	var ajaxModal = $('#ajax-modal');
	var server   = RgascRequests.getInstance();
	var alert    = RgascAlerts.getInstance();
	var formCode = RgascForm.getInstance();

/* =============================================================
	Event Functions
	hide, unsaved changes events is handled by scripts/code-tables/modal-events.js
============================================================= */
	{% include 'code-tables/js/events/show-shown.js.twig' %}
	{% include 'code-tables/js/events/input-code-change.js.twig' %}
	{% include 'code-tables/js/events/input-code-force-focus.js.twig' %}

	$("body").on("change", "#code-form input[name=whseid]", function(e) {
		let input = $(this);
		input.val(input.val().trim());
		let descriptionField = input.closest('.input-parent').find('.name');

		descriptionField.text('');

		if (input.val() != '') {
			server.getWarehouse(input.val(), function(warehouse) {
				if (warehouse) {
					descriptionField.text(warehouse.name);
					return false;
				}
				input.focus();
			});
		}
	});

	$("body").on("focusout", "#code-form input", function(e) {
		let input = $(this);

		if (input.hasClass('is-invalid')) {
			if (input.closest('form').validate().element('#' + input.attr('id')) === false) {
				input.focus();
			}
		}
	});

	$("body").on("focusin", "#code-form input", function(e) {
		let input = $(this);

		if (input.hasClass('is-invalid')) {
			return true;
		}

		if (input.attr('tabindex') <= 2) {
			return true;
		}

		let tabindex = input.attr('tabindex');

		let prevInput = input.closest('form').find('input[tabindex=' + (tabindex - 1) + ']');
 
		let validator = input.closest('form').validate();

		if (validator.element('#' + prevInput.attr('id')) === false) {
			prevInput.focus();
		}
	});

/* =============================================================
	Lookup Modal Functions
	ajax modal events is handled by scripts/code-tables/ajax-modal.js
============================================================= */
	$("body").on('click', '.whse-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var modal  = button.closest('.modal');
		var input  = $(modal.attr('data-input'));
		input.val(button.data('whseid'));
		if (input.data('jqv')) {
			input.change();
		}
		modal.modal('hide');
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = formCode.form.validate({
		onkeyup: false,
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('mso/validate/rgasc/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			whseid: {
				required: false,
				remote: {
					url: '{{ page.jsonApiUrl('inv/validate/warehouse/') }}',
					type: "get",
					data: {
						jqv: 'true',
						id: function() {
							return $('#whseid').val();
						}
					}
				}
			},
			description: {
				maxlength: formCode.config.fields.description.maxlength,
			}
		},
		submitHandler: function(form) {
			var formCode = RgascForm.getInstance();
			var server   = RgascRequests.getInstance();
			var code = formCode.inputs.code.val();

			if (formCode.inputs.form.attr('data-code') == code) {
				form.submit();
			} else {
				server.validateCode(code, function(exists) {
					var alert = CodeAlerts.getInstance();
					if (exists === false) {
						form.submit();
						return true;
					}

					alert.codeExists(code, function(editCode) {
						var modal = formCode.form.closest('.modal');

						if (editCode) {
							server.getCode(code, function(response) {
								if (response) {
									modal.find('.modal-title').text('Edit Code');
									formCode.updateInputsFromJson(response);
								} else {
									modal.modal('hide');
								}
							});
						} else {
							modal.modal('hide');
						}
					});
				});
			}
		}
	});
})
