{% include 'code-tables/min/igm/edit/js/classes.js.twig' %}

$(function() {
	var ajaxModal = $('#ajax-modal');
	var server   = IgmRequests.getInstance();
	var alert    = CodeAlerts.getInstance();
	var formCode = IgmForm.getInstance();

/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = formCode.form.serialize();

	$("body").on("click", "a:not(#code-edit-form .form_button, #ajax-modal a, .swal2-modal a)", function(e) {
		if (formCode.form.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			alert.unsavedChanges(function(save) {
				if (save) {
					formCode.form.find('button[type=submit]').click();
				} else {
					var uri = URI();
					uri.setQuery('code', '');

					$.get(uri.toString(), function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	Event Functions
============================================================= */
	$("body").on("change", "input.gl-account", function(e) {
		var input = $(this);
		var code = input.val();
		var descriptionSpan = $('.gl-desc[data-acct="'+ input.attr('name') +'"]');

		descriptionSpan.text('');

		server.getGlCode(code, function(glAcct) {
			if (glAcct) {
				descriptionSpan.text(glAcct.description);
			}
		});
	});

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var code = input.val();

		server.validateCode(code, function(exists) {
			if (exists === true) {
				alert.codeExists(code, function(editCode) {
					if (editCode) {
						var uri = URI();
						uri.setQuery('code', code);
						window.location.href = uri.toString();
					} else {
						location.reload();
					}
				});
			}
		});
	});

	$("body").on("focusin", "#code-form input:not(input[name=code])", function(e) {
		if (formCode.inputs.code.val() == '') {
			formCode.inputs.code.focus();
		}
	});

	$("body").on("change", "select[name=surcharge]", function(e) {
		var input = $(this);

		if (input.val() === 'Y') {
			formCode.inputs.surchargetype.removeAttr('readonly');
			formCode.inputs.surchargetype.change();
		} else {
			formCode.inputs.surchargetype.attr('readonly', 'true');
			formCode.inputs.surchargepercent.attr('readonly', 'true');
			formCode.inputs.surchargepercent.val('0.000');
			formCode.inputs.surchargeamount.attr('readonly', 'true');
			formCode.inputs.surchargeamount.val('0.00');
		}
	});

	$("body").on("change", "select[name=surchargetype]", function(e) {
		var input = $(this);

		if (input.val() === 'D') {
			formCode.inputs.surchargeamount.removeAttr('readonly');
			formCode.inputs.surchargepercent.attr('readonly', 'true');
			formCode.inputs.surchargepercent.val('0.000');
		} else {
			formCode.inputs.surchargepercent.removeAttr('readonly');
			formCode.inputs.surchargeamount.attr('readonly', 'true');
			formCode.inputs.surchargeamount.val('0.00');
		}
	});

	$("body").on("change", "input[name=productline]", function(e) {
		var input = $(this);
		var code = input.val();

		var span = $('.productline-desc');
		span.text('');

		server.getProductLineCode(code, function(productline) {
			if (productline) {
				span.text(productline.description);
			}
		});
	});

	$("body").on("change", "input[name=surchargeamount]", function(e) {
		var input = $(this);
		var amt = floatParse(input.val());
		input.val(amt.toFixed(formCode.config.fields.surchargeamount.precision));
	});

	$("body").on("change", "input[name=surchargepercent]", function(e) {
		var input = $(this);
		var amt = floatParse(input.val());
		input.val(amt.toFixed(formCode.config.fields.surchargepercent.precision));
	});

/* =============================================================
	Lookup Modal Functions
	ajax modal events is handled by scripts/code-tables/ajax-modal.js
============================================================= */

/* =============================================================
	Validation Functions
============================================================= */
	var validator = formCode.form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: formCode.config.fields.code.maxlength,
				remote: {
					url: '{{ page.jsonApiUrl('min/validate/igm/code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') == $('#code').val() ? 'false' : 'true';
						},
					}
				}
			},
			description: {
				maxlength: formCode.config.fields.description.maxlength,
			},
			sales: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/gl-code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return formCode.form.find('input[name=sales]').val();
						},
					}
				}
			},
			credit: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/gl-code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return formCode.form.find('input[name=credit]').val();
						},
					}
				}
			},
			cogs: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/gl-code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return formCode.form.find('input[name=cogs]').val();
						},
					}
				}
			},
			inventory: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/gl-code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return formCode.form.find('input[name=inventory]').val();
						},
					}
				}
			},
			dropship: {
				required: true,
				remote: {
					url: '{{ page.jsonApiUrl('mgl/validate/gl-code/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return formCode.form.find('input[name=dropship]').val();
						},
					}
				}
			},
			surchargeamount: {
				required: function() {
					return formCode.inputs.surcharge.val() == 'Y' && formCode.inputs.surchargetype.val() == 'D';
				}
			},
			surchargepercent: {
				required: function() {
					return formCode.inputs.surcharge.val() == 'Y' && formCode.inputs.surchargetype.val() == 'P';
				}
			}
		},
		submitHandler: function(form) {
			form.submit();
		}
	});

/* =============================================================
	Form Functions
============================================================= */

})
