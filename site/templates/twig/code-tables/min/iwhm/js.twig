{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	warehouse              Warehouse
	m_iwhm                 module CodeTablesIwhm
	url_json_ci            URL to Page(pw_template=ci-json)
#}
$(function() {

	var form = $('#code-edit-form');
	var input_whseID   = form.find('input[name=whseID]');
	var input_name     = form.find('input[name=name]');
	var select_pick	   = form.find('input[name=pickdetail]');
	var select_consign = form.find('input[name=consignment]');
	var input_customer = form.find('input[name=custID]');
	var cash_name 	   = form.find('input[name=cash_name]');
	var select_wh_profit = form.find('select[name=whse_profit]');
	var select_wh_supply = form.find('select[name=whse_supply]');
	var select_wh_asset  = form.find('select[name=whse_asset]');
	var cash_name = form.find('input[name=cash_name]');

	var modal_ajax = $('#ajax-modal');

	var whseIDs = {{ m_iwhm.get_codes_ids()|json_encode()|raw }};

	if ($('#whseID').val() == '') {
		$('#pickdetail').val('N');
		$('#C').val('N');
	}

/* =============================================================
	Event Functions
============================================================= */
	$("body").on("change", "input[name=custID]", function(e) {
		cash_name.val('');
		var custID = $(this).val();
		custID = custID.toUpperCase();
		var apiurl = new URI("{{ url_json_ci }}");
		apiurl.addQuery('action', 'get-customer-name');
		apiurl.addQuery('custID', custID);

		$.getJSON(apiurl.toString(), function( name ) {
			if (name.length) {
				cash_name.val(name);
			} else {
				cash_name.val('');
			}
		});
	});

	$("body").on("change", "input[name=whseID]", function(e) {
		var input = $(this);
		var whseID = input.val();

		if (whseID == '') {
			$('#code-edit-form .customer_button').prop('disabled', true);
			$('.notes_button').prop('disabled', true);
		} else {
			if (validate_whseID(form)) {

			} else {
				swal2.fire({
					title: 'Warehouse ' + whseID + ' Exists',
					text: 'Edit that warehouse?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: 'Yes',
					cancelButtonText: 'No',
				}).then((result) => {
					if (result.value) {
						var url = URI('{{ page.url }}');
						url.addQuery('code', whseID);
						window.location.href = url.toString();
					} else if (result.dismiss === Swal.DismissReason.cancel) {
						window.location.href = '{{ page.url }}';
					}
				});
			}
		}
	});

	{% if warehouse.isNew() %}
		$("body").on('change', 'input[name=whseID], input[name=name]', function(e) {

			var option_whse_profit = $('#whse_profit_self');
			var option_whse_supply = $('#whse_supply_self');
			var option_whse_asset  = $('#whse_asset_self');

			option_whse_profit.attr('value', input_whseID.val());
			option_whse_profit.text(input_whseID.val() + ' - ' + input_name.val());

			option_whse_supply.attr('value', input_whseID.val());
			option_whse_supply.text(input_whseID.val() + ' - ' + input_name.val());

			option_whse_asset.attr('value', input_whseID.val());
			option_whse_asset.text(input_whseID.val() + ' - ' + input_name.val());
		});
	{% endif %}

/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = form.serialize();

	$("body").on("click", "a:not(#code-edit-form .form_button, #ajax-modal a, .swal2-modal a)", function(e) {
		if (form.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			swal2.fire({
				title: 'Changes have occurred!',
				text: 'Do you want to save?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				if (result.value) {
					form.find('button[type=submit]').click();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					// Send HTTP GET Request to remove Record Lock
					$.get('{{ page.url }}', function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		var url = '{{ page.customerlookupURL }}';
		modal.find('.modal-title').text('Search for a Customer');
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(url, function() {

		});
	});

	$("body").on('click', '.ci-customer', function(e) {
		e.preventDefault();
		var custid = $(this).data('custid');
		var cust_name = $(this).data('cust_name');
		input_customer.val(custid);
		cash_name.val(cust_name);
		modal_ajax.modal('hide');
	});

	$("body").on('submit', '#lookup form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {

		});
	});

	$("body").on('click', '.page-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	Notes Functions
============================================================= */
	var modal_notes = $('#notes-modal');
	var form_notes = modal_notes.find('form');

	modal_notes.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget) // Button that triggered the modal
		var notetype = button.data('type'); // Extract info from data-* attributes
		var description = button.data('description');
		var ele_notes = $('#notes-' + notetype);
		// If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
		// Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
		var modal = $(this);
		modal.find('.desc').text(description.capitalize());
		modal.find('textarea[name=note]').text(ele_notes.text()).attr('cols', ele_notes.attr('cols') - 1);
		modal.find('input[name=notes-type]').val(notetype);
	});

	modal_notes.on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget) // Button that triggered the modal
		var modal = $(this);
		modal.find('textarea[name=note]').focus();
	});

	form_notes.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		ignore: ".validate-ignore",
		submitHandler: function(form) {
			var submittedform = $(form);
			var values = {};
			$.each(submittedform.serializeArray(), function() {
				values[this.name] = this.value;
			});

			if (values.action == 'delete-notes') {
				swal2.fire({
					title: 'Confirm Deletion',
					text: "Are you sure you want to delete?",
					icon: 'warning',
					showCancelButton: true,
					confirmButtonClass: 'btn btn-success',
					cancelButtonClass: 'btn btn-danger',
					confirmButtonText: 'Yes'
				}).then((result) => {
					if (result.value) {
						// form.submit() does not work in this instance because the value for
						// input[name=action] would be lost, so we use URL method to delete the values
						// using the values array from above
						var url = URI(submittedform.attr('action'));
						url.setQuery(values);
						window.location.href = url.toString();
					}
				});
			} else {
				var url = URI(submittedform.attr('action'));
				url.setQuery(values);
				window.location.href = url.toString();
				// form.submit();
			}
		}
	});
/* =============================================================
	Validation Functions
============================================================= */
	var validator = form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		ignore: ".validate-ignore",
		rules: {
			whseID: {
				required: true,
				maxlength: {{ warehouse.get_max_code_length() }},
			},
			select_pick: 'required',
			select_consign: 'required',
			custID: {
				remote: {
					url: '{{ url_json_ci }}',
					type: "get",
					data: {
						action: 'validate-custid'
					}
				}
			},
		},
		messages: {
			whseID: "Please review the Warehouse Code value, (Max Characters {{ warehouse.get_max_code_length() }})",
			select_pick: "Please choose an option",
			select_consign: "Please choose an option",
		},
		submitHandler: function(form) {
			var jform = $(form);
			var whseID = input_whseID.val();

			if (validate_whseID(form)) {
				form.submit();
			} else {
				var url = URI('{{ page.url }}');
				url.addQuery('code', whseID);
				var bootstrap = new JsContento();
				var content = bootstrap.open('div', 'class=swal2-content|id=swal2-content');
				content += '<a class="btn btn-secondary mb-2" href="'+url.toString()+'">View Warehouse</a>';
				content += '<br>';
				content += "Do you want to overwrite?";
				content += bootstrap.close('div');

				swal2.fire({
					title: 'Warehouse ' +input_whseID.val() + ' Exists' ,
					text: 'Do you want to overwrite?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
					cancelButtonText: 'No',
					html: content,
				}).then((result) => {
					if (result.value) {
						form.submit();
					}
				});
			}
		}
	});

	$("body").on("focusin", "#code-edit-form input:not(#whseID),#code-edit-form select", function(e) {
		if (input_whseID.val() == '') {
			validator.element( "#whseID" );
			input_whseID.focus();
		} else {
			$('#code-edit-form .customer_button').prop('disabled', false);
			$('.notes_button').prop('disabled', false);
		}
	});

	/**
	 * Return if Warehouse ID can be used to save, based upon if
	 * it exists, and if is the one being edited.
	 * @param  {[type]} form [description]
	 * @return {[type]}      [description]
	 */
	function validate_whseID(form) {
		var jform = $(form);

		if (whseIDs.contains(input_whseID.val())) {
			console.log('Warehouse Exists');

			if (input_whseID.val() != jform.data('whseid')) {
				return false;
			}
		}
		return true;
	}

});
