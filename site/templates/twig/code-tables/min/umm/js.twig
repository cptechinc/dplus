$(function() {
	var codeIDs = {{ m_in.get_codes_ids()|json_encode()|raw }};
	var input_codeID = $('#code');
	var form = $("#code-edit-form");

/* =============================================================
	Event Functions
============================================================= */
	$('#edit-code-modal').on('shown.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		populate_edit_from_button(button, modal);
	});

	$("body").on("click", ".swal-edit-code", function(e) {
		var button = $(this);
		var code = button.data('code');
		var edit_button = $('button[data-code='+code+']');
		var modal = $('#edit-code-modal');
		populate_edit_from_button(edit_button, modal);
		swal2.close();
	});

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var codeID = input.val();

		if (validate_codeID(form) === false) {
			swal2.fire({
				title: 'Unit of Measure Code ' + codeID + ' Exists',
				text: 'Edit that code?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: 'Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				var modal = $('#edit-code-modal');

				if (result.value) {
					var button = $('button[data-code="'+codeID+'"]');
					populate_edit_from_button(button, modal);
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					modal.modal('hide');
				}
			});
		}
	});

/* =============================================================
	Unsaved Fields Alert
	NOTE: for Code tables edited in modals, the serialzed form values must
	be put into a hidden input field for verification
============================================================= */
	$("body").on("click", "#code-edit-form button:not(.form_button)", function(e) {
		var origForm = form.find('input[name=serialized]').val();

		if (form.serialize() !== origForm && input_codeID.val() != '') {

			swal2.fire({
				title: 'Changes have occurred!',
				text: 'Do you want to save?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				if (result.value) {
					form.find('button[type=submit]').click();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					var modal = $('#edit-code-modal');
					modal.modal('hide');
				}
			});
		}
	});

/* =============================================================
	Validation Functions
============================================================= */
	$.validator.addMethod('minValue', function (value, el, param) {
		return value > param;
	});

	var validator = form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: {{ max_length_code }}
			},
			conversion: {
				required: true,
			    minValue: 0,
			    number: true
			},
			pricebyweight: 'required'
		},
		messages: {
			code: "Please check the Code value (Max Length: {{ max_length_code }})",
			conversion: 'Please enter a conversion factor great than 0',
			pricebyweight: 'Please choose an option for price by weight for the code'
		},
		submitHandler: function(form) {
			var jform = $(form);
			var codeID = input_codeID.val();

			if (validate_codeID(form)) {
				form.submit();
			} else {
				var bootstrap = new JsContento();
				var content = bootstrap.open('div', 'class=swal2-content|id=swal2-content');
				content += '<button type="button" class="btn btn-secondary swal-edit-code" data-code="'+codeID+'">Edit Unit of Measure Code '+ codeID +'</button>';
				content += '<br>';
				content += "Do you want to overwrite?";
				content += bootstrap.close('div');

				swal2.fire({
					title: 'Unit of Measure Code ' +input_codeID.val() + ' Exists' ,
					text: 'Do you want to overwrite?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
					cancelButtonText: 'No',
					html: content,
				}).then((result) => {
					if (result.value) {
						form.submit();
					}
				});
			}
		}
	});

	$("body").on("focusin", "#code-edit-form input:not(#code),#code-edit-form select", function(e) {
		if (input_codeID.val() == '') {
			validator.element( "#code" );
			input_codeID.focus();
		}
	});

	/**
	 * Return if Unit of Measure Code ID can be used to save, based upon if
	 * it exists, and if is the one being edited.
	 * @param  {[type]} form [description]
	 * @return {[type]}      [description]
	 */
	function validate_codeID(form) {
		var jform = $(form);

		if (codeIDs.contains(input_codeID.val())) {
			console.log('Unit of Measure Code Exists');

			if (input_codeID.val() != jform.attr('data-code')) {
				return false;
			}
		}
		return true;
	}

/* =============================================================
	Form Functions
============================================================= */
	/**
	 * Populate Modal Form with button data-* attributes
	 * NOTE: Populates the disabled hidded input to verify if changes were made
	 * @param  $('button') button
	 * @param  $('.modal') modal
	 * @return void
	 */
	function populate_edit_from_button(button, modal) {
		var code = button.data('code').toString();
		var description = button.data('description').toString();
		var conversion = button.data('conversion'); // Extract info from data-* attributes
		var pricebyweight = button.data('pricebyweight'); // Extract info from data-* attributes
		var form = modal.find('form');

		form.attr('data-code', code);
		modal.find('input[name=code]').val(code);
		modal.find('input[name=description]').val(description);
		modal.find('input[name=conversion]').val(conversion);
		modal.find('select[name=pricebyweight]').val(pricebyweight);

		if (code.length) {
			modal.find('.modal-title').text('Editing Code ' + code);
			modal.find('input[name=code]').prop("readonly", true);
			modal.find('input[name=description]').focus();
		} else {
			modal.find('.modal-title').text('Adding a new Code');
			modal.find('input[name=code]').prop("readonly", false);
			modal.find('input[name=code]').focus();
			modal.find('input[name=conversion]').val(1);
			modal.find('select[name=pricebyweight]').val('N');
		}
		form.find('input[name=serialized]').val(form.serialize());
	}

	$("#edit-code-modal").on('hidden.bs.modal', function (e) {
		form.validate().resetForm();
	    form.find('.is-invalid').removeClass("is-invalid");
	    form.find('.is-valid').removeClass("is-valid");
	    form.find('.invalid-feedback').remove();
	    form.find('.valid-feedback').remove();
	});

});
