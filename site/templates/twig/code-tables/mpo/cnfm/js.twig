{% include 'code-tables/mpo/cnfm/js/classes.js.twig' %}

$(function() {
	var codeIDs = {{ m_po.get_codes_ids()|json_encode()|raw }};
	var input_codeID = $('#code');
	var form = $("#code-edit-form");

	var server   = CnfmRequests.getInstance();
	var alert    = CnfmAlerts.getInstance();
	var formCode = CnfmForm.getInstance();

/* =============================================================
	Event Functions
============================================================= */
	$('#edit-code-modal').on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		formCode.updateInputsFromJson(button.data('json'));
	});

	// $("body").on("click", ".swal-edit-code", function(e) {
	// 	var button = $(this);
	// 	var code = button.data('code');
	// 	var edit_button = $('button[data-code='+code+']');
	// 	var modal = $('#edit-code-modal');
	// 	populate_edit_from_button(edit_button, modal);
	// 	swal2.close();
	// });

	$("body").on("change", "input[name=code]", function(e) {
		var input = $(this);
		var code = input.val();

		server.validateCode(code, function(exists) {
			if (exists === true) {
				alert.codeExists(code, function(editCode) {
					if (editCode) {
						var modal = input.closest('.modal');

						if (editCode) {
							var button = $('button[data-code="'+code+'"]');
							formCode.updateInputsFromJson(button.data('json'));
						} else {
							modal.modal('hide');
						}
					}
				});
			}
		});
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			code: {
				required: true,
				maxlength: {{ cnfm.codeMaxLength() }},
				remote: {
					url: function() {
						return server.validateCodeUrl();
					},
					type: "get",
					data: {
						jqv: 'true',
						new: function() {
							return formCode.inputs.form.attr('data-code') ? 'false' : 'true';
						},
					}
				}
			},
		},
		messages: {
			code: "Please check the Code value (Max Length: {{ max_length_code }})",
		},
		submitHandler: function(form) {
			var jform = $(form);
			var codeID = input_codeID.val();

			if (validate_codeID(form)) {
				form.submit();
			} else {
				var bootstrap = new JsContento();
				var content = bootstrap.open('div', 'class=swal2-content|id=swal2-content');
				content += '<button type="button" class="btn btn-secondary swal-edit-code" data-code="'+codeID+'">Edit Customer Price Code '+ codeID +'</button>';
				content += '<br>';
				content += "Do you want to overwrite?";
				content += bootstrap.close('div');

				swal2.fire({
					title: 'Confirmation Code ' +input_codeID.val() + ' Exists' ,
					text: 'Do you want to overwrite?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
					cancelButtonText: 'No',
					html: content,
				}).then((result) => {
					if (result.value) {
						form.submit();
					}
				});
			}
		}
	});

	$("body").on("focusin", "#code-edit-form input:not(#code)", function(e) {
		if (input_codeID.val() == '') {
			validator.element( "#code" );
			input_codeID.focus();
		}
	});

	/**
	 * Return if Confirmation Code ID can be used to save, based upon if
	 * it exists, and if is the one being edited.
	 * @param  {[type]} form [description]
	 * @return {[type]}      [description]
	 */
	function validate_codeID(form) {
		var jform = $(form);

		if (codeIDs.contains(input_codeID.val())) {
			console.log('Confirmation Code Exists');

			if (input_codeID.val() != jform.attr('data-code')) {
				return false;
			}
		}
		return true;
	}

/* =============================================================
	Form Functions
============================================================= */
	/**
	 * Populate Modal Form with button data-* attributes
	 * @param  $('button') button
	 * @param  $('.modal') modal
	 * @return void
	 */
	function populate_edit_from_button(button, modal) {
		var code = button.data('code').toString();
		var description = button.data('description').toString();

		modal.find('form').attr('data-code', code);
		modal.find('input[name=code]').val(code);
		modal.find('input[name=description]').val(description);

		if (code.length) {
			modal.find('.modal-title').text('Editing Code ' + code);
			modal.find('input[name=code]').prop("readonly", true);
			modal.find('input[name=description]').focus();
		} else {
			modal.find('.modal-title').text('Adding a new Code');
			modal.find('input[name=code]').prop("readonly", false);
			modal.find('input[name=code]').focus();
		}
	}

	$("#edit-code-modal").on('hidden.bs.modal', function (e) {
		form.validate().resetForm();
	    form.find('.is-invalid').removeClass("is-invalid");
	    form.find('.is-valid').removeClass("is-valid");
	    form.find('.invalid-feedback').remove();
	    form.find('.valid-feedback').remove();
	});
})
