{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
#}
$(function() {
	var form_cxm = $('#cxm-item-form');
	var input_itemID = form_cxm.find('input[name=itemID]');
	var input_custitemID = form_cxm.find('input[name=custitemID]');
	var input_custID = form_cxm.find('input[name=custID]');
	var select_uom_pricing = form_cxm.find('select[name=uom_pricing]');
	var input_price_uom    = form_cxm.find('input[name=price_uom]');
	var input_price_customer    = form_cxm.find('input[name=price_customer]');
	var modal_ajax = $('#ajax-modal');

/* =============================================================
	Event Functions
============================================================= */
	$("body").on("change", "input[name=price_customer]", function(e) {
		var input = $(this);
		var price = parseFloat(input.val());
		input.val(price.toFixed({{ cxm.field_attribute('price_customer', 'precision') }}));
		calculate_peruom();
	});

	$("body").on("change", "input[name=price_retail]", function(e) {
		var input = $(this);
		var price = parseInt(input.val());
		input.val(price.toFixed({{ cxm.field_attribute('price_retail', 'precision') }}));
	});

	$("body").on("change", "input[name=conversion]", function(e) {
		var input = $(this);
		var price = parseInt(input.val());
		input.val(price.toFixed({{ cxm.field_attribute('conversion', 'precision') }}));
	});

	$("body").on("change", "#uom_pricing", function(e) {
		calculate_peruom();
		var uom = $(this).val();

		if (uom.length) {
			$('#price_uom').removeAttr('readonly');
			$('#price_uom').removeAttr('tabindex');
		} else {
			$('#price_uom').attr('readonly', '');
			$('#price_uom').attr('tabindex', '-1');
		}
	});

	$("body").on("change", "#price_uom", function(e) {
		var input = $(this);
		var price = parseFloat(input.val());
		input.val(price.toFixed({{ cxm.field_attribute('price_uom', 'precision') }}));
		calculate_custprice();
	});

	$("body").on("change", "input[name=itemID]", function(e) {
		var input = $(this);
		populate_item_data(input.val(), function() {

		});
	});

	$("body").on("change", "input[name=custID]", function(e) {
		var input = $(this);

		customerJson(input.val(), function(customer) {
			$('.customer-name').text('');

			if (customer) {
				$('.customer-name').text(customer.name);
			}
		});
	});

	$("body").on("change", "input[name=convert]", function(e) {
		var input = $(this);
		var conversion = parseFloat(input.val());
		input.val(conversion.toFixed({{ cxm.field_attribute('conversion', 'precision') }}));
	});


/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = form_cxm.serialize();

	$("body").on("click", "a:not(#cxm-item-form .form-link, #ajax-modal a, [data-target=#ajax-modal])", function(e) {
		if (form_cxm.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			swal2.fire({
				title: 'Changes have occurred!',
				text: 'Do you want to save?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				if (result.value) {
					form_cxm.find('button[type=submit]').click();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					// Send HTTP GET Request to remove Record Lock
					$.get('{{ page.xrefExitUrl(xref) }}', function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);

		modal.attr('data-input', button.data('input'));
		modal.find('.modal-title').text(button.attr('title'));
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(button.data('lookupurl'), function() {});
	});

	$("body").on('click', '.customer-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var custID = button.data('custid');
		var name = button.data('name');
		input_custID.val(custID);
		modal_ajax.modal('hide');
	});

	$("body").on('click', '.item-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var itemID = button.data('itemid');
		var description = button.data('description');
		var description2 = button.data('description2');
		input_itemID.val(itemID).change();
		modal_ajax.modal('hide');
	});

	$("body").on('submit', '#ajax-modal form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '#ajax-modal .paginator-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	Validation Functions
============================================================= */
	var validator = form_cxm.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			rounding: {required: true},
			custID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('mar/validate/custid/') }}',
					type: "get",
					data: {
						jqv: 'true'
					}
				}
			},
			custitemID: {
				required: true,
				maxlength: {{ cxm.maxlength_custitemid() }},
				remote: {
					url: '{{ page.jsonapiURL('mso/validate/cxm/') }}',
					type: "get",
					data: {
						custID: function() {
							return $('input[name=custID]').val();
						},
						new: function() {
							var input = $('input[name=custitemID]');

							if (input.val() != input.data('custitemid')) {
								return 'true';
							}
							return 'false';
						}
					}
				}
			},
			itemID: {
				{% if page.pw_template == 'cxm' %}
					required: true,
					remote: {
						url: '{{ page.jsonapiURL('inv/validate/itemid/') }}',
						type: "get",
						data: {
							jqv: 'true'
						}
					}
				{% endif %}
			},
		},
		messages: {
			itemID: "Use a valid Item ID",
			custID: "Use a valid Cust ID",
			custitemID: "Use a valid Cust Item ID, (No more than {{ cxm.maxlength_custitemid() }} characters)",
		},
		submitHandler: function(form) {
			$('#loading-modal').modal('show');
			submit_cxm(form);
		}
	});


	function submit_cxm(form) {
		request_validate_custitemID(function(exists) {
			if (exists === true && input_custitemID.val() != input_custitemID.data('custitemid')) {
				swal_existing(function(editXref) {
					if (editXref === true) {
						var uri = new URI();
						uri.removeQuery('custitemID');
						uri.setQuery('custID', input_custID.val());
						uri.setQuery('custitemID', input_custitemID.val());
						window.location.href = uri.toString();
					}
					if (editXref === false) {
						location.reload();
					}
				});
			} else {
				var allow_pdm_change = {{ cxm.allow_pdm_update() }};

				if (allow_pdm_change && parseFloat(input_price_customer.val()) != 0.0 && input_price_customer.val() != $('input[name=price_contract]').val()) {
					swal_update_pdm(form);
				} else {
					form.submit();
				}
			}
		});
	}

	$("body").on('change', 'input[name=custitemID]', function(e) {
		e.preventDefault();

		request_validate_custitemID(function(exists) {
			if (exists === true && input_custitemID.val() != input_custitemID.data('custitemid')) {
				swal_existing(function(editXref) {
					if (editXref === true) {
						var uri = new URI();
						uri.removeQuery('custitemID');
						uri.setQuery('custID', input_custID.val());
						uri.setQuery('custitemID', input_custitemID.val());
						window.location.href = uri.toString();
					}
					if (editXref === false) {
						location.reload();
					}
				});
			}
		});
	});

	function swal_existing(callback) {
		swal2.fire({
			title: "Customer Item " + input_custitemID.val() + " exists",
			text: 'Would you like to go edit this item?',
			icon: 'error',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			callback(result.value ? true : false)
		});
	}

	function swal_update_pdm(form) {
		var html = '<table class="table table-sm">' +
			'<tr>' +
				'<td>Discount Price</td>' +
				'<td class="text-right">'+ $('input[name=price_contract]').val() +'</td>' +
			'</tr>' +
			'<tr>' +
				'<td>Customer X-ref Price</td>' +
				'<td class="text-right">'+input_price_customer.val()+'</td>'+
			'</tr>'+
		'</table>';
		html += 'Do you want to ';
		if (parseFloat(input_price_customer.val()) == 0.00) {
			html += 'create';
		} else {
			html += 'update';
		}
		html += ' discount record with this price?';

		swal2.fire({
			title: "Confirmation",
			html: html,
			icon: 'question',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				$('input[name=updatepdm]').val('true');
			} else {
				$('input[name=updatepdm]').val('false');
			}
			form.submit();
		});
	}

/* =============================================================
	AJAX Request Functions
============================================================= */
	/**
	 * Gets boolean value if CXM item exists then calls callback function
	 * @param  {Function} callback
	 * @return bool       Does CXM item exist?
	 */
	function request_validate_custitemID(callback) {
		var url = new URI('{{ page.jsonapiURL('mso/validate/cxm/') }}');
		url.addQuery('custID', input_custID.val());
		url.addQuery('custitemID', input_custitemID.val());

		$.getJSON(url.toString(), function( valid ) {
			callback(valid);
		});
	}

	function get_item(itemID, callback) {
		var url = new URI('{{ page.jsonapiURL('inv/item/') }}');
		url.addQuery('itemID', itemID).addQuery('fields', 'uom_sale,qtypercase');
		$.getJSON(url.toString(), function(item) {
			callback(item);
		});
	}

	function customerJson(custID, callback) {
		var url = URI('{{ page.jsonapiURL('mar/customer/') }}');
		url.addQuery('custID', custID);

		$.getJSON(url.toString(), function(customer) {
			callback(customer);
		});
	}

	function populate_item_data(itemID, callback) {
		get_item(itemID, function(item) {
			var itemcol = $('.item-col');
			itemcol.find('.description').text(item.description);
			itemcol.find('.description2').text(item.description2);
			itemcol.find('.description2').text(item.description2);
			$('.item-uom').text(item.uom_sale);
			input_itemID.attr('data-qtypercase', item.qtypercase);
			input_itemID.attr('data-itemid', itemID);
			callback();
		});
	}

/* =============================================================
	Per UoM Calculation Functions
============================================================= */
	function calculate_peruom() {
		if (input_itemID.attr('data-qtypercase') == '' || input_itemID.attr('data-itemid') != input_itemID.val()) {
			populate_item_data(input_itemID.val(), function() {
				_calculate_peruom();
			});
		} else {
			_calculate_peruom();
		}
	}

	function _calculate_peruom() {
		var custprice = parseFloat(input_price_customer.val());
		var qty_percase = parseFloat(input_itemID.attr('data-qtypercase'));
		var conversion = select_uom_pricing.find('option:selected').data('conversion');
		var peruom = 0;
		if (conversion) {
			peruom = (custprice / qty_percase) * parseFloat(conversion);
		}
		input_price_uom.val(peruom.toFixed(3));
	}

	function calculate_custprice() {
		if (input_itemID.attr('data-qtypercase') == '' || input_itemID.attr('data-itemid') != input_itemID.val()) {
			populate_item_data(input_itemID.val(), function() {
				_calculate_custprice();
			});
		} else {
			_calculate_custprice();
		}
	}

	function _calculate_custprice() {
		var peruom = input_price_uom.val();
		var qty_percase = parseFloat(input_itemID.attr('data-qtypercase'));
		var conversion = select_uom_pricing.find('option:selected').data('conversion');
		if (conversion) {
			var custprice = (peruom * qty_percase) / conversion;
			input_price_customer.val(custprice.toFixed({{ cxm.field_attribute('price_customer', 'precision') }}));
		}
		input_price_uom.val(peruom.toFixed({{ cxm.field_attribute('price_uom', 'precision') }}));
	}
});
