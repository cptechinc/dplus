{% include 'items/cxm/.new/xref/qnotes/js/classes.twig' %}

$(function() {
	var qnotesModal = $('#notes-order-modal');
	var alert = QnotesAlerts.getInstance();
	var qnotesForm = QnotesForm.getInstance();

/* =============================================================
	Order Notes Functions
============================================================= */
	qnotesModal.on('show.bs.modal', function (e) {
		var modal = $(this);
		var button = $(e.relatedTarget);
		populate_notes_form(button, modal);
	});

	qnotesModal.on('shown.bs.modal', function (e) {
		var modal = $(this);
		var form  = modal.find('form');
		modal.find('textarea[name=note]').focus();
		form.attr('data-serialized', form.serialize());
	});

	qnotesModal.on('hide.bs.modal', function (e) {
		var modal = $(this);
		var form  = modal.find('form');
		var original = form.attr('data-serialized');
		
		if (form.serialize() != original) {
			alert.unsavedChanges(function(save) {
				if (save) {
					form.find('button[value="update-notes"]').click();
					return true;
				}
			});
		}
	});

	$("#qnotes-form").validate({
		errorClass: "is-invalid",
		validClass: "",
		ignore: ".validate-ignore",
		errorPlacement: function(error, element) {
			error.addClass('invalid-feedback');

			if (element.closest('.input-parent').length == 0 && element.closest('.input-group-parent').length == 0) {
				error.insertAfter(element);
				return true;
			}
			error.appendTo(element.closest('.input-parent'));
		},
		rules: {
			note: {
				required: true,
			},
			quote: {
				require_from_group: [1, ".order-form"]
			},
			pick: {
				require_from_group: [1, ".order-form"]
			},
			pack: {
				require_from_group: [1, ".order-form"]
			},
			invoice: {
				require_from_group: [1, ".order-form"]
			},
			acknowledgement: {
				require_from_group: [1, ".order-form"]
			},
		},
		messages: {
			note: "Please Enter a Note",
		},
		submitHandler: function(form) {
			var action = $(this.submitButton).attr("value");
			var jform = $(form);
			var modal = jform.closest('.modal');

			if (modal.length) {
				modal.removeAttr('tabindex');
			}

			if (action == 'delete-notes') {
				// $('<input type="hidden" name="action" value="delete-notes">').appendTo(jform);
				form.submit();
			} else {
				if (qnotesForm.hasDocumentSelected()) {
					console.log(qnotesForm.getNoteFormscode());
					if (qnotesForm.noteFormsExists() && jform.find('input[name=form]').val() != qnotesForm.getNoteFormscode())  {
						alert.codeExists(qnotesForm.getNoteFormscode(), function(confirmEdit) {
							if (confirmEdit) {
								var button = $('.qnote-order-row[data-form='+qnotesForm.getNoteFormscode()+']').find('button.edit');
								var modal = $('#notes-order-modal');
								populate_notes_form(button, modal);
							}
						});
					} else {
						form.submit();
					}
				} else {
					var notesform = $(form);
					var ele_feedback = notesform.find('.feedback');
					ele_feedback.addClass('is-invalid');
					ele_feedback.html($('<label>Please check a document to add a note to</label>').addClass('invalid-feedback').show());
				}
				if (modal.length) {
					modal.attr('tabindex', '-1');
				}
			}
		}
	});

	function populate_notes_form(button, modal) {
		var note_row = button.closest('.qnote-order-row');

		if (note_row.length) {
			modal.find('input.order-form').each(function(index) {
				var input = $(this);
				console.log(button.data(input.attr('name')));
				input.prop('checked', button.data(input.attr('name')) == 'Y');
			});
			modal.find('textarea[name=note]').val(note_row.find('textarea').text());
		} else {
			modal.find('input.order-form').each(function(index) {
				var input = $(this);
				input.prop('checked', qnotesForm.config.fields[input.attr('name')].default == 'Y');
			});
			modal.find('textarea[name=note]').val('');
		}
		modal.find('input[name=form]').val(button.data('form'));
	}
});
