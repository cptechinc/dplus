class VxmRequests {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmRequests();
		}
		return this.instance;
	}

	validatePrimaryPoOrderCode(vendorID, vendoritemID, itemID, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/vxm/primary-ordercode') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID});
		ajax.request(function(response) {
			callback(response)
		});
	}

	xrefExists(vendorID, vendoritemID, itemID, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/validate/vxm') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID});
		ajax.request(function(response) {
			callback(response)
		});
	}

	canUpdateItmCost(vendorID, vendoritemID, itemID, ordercode, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/validate/vxm/update-itm-cost') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID, ordercode: ordercode});
		ajax.request(function(response) {
			callback(response)
		});
	}

	getItm(itemID, itmfields, callback) {
		var fields = Array.isArray(itmfields) ? itmfields.join(',') : itmfields;
		var ajax = new AjaxRequest('{{ page.jsonapiURL('inv/item') }}');

		ajax.setData({itemID: itemID, fields: fields});
		ajax.request(function(response) {
			callback(response)
		});
	}
}

class VxmAlerts {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmAlerts();
		}
		return this.instance;
	}

	xrefExists(vendorID, vendoritemID, itemID) {
		swal2.fire({
			title: "Vendor Item " + vendoritemID + " exists",
			text: 'Would you like to go edit this item?',
			icon: 'error',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				var uri = new URI();
				uri.removeQuery('vendoritemID');
				uri.setQuery('vendorID', vendorID);
				uri.setQuery('vendoritemID', vendoritemID);
				uri.setQuery('itemID', itemID);
				window.location.href = uri.toString();
			}
		});
	}

	changePrimaryPoOrderCode(itemID) {
		swal2.fire({
			title: "Overwrite Primary PO Ordercode?",
			text: itemID + " already has a primary",
			icon: 'warning',
			showCancelButton: true,
			buttonsStyling: false,
			confirmButtonText: 'Yes!'
		}).then(function(result) {
			if (result.value) {
				callback(true);
			} else {
				callback(false);
			}
		});
	}

	unsavedChanges(callback) {
		swal2.fire({
			title: 'Changes have occurred!',
			text: 'Do you want to save?',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
			cancelButtonText: 'No',
		}).then((result) => { // Return True for save, false for dismiss
			if (result.value) {
				callback(true)
			} else if (result.dismiss === Swal.DismissReason.cancel) {
				callback(false);
			}
		});
	}
	confirmCost(type, costbase, callback) {
		var msg = 'This is the <b>' + type + '</b> Vendor for this item and ' +
		'the Standard Cost Base code is <b>'+costbase+'</b>, '+
		'do you want to update the <b>Standard Cost</b> on the Item Master?';

		swal2.fire({
			title: 'Confirm Update',
			html: msg,
			icon: 'question',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			callback(result.value);
		});
	}
}

class VxmCalculator {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmCalculator();
		}
		return this.instance;
	}

	margin(listprice, cost) {
		if (floatParse(listprice) == 0 || floatParse(cost) == 0) {
			return 0;
		}
		var markup = listprice - cost;
		return markup / listprice * 100;
	}

	cost(listprice, margin) {
		if (floatParse(listprice) == 0 || floatParse(margin) == 0) {
			return 0;
		}
		return (1 - (margin / 100)) * listprice;
	}
}

class VxmForm {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmForm();
		}
		return this.instance;
	}

	constructor() {
		this.id = 'vxm-item-form';
		this.inputs = VxmInputs.getInstance();
		this.config = VxmConfigs.getInstance();
		this.calculator = VxmCalculator.getInstance();
	}

	getListPrice() {
		return this.inputs.listprice.val();
	}

	enableDisableKit() {
		if (this.inputs.itemid.attr('data-iskit') == 'false') {
			this.inputs.kit.val('N');
			this.inputs.kit.attr('disabled', 'disabled');
			this.inputs.kit.attr('tabindex', '-1');
		}

		if (this.inputs.itemid.attr('data-iskit') == 'true') {
			this.inputs.kit.val('Y');
			this.inputs.kit.removeAttr('disabled');
			this.inputs.kit.attr('tabindex', '');
		}
	}

	populateItemData(itemID) {
		var requests = VxmRequests.getInstance();

		requests.getItm(itemID, ['uom','iskit','pricing','standardcostbasedon'], function(item) {
			var form = new VxmForm();

			if (item) {
				var itemcol = $('.item-col');
				form.inputs.itemid.attr('data-iskit',  item.iskit ? 'true' : 'false');
				form.inputs.itemid.attr('data-itemid', item.itemid);
				form.inputs.itemid.attr('data-standardcostbase', item.standardcostbasedon.base);
				itemcol.find('.description').text(item.description);
				itemcol.find('.description2').text(item.description2);
				itemcol.find('.uom-sale').text(item.uom.sale.description);
				$('.uom-sale-code').attr('data-conversion', item.uom.sale.conversion);
				$('.uom-sale-code').text(item.uom.sale.code);
				form.inputs.listprice.val(item.pricing.base).change();
				form.inputs.uom.val(item.uom.sale.code).change();
				form.enableDisableKit();
			} else {
				form.inputs.itemid.attr('data-iskit', 'false');
				form.inputs.itemid.attr('data-itemid', '');
				form.enableDisableKit();
			}
		});
	}

	updateUnitRowMargin(unitrow) {
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.cost'),
			margin: unitrow.find('.margin')
		};
		inputs.cost.val(floatParse(inputs.cost.val()).toFixed(this.config.fields.unit_cost.precision));

		if (floatParse(inputs.cost.val())) {
			var margin = this.calculator.margin(this.getListPrice(), floatParse(inputs.margin.val()));
			var displaymargin = '';

			if (margin != 0) {
				displaymargin = floatParse(margin).toFixed(this.config.fields.unit_margin.precision);
			}

			inputs.margin.val(displaymargin);
		}
	}
	updateUnitRowCost(unitrow) {
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.cost'),
			margin: unitrow.find('.margin')
		};
		var margin = floatParse(inputs.margin.val()).truncate(this.config.fields.unit_margin.precision);
		margin =  floatParse(margin).toFixed(this.config.fields.unit_margin.precision);
		inputs.margin.val(margin);

		if (floatParse(inputs.margin.val())) {
			var cost = floatParse(this.calculator.cost(this.getListPrice(), margin)).toFixed(this.config.fields.unit_cost.precision);
			input_unitcost.val(cost);
		}
	}
	validateOrderCode(callback) { // returns true or false
		var inputs = this.inputs;

		if (inputs.ordercodevalidated.val() == 'false') { // If Order code has not been validated
			if (inputs.ordercode.val() == this.config.ordercodes.primary) { // Validate if Order code is pimary
				var server = VxmRequests.getInstance();
				server.validatePrimaryPoOrderCode(inputs.vendorid.val(), inputs.vendoritemid.val(), inputs.itemid.val(), function(isAllowed) {
					if (isAllowed) {
						inputs.ordercodevalidated.val('true');
						callback(true);
					} else {
						var alerts = VxmAlerts.getInstance();
						alerts.changePrimaryPoOrderCode(this.inputs.itemid.val(), function(overwrite) {
							if (overwrite) { // If we want to overwrite
								this.inputs.Ordercodevalidated.val('true');
							}
							callback(overwrite);
						});
					}
				});
			} else {
				inputs.ordercodevalidated.val('true');
				callback(true);
			}
		} else {
			callback(true);
		}
	}

	confirmCost(callback) { // returns true or false
		console.log('confirming costs');
		var costbase = this.inputs.cost.base;
		var costperuom  = floatParse(costbase.val()) / this.inputs.uom.find('option:selected').data('conversion');
		var changedcost  = floatParse(costbase.data('cost')) != costperuom;
		var itmdifferent = floatParse(costbase.data('itmcost')) != costbase.val();
		var changedordercode = this.inputs.ordercode.val() != this.inputs.ordercode.data('ordercode');

		if (changedcost || changedordercode) {
			var server = VxmRequests.getInstance();
			var inputs = VxmInputs.getInstance();
			server.canUpdateItmCost(inputs.vendorid.val(), inputs.vendoritemid.val(), inputs.itemid.val(), inputs.ordercode.val(), function(response) {
				if (response.allow) {
					if (response.confirm) {
						var alerts = VxmAlerts.getInstance();
						var config = VxmConfigs.getInstance();
						var inputs = VxmInputs.getInstance();
						alerts.confirmCost(config.ordercodesDescriptions[inputs.ordercode.val()], inputs.cost.base.val(), function(confirmed) {
							callback(confirmed);
						});
					} else {
						callback(true);
					}
				} else {
					callback(false);
				}
			});
		} else {
			callback(this.inputs.ordercode.val() == this.config.ordercodes.primary);
		}
	}
}

class VxmConfigs {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmConfigs();
		}
		return this.instance;
	}

	constructor() {
		this.ordercodes = {
			primary: 'P',
			costing: 'C'
		};
		this.ordercodesDescriptions = {{ constant('ItemXrefVendor::OPTIONS_POORDERCODE')|json_encode()|raw }};
		this.allowListPriceUpdate = {{ vxm.getConfigAp().update_itm_pricing() ? 'true' : 'false' }};
		this.options = {
			basecostchange: {
				computeListpriceOrPercent: {
					listprice: 'L',
					percent:   'P'
				}
			}
		};
		this.basecostchange = {
			computeListpriceOrPercent: '{{ vxm.getConfigAp().computelistpriceorpercent }}'
		};
		this.fields = {
			unit_cost: {
				precision: {{ vxm.field_attribute('unit_cost', 'precision') }}
			},
			unit_margin: {
				precision: {{ vxm.field_attribute('unit_margin', 'precision') }}
			}
		};
	}
}

class VxmInputs {
	static instance = null;

	static getInstance() {
		if (this.instance === null) {
			this.instance = new VxmInputs();
		}
		return this.instance;
	}

	constructor() {
		this.id = 'vxm-item-form',
		this.form = $('#' + this.id),
		this.vendorid     = this.form.find('input[name=vendorID]'),
		this.vendoritemid = this.form.find('input[name=vendoritemID]'),
		this.itemid       = this.form.find('input[name=itemID]'),
		this.kit          = this.form.find('select[name=iskit]'),
		this.listprice    = this.form.find('input[name=listprice]'),
		this.uom          = this.form.find('input[name=uom]'),
		this.ordercode    = this.form.find('select[name=po_ordercode]'),
		this.ordercodevalidated = this.form.find('input[name=po_ordercode_validated]'),
		this.cost = {
			base: this.form.find('input[name=unitcost_base]'),
		}
	}

	updateUnitMargin(unitrow) {
		var calculator = VxmCalculator.getInstance();
		var form = VxmForm.getInstance();
		var config = VxmConfigs.getInstance();
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.unit-cost'),
			margin: unitrow.find('.unit-margin'),
		};
		inputs.cost.val(floatParse(inputs.cost.val()).toFixed(config.fields.unit_cost.precision));

		if (floatParse(inputs.cost.val())) {
			var margin = calculator.margin(form.getListPrice(), floatParse(inputs.cost.val()));
			var displaymargin = '';

			if (margin != 0) {
				displaymargin = floatParse(margin).toFixed(config.fields.unit_margin.precision);
			}

			inputs.margin.val(displaymargin);
		}
	}

	updateAllUnitMargins() {
		var inputs = VxmInputs.getInstance();

		$(".unit-row").each(function(index) {
			inputs.updateUnitMargin($(this));
		});
	}

	updateUnitCost(unitrow) {
		var calculator = VxmCalculator.getInstance();
		var form = VxmForm.getInstance();
		var config = VxmConfigs.getInstance();
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.unit-cost'),
			margin: unitrow.find('.unit-margin'),
		};
		var margin = floatParse(inputs.margin.val()).truncate(config.fields.unit_margin.precision);
		margin =  floatParse(margin).toFixed(config.fields.unit_margin.precision);
		inputs.margin.val(margin);

		if (floatParse(inputs.margin.val())) {
			var cost = floatParse(calculator.cost(form.getListPrice(), margin)).toFixed(config.fields.unit_cost.precision);
			inputs.cost.val(cost);
		}
	}

	updateAllUnitCosts() {
		var inputs = VxmInputs.getInstance();

		$(".unit-row").each(function(index) {
			inputs.updateUnitCost($(this));
		});
	}

	updateUnitRowReadonly(unitrow) {
		var inputs = {
			qty: unitrow.find('.unit-qty'),
			cost: unitrow.find('.unit-cost'),
			others: unitrow.find('.unit-cost, .unit-margin')
		}
		var input_unitqty = unitrow.find('.unit-qty');

		if (floatParse(inputs.qty.val()) > 0) {
			inputs.others.removeAttr('readonly');
			inputs.others.removeAttr('tabindex');

			var cost = floatParse(inputs.cost.val());
			if (cost > 0) {
				var index = parseInt(unitrow.data('break')) + 1;
				$('.unit-row[data-break='+ index +'] .unit-qty').removeAttr('tabindex').removeAttr('readonly');
			}
		} else {
			inputs.others.attr('readonly', 'readonly');
			inputs.others.attr('tabindex', '-1');
		}
	}

	updateMarginsOrListpriceAfterBasecost() {
		var config = VxmConfigs.getInstance();
		var unitrow = this.cost.base.closest('.unit-row');
		var update  = config.basecostchange.computeListpriceOrPercent;

		if (update == config.options.basecostchange.computeListpriceOrPercent.percent) { // Update Margins
			this.updateAllUnitMargins();
		} else if (update == config.options.basecostchange.computeListpriceOrPercent.listprice) { // Update List Price
			var costbase = this.cost.base.val();
			var listprice = costbase /  (1 - (unitrow.find('input.unit-margin').val() / 100));
			this.listprice.val(listprice).change();
		}
	}

}
