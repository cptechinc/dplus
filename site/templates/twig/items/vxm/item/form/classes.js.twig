function VxmRequests() {
	this.validatePrimaryPoOrderCode = function(vendorID, vendoritemID, itemID, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/vxm/primary-ordercode') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID});
		ajax.request(function(response) {
			callback(response)
		});
	},
	this.xrefExists = function(vendorID, vendoritemID, itemID, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/validate/vxm') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID});
		ajax.request(function(response) {
			callback(response)
		});
	},
	this.canUpdateItmCost = function(vendorID, vendoritemID, itemID, ordercode, callback) {
		var ajax = new AjaxRequest('{{ page.jsonapiURL('map/validate/vxm/update-itm-cost') }}');
		ajax.setData({vendorID: vendorID, vendoritemID: vendoritemID, itemID: itemID, ordercode: ordercode});
		ajax.request(function(response) {
			callback(response)
		});
	},
	this.getItm = function(itemID, itmfields, callback) {
		var fields = Array.isArray(itmfields) ? itmfields.join(',') : itmfields;
		var ajax = new AjaxRequest('{{ page.jsonapiURL('inv/item') }}');

		ajax.setData({itemID: itemID, fields: fields});
		ajax.request(function(response) {
			callback(response)
		});
	}
}

function VxmAlerts() {
	this.xrefExists = function(vendorID, vendoritemID, itemID) {
		swal2.fire({
			title: "Vendor Item " + vendoritemID + " exists",
			text: 'Would you like to go edit this item?',
			icon: 'error',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				var uri = new URI();
				uri.removeQuery('vendoritemID');
				uri.setQuery('vendorID', vendorID);
				uri.setQuery('vendoritemID', vendoritemID);
				uri.setQuery('itemID', itemID);
				window.location.href = uri.toString();
			}
		});
	},
	this.changePrimaryPoOrderCode = function(itemID) {
		swal2.fire({
			title: "Overwrite Primary PO Ordercode?",
			text: itemID + " already has a primary",
			icon: 'warning',
			showCancelButton: true,
			buttonsStyling: false,
			confirmButtonText: 'Yes!'
		}).then(function (result) {
			if (result.value) {
				// TODO change input validated in callback function
				// var input_validatedpoordercode = form_vxm.find('input[name=po_ordercode_validated]');
				// input_validatedpoordercode.val('true');
				callback(true);
			} else {
				callback(false);
			}
		});
	},
	this.unsavedChanges = function(callback) {
		swal2.fire({
			title: 'Changes have occurred!',
			text: 'Do you want to save?',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
			cancelButtonText: 'No',
		}).then((result) => { // Return True for save, false for dismiss
			// if (result.value) {
			// 	form_vxm.find('button[type=submit]').click();
			// } else if (result.dismiss === Swal.DismissReason.cancel) {
			// 	// Send HTTP GET Request to remove Record Lock
			// 	$.get('{{ page.url }}', function() {
			// 		window.location.href = href;
			// 	});
			// }
			if (result.value) {
				callback(true)
			} else if (result.dismiss === Swal.DismissReason.cancel) {
				callback(false);
			}
		});
	},
	this.confirmCost = function(type, costbase, callback) {
		var msg = 'This is the <b>' + type + '</b> Vendor for this item and ' +
		'the Standard Cost Base code is <b>'+costbase+'</b>, '+
		'do you want to update the <b>Standard Cost</b> on the Item Master?';

		swal2.fire({
			title: 'Confirm Update',
			html: msg,
			icon: 'question',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			callback(result.value);
		});
	}
}

function VxmCalculator() {
	this.margin = function(listprice, cost) {
		if (floatParse(listprice) == 0 || floatParse(cost) == 0) {
			return 0;
		}
		var markup = listprice - cost;
		return markup / listprice * 100;
	},
	this.cost = function(listprice, margin) {
		if (floatParse(listprice) == 0 || floatParse(margin) == 0) {
			return 0;
		}
		return (1 - (margin / 100)) * listprice;
	}
}

function VxmForm() {
	this.id = 'vxm-item-form',
	this.form = $('#' + this.id),
	this.config = new VxmConfigs(),
	this.calculator = new VxmCalculator(),
	this.inputs = {
		vendorid:     this.form.find('input[name=vendorID]'),
		vendoritemid: this.form.find('input[name=vendoritemID]'),
		itemid:       this.form.find('input[name=itemID]'),
		kit:          this.form.find('select[name=iskit]'),
		listprice:    this.form.find('input[name=listprice]'),
		uom:          this.form.find('input[name=uom]'),
	},
	this.getListPrice = function() {
		return this.inputs.listprice.val();
	},
	this.enableDisableKit = function() {
		if (this.inputs.itemid.attr('data-iskit') == 'false') {
			this.inputs.kit.val('N');
			this.inputs.kit.attr('disabled', 'disabled');
			this.inputs.kit.attr('tabindex', '-1');
		}

		if (this.inputs.itemid.attr('data-iskit') == 'true') {
			this.inputs.kit.val('Y');
			this.inputs.kit.removeAttr('disabled');
			this.inputs.kit.attr('tabindex', '');
		}
	},
	this.populateItemData = function(itemID) {
		var requests = new VxmRequests();

		requests.getItm(itemID, ['uom','iskit','pricing','standardcostbasedon'], function(item) {
			var form = new VxmForm();

			if (item) {
				var itemcol = $('.item-col');
				form.inputs.itemid.attr('data-iskit',  item.iskit ? 'true' : 'false');
				form.inputs.itemid.attr('data-itemid', item.itemid);
				form.inputs.itemid.attr('data-standardcostbase', item.standardcostbasedon.base);
				itemcol.find('.description').text(item.description);
				itemcol.find('.description2').text(item.description2);
				itemcol.find('.uom-sale').text(item.uom.sale.description);
				$('.uom-sale-code').attr('data-conversion', item.uom.sale.conversion);
				$('.uom-sale-code').text(item.uom.sale.code);
				form.inputs.listprice.val(item.pricing.base).change();
				form.inputs.uom.val(item.uom.sale.code).change();
				form.enableDisableKit();
			} else {
				form.inputs.itemid.attr('data-iskit', 'false');
				form.inputs.itemid.attr('data-itemid', '');
				form.enableDisableKit();
			}
		});
	},
	this.updateUnitRowMargin = function(unitrow) {
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.cost'),
			margin: unitrow.find('.margin')
		};
		inputs.cost.val(floatParse(inputs.cost.val()).toFixed(this.config.fields.unit_cost.precision));

		if (floatParse(inputs.cost.val())) {
			var margin = this.calculator.margin(this.getListPrice(), floatParse(inputs.margin.val()));
			var displaymargin = '';

			if (margin != 0) {
				displaymargin = floatParse(margin).toFixed(this.config.fields.unit_margin.precision);
			}

			inputs.margin.val(displaymargin);
		}
	},
	this.updateUnitRowCost = function(unitrow) {
		var inputs = {
			qty:    unitrow.find('.unit-qty'),
			cost:   unitrow.find('.cost'),
			margin: unitrow.find('.margin')
		};
		var margin = floatParse(inputs.margin.val()).truncate(this.config.fields.unit_margin.precision);
		margin =  floatParse(margin).toFixed(this.config.fields.unit_margin.precision);
		inputs.margin.val(margin);

		if (floatParse(inputs.margin.val())) {
			var cost = floatParse(this.calculator.cost(this.getListPrice(), margin)).toFixed(this.config.fields.unit_cost.precision);
			input_unitcost.val(cost);
		}
	}
}

function VxmConfigs() {
	this.allowListPriceUpdate = {{ vxm.getConfigAp().update_itm_pricing() ? 'true' : 'false' }},

	this.fields = {
		unit_cost: {
			precision: {{ vxm.field_attribute('unit_cost', 'precision') }}
		},
		unit_margin: {
			precision: {{ vxm.field_attribute('unit_margin', 'precision') }}
		}
	}
}
