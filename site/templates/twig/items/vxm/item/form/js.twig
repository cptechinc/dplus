{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	vxm                    module XrefVxm
	item                   ItemXrefVendor
#}

{% include 'items/vxm/item/form/classes.js.twig' %}

$(function() {
	var primarypoordercode = '{{ item.getOptionpoordercodePrimary() }}';

	var form_vxm = $('#vxm-item-form');
	var input_listprice = form_vxm.find('input[name=listprice]');
	var input_uom       = form_vxm.find('select[name=uom_purchase]');
	var input_eachlistprice = form_vxm.find('input[name=eachlistprice]');
	var input_itemID = form_vxm.find('input[name=itemID]');
	var input_vendoritemID = form_vxm.find('input[name=vendoritemID]');
	var input_vendorID = form_vxm.find('input[name=vendorID]');
	var input_update_itm_cost = form_vxm.find('input[name=update_itm_cost]');
	var input_ordercode = form_vxm.find('select[name=po_ordercode]');

	var modal_ajax = $('#ajax-modal');

	var uri = URI();
	if (uri.query(true)['vendoritemID'] != 'new') {
		$('select[name=uom_purchase]').focus();
	}

	var formVxm = VxmForm.getInstance();
	var alert   = VxmAlerts.getInstance();
	var server  = VxmRequests.getInstance();

/* =============================================================
	Event Functions
============================================================= */
	$("body").on("change", "input[name=unitcost_base]", function(e) {
		recalculate_margins_listprice();
	});

	$("body").on("change", ".unit-cost, .unit-qty", function(e) {
		var input = $(this);
		var unitrow = input.closest('.unit-row');
		formVxm.inputs.updateUnitMargin(unitrow);

		//if (input.hasClass('unit-qty')) {
			update_input_availability(unitrow);
		//}

	});

	$("body").on("change", "input[name=qty_percase]", function(e) {
		var input = $(this);
		var qty = floatParse(input.val());
		input.val(qty.toFixed({{ vxm.field_attribute('qty_percase', 'precision') }}));
	});

	$("body").on("change", "input[name=minbuyqty]", function(e) {
		var input = $(this);
		var qty = floatParse(input.val());
		input.val(qty.toFixed({{ vxm.field_attribute('minbuyqty', 'precision') }}));
	});

	$("body").on("keydown", ".unit-qty", function(e) {
		var input = $(this);
		var unitrow = input.closest('.unit-row');
		update_input_availability(unitrow);
	});

	$("body").on("change", ".unit-margin", function(e) {
		var unitrow = $(this).closest('.unit-row');
		var computeListpriceOrCost = '{{ vxm.getConfigAp().computelistpriceorcost }}';

		if (parseInt(unitrow.data('break')) == 0) {
			if (computeListpriceOrCost == 'L') {
				update_listprice_from_basemargin(function() {
					$('.unit-row').each(function(index) {
						var vxmInputs = VxmInputs.getInstance();
						vxmInputs.updateUnitMargin($(this));
					});
				});
			} else {
				update_unitrow_cost(unitrow);
			}
		} else  {
			update_unitrow_cost(unitrow);
		}

		if (parseInt(unitrow.data('break')) > 0) {
			var step = parseInt(unitrow.data('break'));
			var nextrow = $('.unit-row[data-break='+(step + 1)+']');
			nextrow.find('.unit-qty').removeAttr('readonly');
		}
	});

	/**
	 * Change the Unit of Measure Description when the Unit of Measure is changed
	 */
	$("body").on("change", "#uom_purchase", function(e) {
		var input = $(this);
		var conversion = input.find('option:selected').data('conversion');
		var ele_description = input.siblings('p').find('.conversion-description');
		$('.uom-purchase-code').text(input.val());
		ele_description.text(conversion);
		calculate_eachlistprice();
	});

	$("body").on("change", "input[name=itemID]", function(e) {
		var input = $(this);
		var server = new VxmRequests();

		form.populateItemData(input.val());

		server.xrefExists(formVxm.inputs.vendorid.val(), formVxm.inputs.vendoritemid.val(), input.val(), function(exists) {
			if (exists) {
				alert.xrefExists(formVxm.inputs.vendorid.val(), formVxm.inputs.vendoritemid.val(), input.val());
			}
		});
	});

	$("body").on("change", "input[name=vendoritemID]", function(e) {
		var input = $(this);
		var server = new VxmRequests();

		server.xrefExists(formVxm.inputs.vendorid.val(), input.val(), formVxm.inputs.itemid.val(), function(exists) {
			if (exists && input.data('new') != 'true') {
				alert.xrefExists(formVxm.inputs.vendorid.val(), input.val(), formVxm.inputs.itemid.val());
			}
		});
	});

	$("body").on("change", "input[name=listprice]", function(e) {
		var input = $(this);
		input.val(floatParse(input.val()).toFixed({{ vxm.field_attribute('listprice', 'precision') }}));
		var allowlistpriceupdate = {{ vxm.getConfigAp().update_itm_pricing() ? 'true' : 'false' }};
		var itmcost_ordercodes = {{ constant('ORDERCODES_ITM_COST', vxm)|json_encode()|raw }};
		var iscostcode = itmcost_ordercodes.contains($('select[name=po_ordercode]').val());

		if (($('select[name=po_ordercode]').val() == 'P' && allowlistpriceupdate) || input.closest('form').data('new') == true) {
			changeEachListPrice();
		}

		recalculate_margins_costs();
	});

	$("body").on("change", "select[name=po_ordercode]", function(e) {
		var input = $(this);
		var input_validatedpoordercode = form_vxm.find('input[name=po_ordercode_validated]');
		input_validatedpoordercode.val('false');
		var itmcost_ordercodes = {{ constant('ORDERCODES_ITM_COST', vxm)|json_encode()|raw }};

		if (itmcost_ordercodes.contains(input.val())) {
			$('input[name=listprice]').change();
		}
	});

/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = form_vxm.serialize();

	$("body").on("click", "a:not(#itm-xrefs-form.form_button, #ajax-modal a)", function(e) {
		if (form_vxm.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			swal2.fire({
				title: 'Changes have occurred!',
				text: 'Do you want to save?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				if (result.value) {
					form_vxm.find('button[type=submit]').click();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					// Send HTTP GET Request to remove Record Lock
					$.get('{{ page.url }}', function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	AJAX Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		var url = button.data('lookupurl');

		modal.find('.modal-title').text(button.attr('title'));
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '.vendor-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var vendorID = button.data('vendorid');
		var name = button.data('name');
		input_vendorID.val(vendorID);
		input_vendorID.closest('.vendor-col').find('.name').text(name);
		modal_ajax.modal('hide');
	});

	$("body").on('click', '.item-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var itemID = button.data('itemid');
		var description = button.data('description');
		input_itemID.val(itemID).change();
		modal_ajax.modal('hide');
	});

	$("body").on('submit', '#ajax-modal form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '#ajax-modal .paginator-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	Validation Functions
============================================================= */
	form_vxm.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			vendorID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('map/validate/vendorid/') }}',
					type: "get",
					data: {
						jqv: 'true'
					}
				}
			},
			vendoritemID: {
				required: true,
				remote: function() {
					validate_xref_remote_obj();
				}
			},
			itemID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/itemid/') }}',
					type: "get",
					data: {
						jqv: 'true'
					}
				}
			},
			uom_purchase: {required: true},
			qty_percase: {required: true},
			optioncode: {
				required: false,
				maxlength: {{ vxm.field_attribute('optioncode', 'maxlength') }}
			},
		},
		messages: {
			ouritemID: "Please enter the Your Item ID",
			uom_purchase: "Select a Purchase Unit of Measure",
		},
		submitHandler: function(form) {
			$('#loading-modal').modal('show');
			update_vxm(form);
		}
	});

	function validate_xref_remote_obj() {
		var input = $('input[name=vendoritemID]');
		var url = '{{ page.jsonapiURL('map/validate/vxm/') }}';

		return {
			url: url,
			type: "get",
			data: {
				jqv: 'true',
				new: function() {
					return (input.val() != input.data('vendoritemid') && input.data('new') === true) ? 'true' : 'false';
				},
				vendorID: function() {
					return $('input[name=vendorID]').val();
				},
				itemID: function() {
					return $('input[name=itemID]').val();
				},
			}
		}

	}

	function update_vxm(form) {
		server.xrefExists(formVxm.inputs.vendorid.val(), formVxm.inputs.vendoritemid.val(), formVxm.inputs.itemid.val(), function(exists) {
			if (exists === true && formVxm.inputs.vendoritemid.val() != formVxm.inputs.vendoritemid.data('vendoritemid')) {
				alert.xrefExists(formVxm.inputs.vendorid.val(), formVxm.inputs.vendoritemid.val(), formVxm.inputs.itemid.val());
			} else {
				formVxm.validateOrderCode(function(validated) {
					formVxm.confirmCost(function(confirmed) {
						input_update_itm_cost.val(confirmed ? 'true' : 'false');
						console.log('submit');
						// TODO testing
						// formObject.submit();
					});
				});
			}
		});
	}

/* =============================================================
	AJAX Request Functions
============================================================= */

/* =============================================================
	Margin Calculation Functions
============================================================= */
	/**
	 * Recalculate Margin or Costs
	 * NOTE: USED when list price changes
	 * @return {[type]} [description]
	 */
	function recalculate_margins_listprice() {
		var input_costbase = $('input[name=unitcost_base]');
		var unitrow = input_costbase.closest('.unit-row');
		var update = '{{ vxm.getConfigAp().computelistpriceorpercent }}';

		if (update == 'P') { // Update Margins
			calculate_margins();
		} else if (update == 'L') { // Update Costs
			var costbase = input_costbase.val();
			var listprice = costbase /  (1 - (unitrow.find('input.unit-margin').val() / 100));
			$('input[name=listprice]').val(listprice).change();
		}
	}
	/**
	 * Recalculate Margin or Costs
	 * NOTE: USED when list price changes
	 * @return {[type]} [description]
	 */
	function recalculate_margins_costs() {
		var update = '{{ vxm.getConfigAp().computepercentageorcost }}';

		if (parseInt($('input[name=listprice]').val()) == 0) {
			$(".unit-row").each(function(index) {
				if (update == 'C') {
					$(this).find('input').val('');
				} else {
					$(this).find('input.unit-margin').val('');
				}

				if (parseInt($(this).data('break')) > 0) {
					if (floatParse($(this).find('input.unit-qty').val()) == 0) {
						$(this).find('input.unit-cost,input.unit-margin').attr('readonly', 'readonly');
						if (parseInt($(this).data('break')) > 1) {
							$(this).find('input.unit-qty').attr('readonly', 'readonly');
						}
					}
				}
			});
			return true;
		}

		if (update == 'P') { // Update Margins
			formVxm.inputs.updateAllMargins();
		} else if (update == 'C') { // Update Costs
			calculate_costs();
		}
	}

	/**
	 * Recalculates Each List Price based on the Unit of Measure Purchase Conversion
	 */
	function calculate_eachlistprice() {
		var updateitmpricing = {{ vxm.getConfigAp().update_itm_pricing() ? 'true' : 'false' }};

		var ordercode = form_vxm.find('select[name=po_ordercode]').val();
		var isprimary = ordercode == 'P';

		if (updateitmpricing === true && isprimary === true) {
			var eachlistprice = floatParse(get_eachlistprice());
			input_eachlistprice.val(eachlistprice.toFixed({{ vxm.field_attribute('listprice', 'precision') }}));
		}
		formVxm.inputs.updateAllMargins();
	}

	function get_eachlistprice() {
		var conversion = input_uom.find('option:selected').data('conversion');
		return eachlistprice = input_listprice.val() / floatParse(conversion);
	}

	function get_listprice() {
		return input_listprice.val();
	}

	/**
	 * Calculates Margin for each Unit Cost
	 */
	function calculate_costs() {
		$(".unit-row").each(function(index ) {
			update_unitrow_cost($(this));
		});
	}

		}
	}

	/**
	 * Calculates Margin for one Unit Cost
	 * @param JqueryElement unitrow
	 */
	function update_unitrow_cost(unitrow) {
		var input_unitqty  = unitrow.find('.unit-qty');
		var input_unitcost = unitrow.find('.unit-cost');
		var input_margin   = unitrow.find('.unit-margin');
		var margin = floatParse(input_margin.val()).truncate({{ vxm.field_attribute('unit_margin', 'precision') }});
		margin =  floatParse(margin).toFixed({{ vxm.field_attribute('unit_margin', 'precision') }});
		input_margin.val(margin);

		if (floatParse(input_margin.val())) {
			var cost = floatParse(determine_unitcost(margin)).toFixed({{ vxm.field_attribute('unit_cost', 'precision') }});
			input_unitcost.val(cost);
		}
	}

	function update_listprice_from_basemargin(callback) {
		var conversion = floatParse(input_uom.find('option:selected').data('conversion'));
		var basecost   = floatParse($('input[name=unitcost_base]').val());
		var basemargin = floatParse($('input[name=unitmargin_base]').val());
		var listprice = basecost / (1 - (basemargin / 100));
		listprice = listprice.toFixed({{ vxm.field_attribute('listprice', 'precision') }});
		$('input[name=unitmargin_base]').val(basemargin.toFixed({{ vxm.field_attribute('unit_margin', 'precision') }}))
		input_listprice.val(listprice);
		changeEachListPrice();

		callback();
	}

	/**
	 * Calculates Margin for one Unit Cost
	 * @param  JqueryElement unitrow
	 */
	function update_input_availability(unitrow) {
		var input_unitqty = unitrow.find('.unit-qty');
		var inputs = unitrow.find('.unit-cost, .unit-margin');

		if (floatParse(input_unitqty.val()) > 0) {
			inputs.removeAttr('readonly');
			inputs.removeAttr('tabindex');

			var cost = floatParse(unitrow.find('.unit-cost').val());
			if (cost > 0) {
				var index = parseInt(unitrow.data('break')) + 1;
				$('.unit-row[data-break='+ index +'] .unit-qty').removeAttr('tabindex').removeAttr('readonly');
			}
		} else {
			inputs.attr('readonly', 'readonly');
			inputs.attr('tabindex', '-1');
		}
	}

	/**
	 * Returns Margin for cost
	 * @param  float   cost Unit Cost
	 * @return float
	 */
	function determine_unitmargin(cost) {
		var listprice = get_listprice();

		if (listprice == 0 || cost == 0) {
			return 0;
		} else {
			if (listprice == 0) {
				return 0;
			}
			var markup = listprice - cost;
			return markup / listprice * 100;
		}
	}

	/**
	 * Returns Cost for Margin
	 * @param  float    margin Margin Percent
	 * @return float
	 */
	function determine_unitcost(margin) {
		var listprice = get_listprice();

		if (listprice == 0 || margin == 0) {
			return '';
		} else {
			return (1 - (margin / 100)) * listprice;
		}
	}

	function changeEachListPrice() {
		var allowlistpriceupdate = {{ vxm.getConfigAp().update_itm_pricing() ? 'true' : 'false' }};
		var itmcost_ordercodes = {{ constant('ORDERCODES_ITM_COST', vxm)|json_encode()|raw }};
		var iscostcode = itmcost_ordercodes.contains($('select[name=po_ordercode]').val());

		if ((iscostcode && allowlistpriceupdate)) {
			$('input[name=eachlistprice]').val(floatParse(get_eachlistprice()).toFixed({{ vxm.field_attribute('listprice', 'precision') }}));
		}
	}

});
