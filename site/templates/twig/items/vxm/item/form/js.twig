{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	item                   ItemXrefVendor
	url_validate           URL to validate form inputs
#}
$(function() {
	var eachlistprice = {{ item.eachlistprice }};
	var itemID = '{{ item.ouritemID }}';
	var primarypoordercode = '{{ item.getOptionpoordercodePrimary() }}';

	var primaryitem = {
		same: {{ item.is_po_ordercode_primary() ? 'true' : 'false'}},
		otherexists: {{ item.other_primary_poordercode_exists() ? 'true' : 'false'}},
		vendoritemid: '{{ item.other_primary_poordercode_itemid() }}',
		vendorid: '{{ item.other_primary_poordercode_vendorid() }}'
	}

	var form_vxm = $('#vxm-item-form');
	var input_listprice = form_vxm.find('input[name=listprice]');
	var input_uom       = form_vxm.find('select[name=uom_purchase]');
	var input_eachlistprice = form_vxm.find('input[name=eachlistprice]');
	var input_ouritemID = form_vxm.find('input[name=ouritemID]');
	var input_vendoritemID = form_vxm.find('input[name=vendoritemID]');
	var input_vendorID = form_vxm.find('input[name=vendorID]');

	var modal_ajax = $('#ajax-modal');

/* =============================================================
	Event Functions
============================================================= */
	$("body").on("change", ".unit-cost, .unit-qty", function(e) {
		var unitrow = $(this).closest('.unit-row');
		update_unitrow_margin(unitrow);
	});

	/**
	 * Change the Unit of Measure Description when the Unit of Measure is changed
	 */
	$("body").on("change", "#uom_purchase", function(e) {
		var input_uompurchase = $(this);
		var conversion = input_uompurchase.find('option:selected').data('conversion');
		var ele_description = input_uompurchase.siblings('p').find('.conversion-description');
		ele_description.text(conversion);
		calculate_eachlistprice();
	});

/* =============================================================
	Vendor Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		var url = '{{ page.searchvendorsURL }}';
		modal.find('.modal-title').text('Search for a Vendor');
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '.vendor-link', function(e) {
		e.preventDefault();
		var button = $(this);
		var vendorID = button.data('vendorid');
		var name = button.data('name');
		input_vendorID.val(vendorID);
		modal_ajax.modal('hide');
	});

	$("body").on('submit', 'form#vendor-search-form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '#ajax-modal .paginator-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("vendoritemID", function(value, element) {
		return this.optional(element) || validate_vendoritemID();
	}, "Vendor ItemID already exists");

	form_vxm.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			vendoritemID: {
				required: true,
			},
			ouritemID: {
				required: true,
				remote: {
					url: '{{ url_validate }}',
					type: "get",
					data: {
						action: 'validate-itemid'
					}
				}
			},
			uom_purchase: 'required',
			qty_percase: 'required',
		},
		messages: {
			ouritemID: "Please enter the Your Item ID",
			uom_purchase: "Please choose a Purchase Unit of Measure",
		},
		submitHandler: function(form) {
			var select_poordercode = form_vxm.find('select[name=po_ordercode]');
			var input_validatedpoordercode = select_poordercode.siblings('input[name=po_ordercode_validated]');
			var formdata = form_vxm.serializeArray().reduce(function(obj, item) {
				obj[item.name] = item.value;
				return obj;
			}, {});

			if (validate_vendoritemID()) {
				if (input_validatedpoordercode.val() == 'false') {
					if (select_poordercode.val() == primarypoordercode) {
						validate_poordercode();
					} else {
						input_validatedpoordercode.val('true');
						form_vxm.submit();
					}
				} else {
					form.submit();
				}
			} else {
				alert_vendoritemID();
			}
		}
	});

	function validate_poordercode() {
		var url = new URI('{{ url_validate }}');
		url.addQuery('action', 'validate-primary-poordercode').addQuery('ouritemID', input_ouritemID.val())
		url.addQuery('vendoritemID', input_vendoritemID.val());

		// URL RETURNS boolean true or string UPC code for false
		$.getJSON( url.toString(), function( valid ) {
			if (typeof valid  === 'string' || valid  instanceof String) {
				var msg = valid;

				swal2.fire({
					title: "Overwrite Primary PO Ordercode?",
					text: msg,
					icon: 'warning',
					showCancelButton: true,
					confirmButtonClass: 'btn btn-success',
					cancelButtonClass: 'btn btn-danger',
					buttonsStyling: false,
					confirmButtonText: 'Yes!'
				}).then(function (result) {
					if (result.value) {
						input_validatedpoordercode.val('true');
						form_vxm.submit();
					}
				}).catch(swal.noop);
			} else {
				if (valid) {
					input_validatedpoordercode.val('true');
					form_vxm.submit();
				}
			}
		});
	}

	function request_validate_vendoritemID(callback) {
		var url = new URI('{{ url_validate }}');
		url.addQuery('action', 'validate-vendor-itemid-new').addQuery('vendorID', input_vendorID.val())
		url.addQuery('vendoritemID', input_vendoritemID.val());

		$.getJSON(url.toString(), function( valid ) {
			callback(valid);
		});
	}

	function validate_vendoritemID() {
		if (input_vendoritemID.val() != input_vendoritemID.data('vendoritemid') && input_vendoritemID.data('vendoritemid').length) {
			request_validate_vendoritemID(function(valid) {
				if (typeof valid  === 'string' || valid  instanceof String) {
					return false;
				} else {
					return true;
				}
			});
		} else {
			return true;
		}
	}

	function alert_vendoritemID() {
		if (input_vendoritemID.val() != input_vendoritemID.data('vendoritemid')) {
			request_validate_vendoritemID(function(valid) {
				if (typeof valid  === 'string' || valid  instanceof String) {
					swal2.fire({
						title: valid,
						text: 'Would you like to go edit this item?',
						icon: 'error',
						showCancelButton: true,
						confirmButtonText: 'Yes',
						cancelButtonText: 'No',
					}).then((result) => {
						if (result.value) {
							var uri = new URI();
							uri.removeQuery('vendoritemID');
							uri.setQuery('vendorID', input_vendorID.val());
							uri.setQuery('vendoritemID', input_vendoritemID.val());
							window.location.href = uri.toString();
						}
					});
				} else {
					return true
				}
			});
		}
	}

	$("body").on("click", "button[value=remove-vxm-item]", function(e) {
		e.preventDefault();

		swal2.fire({
			title: "Remove VXM Item?",
			text: "Are you sure you want to remove this VXM Item?",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: 'Yes!'
		}).then(function (result) {
			if (result.value) {
				form_vxm.submit();
			}
		});
	});


/* =============================================================
	Margin Calculation Functions
============================================================= */

	/**
	 * Recalculates Each List Price based on the Unit of Measure Purchase Conversion
	 */
	function calculate_eachlistprice() {
		var oldlistprice = eachlistprice;
		var conversion = input_uom.find('option:selected').data('conversion');
		eachlistprice = input_listprice.val() / parseFloat(conversion);
		input_eachlistprice.val(eachlistprice);

		if (eachlistprice != oldlistprice) {
			calculate_margins();
		}
	}

	/**
	 * Calculates Margin for each Unit Cost
	 */
	function calculate_margins() {
		$(".unit-row").each(function( index ) {
			update_unitrow_margin($(this));
		});
	}

	/**
	 * Calculates Margin for one Unit Cost
	 * @param  JqueryElement unitrow
	 */
	function update_unitrow_margin(unitrow) {
		var input_unitqty = unitrow.find('.unit-qty');
		var input_unitcost = unitrow.find('.unit-cost');
		var ele_margin = unitrow.find('.unit-margin');
		var margin = determine_unitmargin(input_unitcost.val());
		ele_margin.text(margin);
	}

	/**
	 * Returns Margin for cost
	 * @param  float   cost Unit Cost
	 * @return float
	 */
	function determine_unitmargin(cost) {
		if (eachlistprice == 0 || cost == 0) {
			return '';
		} else {
			var markup = eachlistprice - cost;
			return markup / eachlistprice * 100;
		}
	}
});
