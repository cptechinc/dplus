{#
	var                    Description / Instance of
	-------------------------------------------------
	item                 ItemMasterItem
	m_notes              module QnotesItem
	m_notes.notes.order  module QnotesItemOrder
#}

$(function() {
	$('#notes-internal-modal').on('shown.bs.modal', function (e) {
		var modal = $(this);
		modal.find('textarea[name=note]').focus();
	});

	$('#notes-revision-modal').on('shown.bs.modal', function (e) {
		var modal = $(this);
		var button = $(e.relatedTarget);
		var note_row = button.closest('.qnote-row');

		if (note_row.length) {
			modal.find('.action-desc').text('Editing');
			modal.find('input[name=notedate]').val(button.data('date')).attr('readonly', '');
			modal.find('input[name=notetime]').val(button.data('time')).attr('readonly', '');
			modal.find('textarea[name=note]').text(note_row.find('textarea').text());
		} else {
			modal.find('.action-desc').text('Adding');
			modal.find('input[name=notedate]').removeAttr('readonly');
			modal.find('input[name=notetime]').removeAttr('readonly');
			modal.find('textarea[name=note]').text('');
		}
	});

	$('#notes-inspection-modal').on('shown.bs.modal', function (e) {
		var modal = $(this);
		var button = $(e.relatedTarget);
		var note_row = button.closest('.qnote-row');

		if (note_row.length) {
			modal.find('.action-desc').text('Editing');
			modal.find('input[name=notedate]').val(button.data('date')).attr('readonly', '');
			modal.find('input[name=notetime]').val(button.data('time')).attr('readonly', '');
			modal.find('input[name=rawnotetime]').val(button.data('rawnotetime'));
			modal.find('textarea[name=note]').text(note_row.find('textarea').text());
		} else {
			modal.find('.action-desc').text('Adding');
			modal.find('input[name=notedate]').removeAttr('readonly');
			modal.find('input[name=notetime]').removeAttr('readonly');
			modal.find('input[name=rawnotetime]').val(button.data('rawnotetime'));
			modal.find('textarea[name=note]').text('');
		}
		modal.find('textarea[name=note]').focus()
	});

/* =============================================================
	Order Notes Functions
============================================================= */
	$('#notes-order-modal').on('shown.bs.modal', function (e) {
		var modal = $(this);
		var button = $(e.relatedTarget);
		var note_row = button.closest('.qnote-order-row');

		if (note_row.length) {
			modal.find('.action-desc').text('Editing');

			{% for form, label in m_notes.notes.order.get_forms_shortlabels() %}
				modal.find('input[name={{ form }}]').prop('checked', button.data('{{ form }}') == 'Y');
			{% endfor %}
			modal.find('textarea[name=note]').text(note_row.find('textarea').text());
		} else {
			modal.find('.action-desc').text('Adding');

			{% for form, label in m_notes.notes.order.get_forms_shortlabels() %}
				modal.find('input[name={{ form }}]').prop('checked', false);
			{% endfor %}
			modal.find('textarea[name=note]').text('');
		}
		modal.find('input[name=form]').val(button.data('form'));
		modal.find('textarea[name=note]').focus();
	});

	$("#order-notes-form").validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			note: {
				required: true,
			},
		},
		messages: {
			note: "Please Enter a Note",
		},
		submitHandler: function(form) {
			var action = $(this.submitButton).attr("value");

			if (action == 'delete-notes') {
				form.submit();
			} else {
				if (has_document_selected()) {
					if (!note_forms_exists())  {
						form.submit();
					} else {
						swal2.fire({
							title: 'This note type ('+ get_notes_formscode() +') exists!',
							text: 'Do you want View / Edit that note?',
							icon: 'question',
							showCancelButton: true,
							confirmButtonText: 'Yes',
							cancelButtonText: 'No',
						}).then((result) => {
							if (result.value) {
							//	$('#notes-order-modal').modal('hide');
								console.log($('.qnote-order-row[data-form='+get_notes_formscode()+']').find('button.edit'));
								//$('.qnote-order-row[data-form='+get_notes_formscode()+']').find('button.edit').click();

							} else if (result.dismiss === Swal.DismissReason.cancel) {

							}
						});
					}
				} else {
					var notesform = $(form);
					var ele_feedback = notesform.find('.feedback');
					ele_feedback.addClass('is-invalid');
					ele_feedback.html($('<label>Please check a document to add a note to</label>').addClass('invalid-feedback').show());
				}
			}
		}
	});



	function has_document_selected() {
		{% for form, label in m_notes.notes.order.get_forms_shortlabels() %}
			if ($("#order-notes-form").find('input[name={{ form }}]').prop('checked')) {
				return true;
			}
		{% endfor %}
		return false;
	}

	function get_notes_formscode() {
		var formcode = '';

		{% for form, label in m_notes.notes.order.get_forms_shortlabels() %}
			formcode += $("#order-notes-form").find('input[name={{ form }}]').prop('checked') ? 'Y' : 'N';
		{% endfor %}
		return formcode;
	}
	function note_forms_exists() {
		var formcode = get_notes_formscode();
		if ($('.qnote-order-row[data-form='+formcode+']').length) {
			return true;
		}
		return false;
	}
});
