{% include 'items/itm/form/js/classes.js.twig' %}

$(function() {
	var modal_ajax = $('#ajax-modal');

	var form = $('#itm-form');
	var input_customer  = form.find('input[name=custid]');
	var input_custname  = form.find('input[name=cust_name]');

	var formItm = ItmForm.getInstance();

/* =============================================================
	Unsaved Fields Alert
============================================================= */
	$("body").on("change", "input[name=custID]", function(e) {
		var input = $(this);
		var custID = input.val();
		$('.customer-name').text('');

		if (custID.trim() == '') {
			input.val('');
		}

		if (input.val() != '') {
			customerJson(input.val(), function(customer) {
				if (customer) {
					input.val(customer.id);
					$('.customer-name').text(customer.name);
				}
			});
		}
	});

	$("body").on("change", "input[name=qtypercase]", function(e) {
		var input = $(this);
		if (parseInt(input.val()) < 1) {
			input.val(1);
		}
	});

	$("body").on("change", "input[name=grams]", function(e) {
		var input = $(this);
		var grams = parseFloat(input.val());
		var weight = grams / formItm.config.fields.grams.conversion;
		weight = weight.toFixed(formItm.config.fields.weight.precision);
		formItm.inputs.weight.val(weight);
	});

	$("body").on("change", "input[name=weight]", function(e) {
		var input = $(this);
		var weight = parseFloat(input.val());
		var grams = weight * formItm.config.fields.grams.conversion;
		formItm.inputs.grams.val(grams);
	});


/* =============================================================
	Unsaved Fields Alert
============================================================= */
	origForm = form.serialize();

	$("body").on("click", "a:not(#ajax-modal a)", function(e) {
		if (form.serialize() !== origForm) {
			e.preventDefault();
			var a = $(this);
			var href = a.attr('href');

			swal2.fire({
				title: 'Changes have occurred!',
				text: 'Do you want to save?',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonText: '<i class="fa fa-floppy-o" aria-hidden="true"></i> Yes',
				cancelButtonText: 'No',
			}).then((result) => {
				if (result.value) {
					form.find('button[type=submit]').click();
				} else if (result.dismiss === Swal.DismissReason.cancel) {
					// Send HTTP GET Request to remove Record Lock
					$.get('{{ page.url }}', function() {
						window.location.href = href;
					});
				}
			});
		}
	});

/* =============================================================
	Lookup Modal Functions
============================================================= */
	modal_ajax.on('show.bs.modal', function (event) {
		var button = $(event.relatedTarget); // Button that triggered the modal
		var modal = $(this);
		var url = button.data('lookupurl');

		modal.attr('data-input', button.data('input'));
		modal.find('.modal-title').text('Search for a Customer');
		modal.resizeModal('xl');
		modal.find('.modal-body').loadin(url, function() {
			modal.find('input[name=q]').focus();
		});
	});

	$("body").on('click', '.customer-link', function(e) {
		e.preventDefault();
		var custid = $(this).data('custid');
		var modal  = $(this).closest('.modal');
		var input  = $(modal.attr('data-input'));

		input.val(custid).change();
		modal_ajax.modal('hide');
	});

	$("body").on('submit', '#ajax-modal form', function(e) {
		e.preventDefault();
		var form = $(this);
		var query = form.serialize();
		var action = form.attr('action');
		var search = form.find('input[name=q]').val();
		var url = action + '?' + query;
		form.closest('.modal').find('.modal-title').text('Searching for ' + search);
		form.closest('.modal').find('.modal-body').loadin(url, function() {});
	});

	$("body").on('click', '#ajax-modal .paginator-link', function(e) {
		e.preventDefault();
		var href = $(this).attr('href');
		modal_ajax.find('.modal-body').load(href);
	});

/* =============================================================
	Validation Functions
============================================================= */
	form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		ignore: ".validate-ignore",
		rules: {
			qtypercase: {
				min: 1,
			},
			pricecode: {
				required: {{ itm.configIn().inv.use_pricegroup() ? 'true' : 'false' }}
			},
			commissiongroup: {
				required: {{ itm.configIn().inv.use_commgroup() ? 'true' : 'false' }}
			},
			itemID: {
				required: true,
				minlength: 3,
				maxlength: {{ item.get_length_itemid() }},
			},
			custID: {
				maxlength: {{ itm.fieldAttribute('custID', 'maxlength') }},
				remote: {
					url: '{{ page.jsonapiURL('mar/validate/custid/') }}',
					type: "get",
					data: {
						jqv: 'true'
					}
				}
			},
			stockcode: {
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/code/stock/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return $('#stockcode').val();
						}
					}
				}
			},
			specialitemcode: {
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/code/special-item/') }}',
					type: "get",
					data: {
						jqv: 'true',
						code: function() {
							return $('#specialitemcode').val();
						}
					}
				}
			},
			description: {
				maxlength: {{ itm.fieldAttribute('description1', 'maxlength') }},
			},
			description2: {
				maxlength: {{ itm.fieldAttribute('description2', 'maxlength') }},
			},
			revision: {
				maxlength: {{ itm.fieldAttribute('revision', 'maxlength') }},
			}
		},
		messages: {
			itemID: "Please review itemID, must not be more than {{ item.get_length_itemid() }} characters",
		},
		submitHandler: function(form) {
			var itemID_input = $(form).find('input[name=itemID]').val();
			var itemID_form  = $(form).data('itemid');

			console.log($(form).find('input[name=action]').val());

			request_item_json(itemID_input, function(exists) {
				if (exists) { // Item Exists
					if (itemID_input == itemID_form) { // Item input == Form's item ID, allow save
						form.submit();
					} else {
						alert_item_exists(itemID_input);
					}
				} else { // ITEM does not exist yet, allow save
					if (itemID_form == '') {
						form.submit();
					}
				}
			});
		}
	});

	function request_item_json(itemID, callback) {
		var url = URI('{{ page.jsonapiURL('inv/validate/itemid/') }}');
		url.addQuery('itemID', itemID);

		$.getJSON(url.toString(), function(exists) {
			callback(exists);
		});
	}

	function customerJson(custID, callback) {
		var url = URI('{{ page.jsonapiURL('mar/customer/') }}');
		url.addQuery('custID', custID);

		$.getJSON(url.toString(), function(customer) {
			callback(customer);
		});
	}

	function alert_item_exists(itemID) {
		var itemurl = new URI('{{ page.url }}');
		itemurl.addQuery('itemID', itemID);

		swal2.fire({
			title: 'Item ID ' + itemID + ' exists',
			text: "Do you want to edit " + itemID + '?',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: '<i class="fa fa-pencil" aria-hidden="true"></i> Yes',
			cancelButtonText: 'No',
		}).then((result) => {
			if (result.value) {
				window.location.href = itemurl.toString();
			}
		});
	}
});
