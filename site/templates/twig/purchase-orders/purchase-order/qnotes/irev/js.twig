$(function() {
	var modal_notes = $('#notes-revision-modal');
	var form        = modal_notes.find('form');

	/* =============================================================
		Revision Notes Methods
	============================================================= */
	modal_notes.on('show.bs.modal', function (e) {
		var modal = $(this);
		var button = $(e.relatedTarget);
		var note_row = button.closest('.qnote-row');

		if (note_row.length) {
			modal.find('.action-desc').text('Editing');
			modal.find('input[name=notedate]').val(button.data('date')).attr('readonly', 'true');
			modal.find('input[name=notetime]').val(button.data('time')).attr('readonly', 'true');
			modal.find('textarea[name=note]').val(note_row.find('textarea').text());
		} else {
			modal.find('.action-desc').text('Adding');
			modal.find('input[name=notedate]').val(button.data('date')).removeAttr('readonly');
			modal.find('input[name=notetime]').val(button.data('time')).removeAttr('readonly');
			modal.find('textarea[name=note]').val('');
		}

		modal.find('input[name=revision]').val(button.data('revision'));
		modal.find('input[name=itemID]').val(button.data('itemid'));
	});

	jQuery.validator.addMethod("notetime", function(value, element) {
		return this.optional(element) || valid_notetime(value)
	}, "Time nees to be in this format: hh:mm");

	var validator = form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			note: { required: true },
			notedate: { required: true },
			notetime: { required: true, notetime: true },
			revision: { required: true },
		},
		messages: { note: "Please Enter a Note",},
		submitHandler: function(form) {
			var action = $(this.submitButton).attr("value");
			var jform = $(form);
			form.submit();
		}
	});

	function valid_notetime(value) {
		console.log(value);
		if (value.length && value.includes(':')) {
			var timesplit = value.split(':');
			var hours = timesplit[0];
			var minutes = timesplit[1];
			if (isNaN(hours) || isNaN(minutes)) {
				return false;
			}

			if (parseInt(hours) < 24 && parseInt(minutes) < 60) {
				return true;
			}
		}
		return false;
	}
});
