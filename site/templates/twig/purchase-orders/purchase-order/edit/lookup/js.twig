$(function() {
	var form_additem = $('#add-item-form');
	var input_itemid = form_additem.find('input[name=itemID]');
	var input_qty = form_additem.find('input[name=qty]');

/* =============================================================
	Validation Functions
============================================================= */
	var validator_add = form_additem.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			error.insertAfter(element).addClass('invalid-feedback');
		},
		rules: {
			additemID: {
				required: true,
				remote: {
					url: '{{ page.jsonapiURL('inv/validate/itemid/') }}',
					type: "get",
					data: {
						itemID: function() {
							return $('#additemID').val();
						},
						jqv: 'true'
					}
				}
			},
			qty: {
				required: true,
				min: 1
			}
		},
		submitHandler: function(form) {
			validate_itm_item(input_itemid.val(), function(exists) {
				if (exists) {
					form.submit();
				} else {
					validate_get_item();
				}
			});
		}
	});

	function validate_get_item() {
		validate_itemid_entry(input_itemid.val(), $('input#vendorID').val(), function(response) {
			if (response.exists) {
				input_itemid.val(response.itemid);
				input_itemid.addClass('is-valid');
				get_item_data(function(exists) {});
			} else if (response.matches.itm > 0) {
				var q = input_itemid.val();
				input_itemid.val('');
				var url = input_itemid.closest('.input-group').find('button').data('lookupurl');
				url = URI(url);
				url.addQuery('q', q);
				var modal_ajax = $('#ajax-modal');
				modal_ajax.find('.modal-title').text('Searching for ' + q);
				modal_ajax.resizeModal('xl');
				modal_ajax.modal('show');
				modal_ajax.find('.modal-body').loadin(url.toString(), function() {});
			} else {
				input_itemid.addClass('is-invalid');
				swal_notfound();
			}
		});
	}

	function get_item_data(callback) {
		get_itm_item(input_itemid.val(), function(item) {
			if (item) {
				input_itemid.val(item.itemid);
				input_itemid.addClass('is-valid');
				$('.descriptions .desc1').text(item.description);
				$('.descriptions .desc2').text(item.description2);
				if ($('.descriptions').find('.weight').length) {
					$('.descriptions .weight').text(item.weight);
				}
				$('.descriptions').addClass('show');
				form_additem.find('.uom').text(item.uom_purchase);
				var cost = item.standardcost;
				if (item.lastcost) {
					cost = item.lastcost;
				}
				form_additem.find('input[name=cost]').val(cost);
				callback(true);
			} else {
				callback(false);
			}
		});
	}

	function swal_notfound() {
		swal2.fire({
			title: 'Item not found.',
			text: input_itemid.val() + ' cannot be found.',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: 'Make Advanced Search'
		}).then(function (result) {
			if (result.value) {
				var url = URI("{{ page.fullURL.getUrl() }}");
				url.addQuery('q', input_itemid.val());
				url.hash('#results');
				window.location.replace(url.toString());
			}
		});
	}

/* =============================================================
	Event Functions
============================================================= */
	$("body").on('click', '.item-lookup-result', function(e) {
		e.preventDefault();

		var button = $(this);
		var itemID = button.data('itemid');
		form_additem.attr('data-validated', itemID);
		input_itemid.val(itemID);
		input_qty.focus();
		$('body,html').animate({ scrollTop: input_qty.offset().top - 100 }, 800);
	});

	$("body").on('change', '#add-item-form input[name=itemID]', function(e) {
		var input = $(this);
		validate_get_item();
		validator_add.element('#'+input.attr('id'));
	});

/* =============================================================
	AJAX Request Functions
============================================================= */
	/**
	 * Return Xref Item Object
	 * @param  string     vendorID     Vendor ID
	 * @param  string     vendoritemID Vendor Item ID
	 * @param  {Function} callback     Function to call after result
	 * @return {object}                {vendorid: xxx, vendoritemid: xxx, itemid: xxx}
	 */
	function get_vxm_xref(vendorID, vendoritemID, callback) {
		var url = new URI('{{ page.jsonapiURL('map/vxm/') }}');
		url.addQuery('vendorID', vendorID).addQuery('vendoritemID', vendoritemID);

		$.getJSON(url.toString(), function(xref) {
			callback(xref);
		});
	}

	/**
	 * Return ITM Item
	 * @param  string     itemID    Item ID
	 * @param  {Function} callback  Function to call after result
	 * @return {object}             {itemid: xxx, description: xxx, description2: xxx, uom_purchase: xxx}
	 */
	function get_itm_item(itemID, callback) {
		var url = new URI('{{ page.jsonapiURL('inv/item/') }}');
		url.addQuery('itemID', itemID).addQuery('fields', 'uom_purchase,weight,lastcost,standardcost');

		$.getJSON(url.toString(), function(item) {
			callback(item);
		});
	}

	/**
	 * Return if Item ID is valid in ITM
	 * @param  {string}   itemID   Item ID
	 * @param  {Function} callback Callback function
	 * @return {bool}
	 */
	function validate_itm_item(itemID, callback) {
		var url = new URI('{{ page.jsonapiURL('inv/validate/itemid/') }}');
		url.addQuery('itemID', itemID);

		$.getJSON(url.toString(), function(exists) {
			callback(exists);
		});
	}

	/**
	 * Return Item Entry Object Validation
	 * @param  string     itemID    Item ID
	 * @param  string     vendorID  Vendor ID
	 * @param  {Function} callback  Callback Function
	 * @return {object}             {exists: (bool), itemID: xxx, message: xxx, source: xxx }
	 */
	function validate_itemid_entry(itemID, vendorID, callback) {
		var url = URI("{{ page.jsonapiURL('item-lookup') }}");
		url.addQuery('entry', 'po');
		url.addQuery('itemID', itemID);
		url.addQuery('vendorID', vendorID);

		$.getJSON(url.toString(), function( response ) {
			return callback(response);
		});
	}
});
